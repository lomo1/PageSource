{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo-2.png","path":"img/logo-2.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo-3.png","path":"img/logo-3.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/study/node-swig-error.png","path":"img/study/node-swig-error.png","modified":1,"renderable":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e9183b650cd0c4a2a371df33d1985f6ef77bb405","modified":1487915065000},{"_id":"source/404.html","hash":"7e6221fae8d21679e7485822687f45945dd0eeb4","modified":1489295613000},{"_id":"source/CNAME","hash":"09969af0edbd262a215a8f316f5a4e47322bca32","modified":1487942911000},{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1487789285000},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1487789285000},{"_id":"themes/jacman/README.md","hash":"75a5c9fbd7c9cec4d2f277042d2fee550e4936be","modified":1487789285000},{"_id":"themes/jacman/README_zh.md","hash":"d6014b16eaccc97dc54a7779c9e36003752410e1","modified":1487789285000},{"_id":"themes/jacman/_config.yml","hash":"6af77edb0ecdaabc88cd9904c59f2479d4d8f4b0","modified":1489578126000},{"_id":"source/tech/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487942911000},{"_id":"source/_posts/.DS_Store","hash":"99db148389963ca8a0abb86edccecc5296bda416","modified":1487915700000},{"_id":"source/_posts/Java-Class-and-Object.md","hash":"af8595e7b8e5c289a80274bd6064bbf830d1333c","modified":1489290057000},{"_id":"source/_posts/Linux-and-BSD-difference.md","hash":"2e583afdf8ce4ec29853b393b369790fb7a4865b","modified":1488037193000},{"_id":"source/_posts/MS-Bing-CodeFlow.md","hash":"86ef69616249268811d54730008d9e4510bb87b3","modified":1488037632000},{"_id":"source/_posts/MacOXS-Install-JDK-1-7-1-8.md","hash":"658e7583fb7259d0b60ac07dcfce31e8be9d1cb3","modified":1489577896000},{"_id":"source/_posts/centos-install-LAMP-develop-env.md","hash":"3bbd8c6f7fa94fcc007261ad33403e70ee42b95c","modified":1488035569000},{"_id":"source/_posts/centos-install-ftp.md","hash":"9cb2386a8a5d9fd2fe93cf94c21c23ba575d661c","modified":1489579253000},{"_id":"source/_posts/centos-upgrade-mysql-to-5-7.md","hash":"f33b6f939b757c4f2fe0ac4f5b5d7a778450b1fb","modified":1488036596000},{"_id":"source/_posts/centos-upgrade-php.md","hash":"0a60616a68eb9b48612821bca0b8fd90daeb6570","modified":1488035283000},{"_id":"source/_posts/create-git-by-gogs.md","hash":"3fc1bf60a98466504458cd17f50db542af4ac5be","modified":1489224566000},{"_id":"source/_posts/how-to-write-a-new-article.md","hash":"82e50e1e22b88ee61463e462592e160700ba200c","modified":1487957491000},{"_id":"source/_posts/howToCreateBlogByUsingGitHubPages.md","hash":"6ad5787ecc78e7727be4013e854ea750f4c63592","modified":1489219248000},{"_id":"source/_posts/install-Brew-tools-on-Mac.md","hash":"2a9c821e30eb2d05f8007eaa00915c5283827dd4","modified":1488038616000},{"_id":"source/_posts/java-String-StringBuffer-StringBuilder.md","hash":"0e7f9c8300d62a2182077ea953282310fc4b0045","modified":1489456818000},{"_id":"source/_posts/linux-general-command.md","hash":"46e95585e89c81b0ec7ad6cc57437759bf6cf1c8","modified":1488034456000},{"_id":"source/_posts/linux-install-php-extend.md","hash":"c0b77304c27cf5f71fb297172776ef5dc0800815","modified":1488037036000},{"_id":"source/_posts/love.md","hash":"cdce6c171740469cc6fd355f98ba24c2a1a4976d","modified":1489311735000},{"_id":"source/_posts/ssh-login-without-password.md","hash":"f03ace7f3c3a209a598fa1ab536d6b1ba950f6d0","modified":1488035250000},{"_id":"source/about/index.md","hash":"8de9946534faa685922fa93b204559dd012a7661","modified":1489295389000},{"_id":"source/categories/index.md","hash":"0502d74d0c62add87541cc327aea9c78ca911c3e","modified":1487942911000},{"_id":"source/img/.DS_Store","hash":"600654592ffb3d81e8fc4f4e60e7af6600491f9e","modified":1489219151000},{"_id":"source/tags/index.md","hash":"a248f366f795bbd623da6105282911c254c179cc","modified":1487942911000},{"_id":"themes/jacman/.git/FETCH_HEAD","hash":"77dc33ad87e080fdd9cce0872b1de44796f43a9f","modified":1487835318000},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1487789284000},{"_id":"themes/jacman/.git/config","hash":"1bcf2f9894fe75689fc85bd2a6ae9d0c7c490731","modified":1487789285000},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1487789265000},{"_id":"themes/jacman/.git/gitk.cache","hash":"25f21efff07718e61dbcd39f8fc2c5d4ca64aa72","modified":1487792330000},{"_id":"themes/jacman/.git/index","hash":"0d56c8beddaf3354e411acc39e71bad94af8758b","modified":1489565021000},{"_id":"themes/jacman/.git/packed-refs","hash":"facb04d8a7e4221a4b0b3dc3062a8ca586ade15d","modified":1487789284000},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1487789285000},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"c6ff20435bef68fea45a3c02a1f9eb4849b461cc","modified":1487849189000},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1487789285000},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1487789285000},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1487789285000},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1487789285000},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1487789285000},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1487789285000},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1487789285000},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1487789285000},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1487789285000},{"_id":"source/categories/essay/2017-02-23-suibi2.md","hash":"a6c00bdea3052dc9011222c1f7d401467a18c407","modified":1487942911000},{"_id":"source/categories/essay/index.md","hash":"84b4579def3b7daef50b9656622e5eaae317a148","modified":1487942911000},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1487789265000},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1487789265000},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1487789265000},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1487789265000},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1487789265000},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1487789265000},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1487789265000},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1487789265000},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1487789265000},{"_id":"themes/jacman/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1487789265000},{"_id":"themes/jacman/.git/logs/HEAD","hash":"9d4c2c75a98b1c149d6881bacf23fd1eaf9cc313","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"8842e783d3277832a30da65ae785a58ab7b6448f","modified":1487875456000},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"585ece6b02bc265e12e764dafb0c4c20149e0d37","modified":1488967366000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1487789285000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"0ad55350d6abab5f2283bda8d91515d1d45e05e0","modified":1487857146000},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1487789285000},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1487789285000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1487789285000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1487789285000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1487789285000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1487789285000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1487789285000},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1487789285000},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1487789285000},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1487789285000},{"_id":"themes/jacman/source/img/author.jpg","hash":"39174d47c4a7e800fa68c99b70355c77c8bb81cc","modified":1487790078000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487789285000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487789285000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487789285000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487789285000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487789285000},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487789285000},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487789285000},{"_id":"themes/jacman/source/img/favicon.ico","hash":"7aa6951ceeb9be940c86b7991f3deb6cd4675ef5","modified":1487826388000},{"_id":"themes/jacman/source/img/logo-2.png","hash":"ad48f72c78fd999c46e5eb2550c9b1d4787f4780","modified":1488965811000},{"_id":"themes/jacman/source/img/logo-3.png","hash":"de0d16d6b838caa4fb99aa153f0f735dd723fa2a","modified":1488965905000},{"_id":"themes/jacman/source/img/logo.png","hash":"b49d53c38cac2b153d1d03060176aa8eaa9b0429","modified":1488965911000},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1487789285000},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1487789285000},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1487789285000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1487789285000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1487789285000},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1487789285000},{"_id":"source/img/study/node-swig-error.png","hash":"1ff8a7880ae0d73cdc51c0e10f9a17b7d63cc239","modified":1487942911000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1487789285000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1487789285000},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1487789285000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1487789285000},{"_id":"themes/jacman/.git/objects/pack/pack-ab6dc588f377f30f418f9a0dee75d73a3ddfefbe.idx","hash":"ffce738349b28c63d2b58fc59c8966bb54f558e4","modified":1487789284000},{"_id":"themes/jacman/.git/refs/heads/master","hash":"51d4013e66aa8b536ba9b382ed64385114d32d9a","modified":1487789284000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1487789285000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1487789285000},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1487789285000},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1487789285000},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"1b7295b125d0a715adff9585c755f7f405d8f789","modified":1487919819000},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1487789285000},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1487789285000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1487789285000},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1487789285000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1487789285000},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1487789285000},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1487789285000},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1487789285000},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487789285000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1487789285000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1487789285000},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1487789285000},{"_id":"source/_posts/how-to-write-a-new-article/how-to-write-article.png","hash":"e5d79433b7d2976f26fc466533b83507027e5b8e","modified":1487950497000},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"9d4c2c75a98b1c149d6881bacf23fd1eaf9cc313","modified":1487789285000},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1487789284000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1487789285000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1487789285000},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"9d4c2c75a98b1c149d6881bacf23fd1eaf9cc313","modified":1487789284000},{"_id":"themes/jacman/.git/objects/pack/pack-ab6dc588f377f30f418f9a0dee75d73a3ddfefbe.pack","hash":"2ffe527650d1415ff773818614141d27a97fba7d","modified":1487789284000}],"Category":[{"name":"study","_id":"cj0ax9fmm0006eyqmrcw6tp5l"},{"name":"read","_id":"cj0ax9fn8000ceyqm8ausim0n"},{"name":"write","_id":"cj0ax9fnw000neyqmweecv9mn"},{"name":"essay","_id":"cj0ax9foc0010eyqme4x5qx3i"},{"name":"program","_id":"cj0ax9fpb001peyqm069xs05e"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Lomo Space</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://lomo.space\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Lomo Space</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://lomo.space\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>","date":"2017-03-15T12:10:33.000Z","updated":"2017-03-15T12:10:33.000Z","path":"404.html","_id":"cj0ax9fi30000eyqmr4va8dz6","title":"","comments":1,"layout":"page","content":"<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Lomo Space</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://lomo.space\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Lomo Space</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://lomo.space\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>"},{"_content":"","source":"tech/index.md","raw":"","date":"2017-03-15T08:03:23.000Z","updated":"2017-02-24T13:28:31.000Z","path":"tech/index.html","title":"","comments":1,"layout":"page","_id":"cj0ax9fk40001eyqmjgpduajq","content":"","excerpt":"","more":""},{"title":"About Me","date":"2010-12-20T16:10:01.000Z","tag":null,"description":"self introduction","_content":"\n## About Lomo\n\n\n### ↔️座右铭↔️\n\n「你的水平决定了你遇见的人的水平」\n\n\n> &nbsp;&nbsp;&nbsp;你自己都不够好，你凭什么要求你遇见的人怎样！\n\n「你现在的气质里，藏着你走过的路，读过的书和爱过的人」\n\n\n「真正牛逼的，不是那些可以随口拿来夸耀的事迹，而是那些在困境中依然保持微笑的凡人」\n\n<div align='center'>\n    <img width=\"450\" height=\"350\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/tomorrow.jpeg\" />\n    <br>\n</div>\n\n- - -\n\n### 📚书\n\n读书，小则各国小说，《Zero To One》、《灿烂千阳》、《一个人的朝圣》、《小王子》、《巴别塔之犬》、《我以为你死了》、《我在雨中等你》、《偷影子的人》、《乔布斯管理日志》、《乔布斯内部信件》，《明朝那些事儿》、《蹉跎坡旧事》、《匆匆那年》、《站在两个世界的边缘》、《他们最幸福》、《平凡的世界》、《没有梦想 何必远方》；大则国内外名著：《1984》[乔治奥威尔]、高尔基三部曲：《童年》、《在人间》、《我的大学》、《钢铁》、《简爱》、《巴黎圣母院》、《卡夫卡》。\n\n还有很多其它暂时未想起来名字的书，大概算一下，从小到大也没少看小说，没少看国内外名著，但是感觉就在那儿，你读或不读就是不一样！\n\n前年看程浩的《站在两个世界的边缘》时，感触很大，对生命，对生活，对这个世界很多看法都有些许改变。我们都是如此渺小以至于无法抵抗任何突如其来或天降之祸，而往往重要的不是这种突入起来或天降之祸的程度有多大，而是每个人面对这些艰难困苦时的心态和行动！\n\n浩仔在zhihu上说: \"不是那些可以随口拿来夸耀的事迹，而是那些在困境中依然保持微笑的凡人\"。不用肆意炫耀那些事情，一切皆如灰。\n\n\n### 🎬电影\n好评的、差评的都基本看过，国内的，国外的，两个硬盘基本塞满了外国影片。\n\n当然，美剧也是大爱，很多！权利的游戏 全季全部追完。\n\n### 🎵音乐\n什么Jay、JJ、王力宏、Mayday、孙燕姿、梁静茹、beyond、小虎队、SHE.... 全都听了个遍，依旧那样。\n\n英文还是大爱ColdPlay，passenger的Let Her Go，起初的钢琴独奏，怒赞！\n\n### 📅工作\n\nI am word In JDB Now ~_~\n\n### 目标\n\n买房、买车、娶媳妇、财务自由    ~_~\n\n(我就不信，你们没有其中之一)\n\n### 生活\n最近的生活有点糟糕，需要好好调理调理\n\n### 💻其它\n除了工作就是玩乐，学习。\n\nPHP开发、前端开发(H5+CSS3+JS)、Java、NodeJS，都可以搞起来，恩，主要就是这几门语言熟一些。\n\n未来想向AI、物联网方向走，有机会要去探探路，求带！！！\n\n<br>\n* * *\n\n> 长大后，踏上火车的那一刻还没有意识到，从此后，故乡只有冬，再无春夏秋.\n\n<div align=\"center\">\n    <img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/hometown.jpeg\" />\n    <br>\n</div>\n \n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2010-12-21 00:10:01\ntag: \ndescription: self introduction\n---\n\n## About Lomo\n\n\n### ↔️座右铭↔️\n\n「你的水平决定了你遇见的人的水平」\n\n\n> &nbsp;&nbsp;&nbsp;你自己都不够好，你凭什么要求你遇见的人怎样！\n\n「你现在的气质里，藏着你走过的路，读过的书和爱过的人」\n\n\n「真正牛逼的，不是那些可以随口拿来夸耀的事迹，而是那些在困境中依然保持微笑的凡人」\n\n<div align='center'>\n    <img width=\"450\" height=\"350\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/tomorrow.jpeg\" />\n    <br>\n</div>\n\n- - -\n\n### 📚书\n\n读书，小则各国小说，《Zero To One》、《灿烂千阳》、《一个人的朝圣》、《小王子》、《巴别塔之犬》、《我以为你死了》、《我在雨中等你》、《偷影子的人》、《乔布斯管理日志》、《乔布斯内部信件》，《明朝那些事儿》、《蹉跎坡旧事》、《匆匆那年》、《站在两个世界的边缘》、《他们最幸福》、《平凡的世界》、《没有梦想 何必远方》；大则国内外名著：《1984》[乔治奥威尔]、高尔基三部曲：《童年》、《在人间》、《我的大学》、《钢铁》、《简爱》、《巴黎圣母院》、《卡夫卡》。\n\n还有很多其它暂时未想起来名字的书，大概算一下，从小到大也没少看小说，没少看国内外名著，但是感觉就在那儿，你读或不读就是不一样！\n\n前年看程浩的《站在两个世界的边缘》时，感触很大，对生命，对生活，对这个世界很多看法都有些许改变。我们都是如此渺小以至于无法抵抗任何突如其来或天降之祸，而往往重要的不是这种突入起来或天降之祸的程度有多大，而是每个人面对这些艰难困苦时的心态和行动！\n\n浩仔在zhihu上说: \"不是那些可以随口拿来夸耀的事迹，而是那些在困境中依然保持微笑的凡人\"。不用肆意炫耀那些事情，一切皆如灰。\n\n\n### 🎬电影\n好评的、差评的都基本看过，国内的，国外的，两个硬盘基本塞满了外国影片。\n\n当然，美剧也是大爱，很多！权利的游戏 全季全部追完。\n\n### 🎵音乐\n什么Jay、JJ、王力宏、Mayday、孙燕姿、梁静茹、beyond、小虎队、SHE.... 全都听了个遍，依旧那样。\n\n英文还是大爱ColdPlay，passenger的Let Her Go，起初的钢琴独奏，怒赞！\n\n### 📅工作\n\nI am word In JDB Now ~_~\n\n### 目标\n\n买房、买车、娶媳妇、财务自由    ~_~\n\n(我就不信，你们没有其中之一)\n\n### 生活\n最近的生活有点糟糕，需要好好调理调理\n\n### 💻其它\n除了工作就是玩乐，学习。\n\nPHP开发、前端开发(H5+CSS3+JS)、Java、NodeJS，都可以搞起来，恩，主要就是这几门语言熟一些。\n\n未来想向AI、物联网方向走，有机会要去探探路，求带！！！\n\n<br>\n* * *\n\n> 长大后，踏上火车的那一刻还没有意识到，从此后，故乡只有冬，再无春夏秋.\n\n<div align=\"center\">\n    <img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/hometown.jpeg\" />\n    <br>\n</div>\n \n","updated":"2017-03-12T05:09:49.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0ax9fm60003eyqm5mofa3cf","content":"<h2 id=\"About-Lomo\"><a href=\"#About-Lomo\" class=\"headerlink\" title=\"About Lomo\"></a>About Lomo</h2><h3 id=\"↔️座右铭↔️\"><a href=\"#↔️座右铭↔️\" class=\"headerlink\" title=\"↔️座右铭↔️\"></a>↔️座右铭↔️</h3><p>「你的水平决定了你遇见的人的水平」</p>\n<blockquote>\n<p>&nbsp;&nbsp;&nbsp;你自己都不够好，你凭什么要求你遇见的人怎样！</p>\n</blockquote>\n<p>「你现在的气质里，藏着你走过的路，读过的书和爱过的人」</p>\n<p>「真正牛逼的，不是那些可以随口拿来夸耀的事迹，而是那些在困境中依然保持微笑的凡人」</p>\n<div align=\"center\"><br>    <img width=\"450\" height=\"350\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/tomorrow.jpeg\"><br>    <br><br></div>\n\n<hr>\n<h3 id=\"📚书\"><a href=\"#📚书\" class=\"headerlink\" title=\"📚书\"></a>📚书</h3><p>读书，小则各国小说，《Zero To One》、《灿烂千阳》、《一个人的朝圣》、《小王子》、《巴别塔之犬》、《我以为你死了》、《我在雨中等你》、《偷影子的人》、《乔布斯管理日志》、《乔布斯内部信件》，《明朝那些事儿》、《蹉跎坡旧事》、《匆匆那年》、《站在两个世界的边缘》、《他们最幸福》、《平凡的世界》、《没有梦想 何必远方》；大则国内外名著：《1984》[乔治奥威尔]、高尔基三部曲：《童年》、《在人间》、《我的大学》、《钢铁》、《简爱》、《巴黎圣母院》、《卡夫卡》。</p>\n<p>还有很多其它暂时未想起来名字的书，大概算一下，从小到大也没少看小说，没少看国内外名著，但是感觉就在那儿，你读或不读就是不一样！</p>\n<p>前年看程浩的《站在两个世界的边缘》时，感触很大，对生命，对生活，对这个世界很多看法都有些许改变。我们都是如此渺小以至于无法抵抗任何突如其来或天降之祸，而往往重要的不是这种突入起来或天降之祸的程度有多大，而是每个人面对这些艰难困苦时的心态和行动！</p>\n<p>浩仔在zhihu上说: “不是那些可以随口拿来夸耀的事迹，而是那些在困境中依然保持微笑的凡人”。不用肆意炫耀那些事情，一切皆如灰。</p>\n<h3 id=\"🎬电影\"><a href=\"#🎬电影\" class=\"headerlink\" title=\"🎬电影\"></a>🎬电影</h3><p>好评的、差评的都基本看过，国内的，国外的，两个硬盘基本塞满了外国影片。</p>\n<p>当然，美剧也是大爱，很多！权利的游戏 全季全部追完。</p>\n<h3 id=\"🎵音乐\"><a href=\"#🎵音乐\" class=\"headerlink\" title=\"🎵音乐\"></a>🎵音乐</h3><p>什么Jay、JJ、王力宏、Mayday、孙燕姿、梁静茹、beyond、小虎队、SHE…. 全都听了个遍，依旧那样。</p>\n<p>英文还是大爱ColdPlay，passenger的Let Her Go，起初的钢琴独奏，怒赞！</p>\n<h3 id=\"📅工作\"><a href=\"#📅工作\" class=\"headerlink\" title=\"📅工作\"></a>📅工作</h3><p>I am word In JDB Now ~_~</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>买房、买车、娶媳妇、财务自由    ~_~</p>\n<p>(我就不信，你们没有其中之一)</p>\n<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>最近的生活有点糟糕，需要好好调理调理</p>\n<h3 id=\"💻其它\"><a href=\"#💻其它\" class=\"headerlink\" title=\"💻其它\"></a>💻其它</h3><p>除了工作就是玩乐，学习。</p>\n<p>PHP开发、前端开发(H5+CSS3+JS)、Java、NodeJS，都可以搞起来，恩，主要就是这几门语言熟一些。</p>\n<p>未来想向AI、物联网方向走，有机会要去探探路，求带！！！</p>\n<p><br></p>\n<hr>\n<blockquote>\n<p>长大后，踏上火车的那一刻还没有意识到，从此后，故乡只有冬，再无春夏秋.</p>\n</blockquote>\n<div align=\"center\"><br>    <img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/hometown.jpeg\"><br>    <br><br></div>\n\n","excerpt":"","more":"<h2 id=\"About-Lomo\"><a href=\"#About-Lomo\" class=\"headerlink\" title=\"About Lomo\"></a>About Lomo</h2><h3 id=\"↔️座右铭↔️\"><a href=\"#↔️座右铭↔️\" class=\"headerlink\" title=\"↔️座右铭↔️\"></a>↔️座右铭↔️</h3><p>「你的水平决定了你遇见的人的水平」</p>\n<blockquote>\n<p>&nbsp;&nbsp;&nbsp;你自己都不够好，你凭什么要求你遇见的人怎样！</p>\n</blockquote>\n<p>「你现在的气质里，藏着你走过的路，读过的书和爱过的人」</p>\n<p>「真正牛逼的，不是那些可以随口拿来夸耀的事迹，而是那些在困境中依然保持微笑的凡人」</p>\n<div align='center'><br>    <img width=\"450\" height=\"350\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/tomorrow.jpeg\" /><br>    <br><br></div>\n\n<hr>\n<h3 id=\"📚书\"><a href=\"#📚书\" class=\"headerlink\" title=\"📚书\"></a>📚书</h3><p>读书，小则各国小说，《Zero To One》、《灿烂千阳》、《一个人的朝圣》、《小王子》、《巴别塔之犬》、《我以为你死了》、《我在雨中等你》、《偷影子的人》、《乔布斯管理日志》、《乔布斯内部信件》，《明朝那些事儿》、《蹉跎坡旧事》、《匆匆那年》、《站在两个世界的边缘》、《他们最幸福》、《平凡的世界》、《没有梦想 何必远方》；大则国内外名著：《1984》[乔治奥威尔]、高尔基三部曲：《童年》、《在人间》、《我的大学》、《钢铁》、《简爱》、《巴黎圣母院》、《卡夫卡》。</p>\n<p>还有很多其它暂时未想起来名字的书，大概算一下，从小到大也没少看小说，没少看国内外名著，但是感觉就在那儿，你读或不读就是不一样！</p>\n<p>前年看程浩的《站在两个世界的边缘》时，感触很大，对生命，对生活，对这个世界很多看法都有些许改变。我们都是如此渺小以至于无法抵抗任何突如其来或天降之祸，而往往重要的不是这种突入起来或天降之祸的程度有多大，而是每个人面对这些艰难困苦时的心态和行动！</p>\n<p>浩仔在zhihu上说: “不是那些可以随口拿来夸耀的事迹，而是那些在困境中依然保持微笑的凡人”。不用肆意炫耀那些事情，一切皆如灰。</p>\n<h3 id=\"🎬电影\"><a href=\"#🎬电影\" class=\"headerlink\" title=\"🎬电影\"></a>🎬电影</h3><p>好评的、差评的都基本看过，国内的，国外的，两个硬盘基本塞满了外国影片。</p>\n<p>当然，美剧也是大爱，很多！权利的游戏 全季全部追完。</p>\n<h3 id=\"🎵音乐\"><a href=\"#🎵音乐\" class=\"headerlink\" title=\"🎵音乐\"></a>🎵音乐</h3><p>什么Jay、JJ、王力宏、Mayday、孙燕姿、梁静茹、beyond、小虎队、SHE…. 全都听了个遍，依旧那样。</p>\n<p>英文还是大爱ColdPlay，passenger的Let Her Go，起初的钢琴独奏，怒赞！</p>\n<h3 id=\"📅工作\"><a href=\"#📅工作\" class=\"headerlink\" title=\"📅工作\"></a>📅工作</h3><p>I am word In JDB Now ~_~</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>买房、买车、娶媳妇、财务自由    ~_~</p>\n<p>(我就不信，你们没有其中之一)</p>\n<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>最近的生活有点糟糕，需要好好调理调理</p>\n<h3 id=\"💻其它\"><a href=\"#💻其它\" class=\"headerlink\" title=\"💻其它\"></a>💻其它</h3><p>除了工作就是玩乐，学习。</p>\n<p>PHP开发、前端开发(H5+CSS3+JS)、Java、NodeJS，都可以搞起来，恩，主要就是这几门语言熟一些。</p>\n<p>未来想向AI、物联网方向走，有机会要去探探路，求带！！！</p>\n<p><br></p>\n<hr>\n<blockquote>\n<p>长大后，踏上火车的那一刻还没有意识到，从此后，故乡只有冬，再无春夏秋.</p>\n</blockquote>\n<div align=\"center\"><br>    <img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/hometown.jpeg\" /><br>    <br><br></div>\n\n"},{"layout":"categories","title":"categories","_content":"","source":"categories/index.md","raw":"layout: categories\ntitle: categories\n---","date":"2017-03-15T08:03:23.000Z","updated":"2017-02-24T13:28:31.000Z","path":"categories/index.html","comments":1,"_id":"cj0ax9fmb0005eyqm791j5nfc","content":"","excerpt":"","more":""},{"layout":"tags","title":"tags","_content":"","source":"tags/index.md","raw":"layout: tags\ntitle: tags\n---","date":"2017-03-15T08:03:23.000Z","updated":"2017-02-24T13:28:31.000Z","path":"tags/index.html","comments":1,"_id":"cj0ax9fn10009eyqm14v9oo2b","content":"","excerpt":"","more":""},{"title":"Essay -- 随笔2","_content":"\n## Sample 123\n### Sample","source":"categories/essay/2017-02-23-suibi2.md","raw":"---\ntitle: Essay -- 随笔2\n---\n\n## Sample 123\n### Sample","date":"2017-03-15T08:03:23.000Z","updated":"2017-02-24T13:28:31.000Z","path":"categories/essay/2017-02-23-suibi2.html","comments":1,"layout":"page","_id":"cj0ax9frw003qeyqm15qnnpym","content":"<h2 id=\"Sample-123\"><a href=\"#Sample-123\" class=\"headerlink\" title=\"Sample 123\"></a>Sample 123</h2><h3 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h3>","excerpt":"","more":"<h2 id=\"Sample-123\"><a href=\"#Sample-123\" class=\"headerlink\" title=\"Sample 123\"></a>Sample 123</h2><h3 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h3>"},{"title":"Essay -- 随笔","_content":"\n## Sample 22\n### Sample","source":"categories/essay/index.md","raw":"---\ntitle: Essay -- 随笔\n---\n\n## Sample 22\n### Sample","date":"2017-03-15T08:03:23.000Z","updated":"2017-02-24T13:28:31.000Z","path":"categories/essay/index.html","comments":1,"layout":"page","_id":"cj0ax9fry003reyqmhdgeinr0","content":"<h2 id=\"Sample-22\"><a href=\"#Sample-22\" class=\"headerlink\" title=\"Sample 22\"></a>Sample 22</h2><h3 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h3>","excerpt":"","more":"<h2 id=\"Sample-22\"><a href=\"#Sample-22\" class=\"headerlink\" title=\"Sample 22\"></a>Sample 22</h2><h3 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h3>"}],"Post":[{"title":"Java Class and Object","date":"2016-11-11T14:25:18.000Z","description":"Java类与对象, 类对象初始化顺序, TestNG原理","_content":"\n##  Java类和对象[学习笔记]\n\n### 简介\n\n类：是抽象的；\n\n&emsp;&emsp; 将对象的属性和方法封装在一起就组成了类这么个东西\n\n对象：是具体的；\n\n> 在面向对象编程中，主要思想：一切皆为对象！以对象为单位进行coding\n\n### 提出问题：\n\n>为什么Java中的main函数必须是static静态的？\n>为什么main方法中必须带有参数而且是不定参数String[] value形式？\n\n这是自己学习以来经常会在脑海里出现的问题，现在进行系统学习后，简单进行总结，答案在最后。\n\n### 类的创建和初始化\n\n#### 创建\n\n```Java\nclass 类名 {\n\n    //构造函数\n    public 类名() {\n        //do sth...\n    }\n}\n```\n\n> 默认地，如果一个类没有显式地申明构造函数，则在编译执行过程中会自动创建一个构造函数!\n\n> 而构造方法是一个类被初始化过程中必须执行的方法！！\n\n\n##### 类的创建规则：\n> 一个.java文件中可以有多个类，但是 **至多** 只能有一个public类 一般情况，该类里放置main方法，作为程序入口!\n\n> 可以有0个public的类, 那么.java文件的名可以与其中任何一个类名字相同即可\n\n> 如果有public类，则.java文件名字必须与该public类名相同！！！\n\n关于编译:\n\n> 编译时，会为每个.java文件创建一个对应的.class文件\n\n\n\n#### 初始化\n\n> 一般，通过类的构造器来创建对象, 构造器即：构造函数，是一个与类同名的方法；在new时对其传递一些参数完成初始化.\n\n```java\n类名  变量名 =  new 类名(\"参数\");\n```\n\n> E.g.\n```Java\npublic class classTest {\n\n    String name;\n    int age;\n    double height;\n    double weight;\n    String interest;\n    boolean sex;\n\n    public classTest(String name, int age, double height, double weight, String interest, boolean sex) {\n        this.name = name;\n        this.age = age;\n        this.height = height;\n        this.weight = weight;\n        this.interest = interest;\n        this.sex = sex;\n        //还有其它很多公有属性\n    }\n\n    public static void main(String[] args) {\n        classTest test = new classTest(\"Lomo\", 25, 165.00, 110.0, \"read\", true);\n        String  male;\n        if(test.sex) {\n            male = \"男\";\n        }else {\n            male = \"女\";\n        }\n\n        System.out.print(\"Name: \" + test.name + \"，Age: \" + test.age + \"，Height: \" + test.height + \"，Weight: \"+ test.weight + \"，Interest\" + test.interest + \"，Sex: \" + male);\n    }\n\n}\n// 运行输出: Name: Lomo，Age: 25，Height: 165.0，Weight: 110.0，Interestread，Sex: 男\n```\n\n> 【总结】 初始化/实例化一个类 这个new 的过程:\n\n> 编译器会首先检查类中是否有显式地申明构造函数，若有，则new的时候会直接调用该定义的构造器/构造函数;  若没有显式地申明构造函数，则编译器会自动为该类增加一个无参数的空构造方法：类名(){};\n\n#### 构造方法和变量的初始化顺序: \n\n> 类在被初始化new的过程中, 构造方法和变量的初始化顺序?\n\n结论：\n\n> 无论类中的(类)变量申明在方法/构造方法前面或者后面，变量都会优先于一般方法/构造方法 执行！！！\n\n> 无论类变量在类中相对于方法的位置是在方法前或后，只要在方法的外部，就一定会先初始化变量！！！\n\nE.g.1\n\n`Person.java`\n\n```Java\npublic class Person {\n\n    public String t = \"lomo\";\n\n    //构造器/构造函数\n    public Person(int id) {\n        System.out.println(\"Person: \" + id);\n    }\n\n    public static void main(String[] args) {\n        Build b = new Build();\n    }\n}\n\nclass Build{\n\n    Person p1 = new Person(1);\n\n    public Build() {\n        System.out.println(\"这是Build类的构造函数！\");\n        Person p2 = new Person(2);\n    }\n\n    Person p3 = new Person(3);\n}\n\n// 输出：\n        // Person: 1\n        // Person: 3\n        // 这是Build类的构造函数！\n        // Person: 2\n```\n\n> **分析** \n> 运行时，找到main方法，从main方法作为入口开始执行程序，在main方法中new了一个Build类对象b, 再看Build类, Build类中有两个变量p1, p3 和 一个Build类的显式声明的无参数的构造函数, 根据开头的结论：类变量初始化优先于构造函数初始化, 所以在main函数中new一个Build类实例时，会先初始化Build类的类变量p1, p3， 所以依次输出 `Person: 1`, `Person: 3`, 然后执行构造器的初始化, 打印了构造方法Build的结果 `这是Build类的构造函数！`, Build构造函数中第二行语句又new了一个Person类的实例，所以此时又按照刚才所述，同理先初始化类变量，此时Person类中无类变量，所以根据给new时给传入的参数2 执行Person类的构造方法，输出`Person: 2`.\n\n> 分析完毕!!!\n\n\n> 【实际使用】过程中，构造函数：通常 构造函数是为了在new创建类实例(对象)时就可以直接获取该类的一些属性.\n\n##### static与非static区别\n\n首先，对E.g.1改造：\n\n```Java\npublic class Person {\n\n    //构造器、构造函数\n    public Person(int id) {\n        System.out.println(\"Person: \" + id);\n        //Lomo lomo = new Lomo(\"LOMO\");\n    }\n\n    /**\n     * static 静态代码块\n     */\n    static {\n        System.out.println(\"这是static静态代码块！\");\n    }\n\n    /**\n     * 非静态块\n     */\n    {\n        System.out.println(\"这是非静态代码块！\");\n    }\n    // 主函数、程序执行入口\n    public static void main(String[] args) {\n        Build b = new Build();\n    }\n}\n\nclass Build {\n\n    Person p1 = new Person(1);\n\n    public Build() {\n        System.out.println(\"这是Build类！\");\n        Person p2 = new Person(2);\n    }\n\n    Person p3 = new Person(3);\n}\n\n// 运行，输出：\n//这是Person类中的static静态代码块！\n\n\n//这是Person类中的非静态代码块！\n//Person: 1\n\n//这是Person类中的非静态代码块！\n//Person: 3\n\n//这是Build类！\n\n//这是Person类中的非静态代码块！\n//Person: 2\n\n```\n> **分析**\n\n> Tips: 类中的static静态代码块或静态变量、静态方法，在初始化该类时，无论new多少，都只初始化一次然后保存在内存中，供使用！！！\n\n> 从main函数入口开始执行程序代码，被static修饰的变量或方法也属于e.g.1中分析所述的类变量、类方法(且 **只被初始化一次**)，所以在main函数开始执行时，Person类对应的.class已被装载完毕，等待main函数去执行，Java解释器会提前装载好main函数所在的Person类，而Person类中static声明的代码块就被初始化/执行, 打印出`这是Person类中的static静态代码块！`, 接着执行非静态代码块； 然后执行Build类对象b的初始化, 按照之前所述的原则, 初始化对象b时，调用的是Build类，所以要先对Build类的类变量p1初始化，执行new Person(1); new Person操作又是对Person类初始化，该初始化需要先执行Person类中的非静态代码块，所以先输出 `这是Person类中的非静态代码块！`, Person类中此时无其它类变量、类方法，所以就会执行Person的构造方法输出`Person: 1`, 此时可以理解为：主函数main方法中的第一部分执行完毕，即：` Person p1 = new Person(1);` , 按照之前所述规则，继续执行类变量p3初始化, 同上, 一次输出`这是Person类中的非静态代码块！` 和 `Person: 3`, 此时相当于主函数的第二部分执行完毕; 到此 Build类中的类变量全部初始化完毕; 第三部分: 执行Build类的构造函数, 顺序执行输出 `这是Build类！`, `Person p2 = new Person(2);` 再按照之前的规则, 一次输出: `这是Person类中的非静态代码块！`, `Person: 2`。\n\n> 分析完毕！！！\n\n> 【总结】\n\n> 被声明为static的变量或者方法，或者前面说的块，都属于类变量、类方法.\n\n> static 静态数据特点(static变量、方法)：初始化只在类的装载过程中只执行一次！！！\n整个过程中只进行一次初始化，在内存中只开辟一个空间，不论在哪儿调用，值保持一致。一旦被修改，所有引用它的地方都会跟着修改。 一般直接通过类名进行调用。\n\n> 类变量、类里的方法，外部对象对他们的引用还可以直接使用类名.变量名或类名.方法名 进行引用(在一个类中引用另一个类的变量,则该变量在另一个类中必须定义为private类型, 且范围不能是private修饰的).\n\n> 非静态块： 每new实例化一个对象时，就会执行一次非静态对象！！！\n\n\n对E.g.2 添加一行代码，在main函数中\n\nE.g.3\n\n```Java\nBuild b = new Build();\nSystem.out.println(\"第二次new Build 类!\"); //为了区分便于查看输出结果\nBuild b2 = new Build();  //见下边的总结6）\u0003\n\n//输出结果:\n\n//这是Person类中的static静态代码块！\n\n//这是Person类中的非静态代码块！\n//Person: 1\n//这是Person类中的非静态代码块！\n//Person: 3\n//这是Build类！\n//这是Person类中的非静态代码块！\n//Person: 2\n\n// 第二次new Build 类!\n\n//这是Person类中的static静态代码块！\n\n//这是Person类中的非静态代码块！\n//Person: 1\n//这是Person类中的非静态代码块！\n//Person: 3\n//这是Build类！\n//这是Person类中的非静态代码块！\n//Person: 2\n\n```\n\n\n#### 对象创建(new)过程总结\n\n> 1) 装载.class文件，创建class对象，对由static声明的变量、方法进行初始化 且 只初始化一次！\n\n> 2) new实例化时，在堆内存进行空间分配\n\n> 3) 执行非静态块\n\n> 4) 执行 所有方法外定义的(类)变量的初始化\n\n> 5) 执行构造器/构造函数(方法)  [ 基本可以认为 构造函数是   一个类new过程中最后执行的 ]\n\n> 6) 针对同一个类，同时new多个该类的对象实例，则每次new的过程都遵循、并按顺序执行 上述原则\n\n\n\n#### 问题1、2 答案\n\n##### Q1\n\n> Java中main函数为何必须是static修饰符？\n\n\n针对上述static分析、总结，现在来解释 开头的问题1：\n\n> Java中main函数为何必须是static修饰符？\n\n个人 + 网上各类博客文章 总结：\n\n> \tmain方法是Java解释器调用，那时候还未产生任何对象，程序入口，必须提前加载好；\n\tstatic修饰的类属性可以直接使用，而无需new一个实例化对象来去调用；\n\t[可以没有main方法而去执行Java代码]\n\n\n##### Q2\n\n> Java中main函数为何必须使用String[] args形式的不定参数(数组作为参数)？\n\nA: \n\n&emsp;&emsp;正确解释: 按照Java规定入口函数必须这样写，就这么记！！而且参数必须为String类实例化的数组.\n\n刚开始，查阅网上一些资料解释如下（不正确）:\n&emsp;&emsp; main方法里面的args的参数原来是接收的java运行参数。\n\n***证明***:\n\n```Java\npublic class Main {\n\n    public static void main(String[] args) {\n        for (String str : args) {\n            System.out.println(str);\n        }\n    }\n}\n//直接在IDE中编译运行，无任何输出\n\n```\n> 进入终端 使用javac 进行编译\n\n```bash\nlomo@LomodeMacBook-Pro:~/javaStudy/src/javaClassExercise % javac Main.java\n# 编译完成生成一下Main.class文件.\njava Main(1);\njava Main(\"\");\n## 均无法运行\n```\n\n关于Java main函数解析还可参考博文:\n\n    http://www.cnblogs.com/xwdreamer/archive/2012/04/09/2438845.html\n\n#### 附:无main函数运行Java代码\n\n ***问题：***\n> Java程序中, 无main函数作为入口函数, 程序是如何运行的呢？\n\nA:\n\n> 利用Junit或TestNG 测试框架，以@Test注解在测试方法上的形式 实现无main函数也可以运行Java代码.\n\n> 参考： http://www.ibm.com/developerworks/cn/java/j-cq08296/\n\n\n创建Maven工程：\n\n`pom.xml`添加依赖：\n\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.testng</groupId>\n            <artifactId>testng</artifactId>\n            <version>6.8.21</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n        </dependency>\n    </dependencies>\n```\n\nE.g. \n\n```Java\nimport org.testng.annotations.Test;\n\n/**\n * Created by lomo\n */\npublic class noMainMethod {\n\n    static {\n        System.out.println(\"我是测试无main函数类中的第一个静态代码块\");\n//        System.exit(0);\n    }\n\n    @Test(description = \"第一个\", testName = \"T1\")\n    public void test() throws Exception {\n        System.out.println(\"123chendong\");\n    }\n\n    @Test(description = \"第二个测试例子\", testName = \"T2\")\n    public void test2() throws Exception {\n        System.out.println(\"test 2\");\n    }\n\n}\n\n```\n\n光标移动至test 或test2 上右键运行即可成功执行并输出对应结果:\n\n```bin\n我是测试无main函数类中的第一个静态代码块\n[TestNG] Running: \n123Lomo\n===============================================\nDefault Suite\nTotal tests run: 1, Failures: 0, Skips: 0\n===============================================\n```\n\n\n或直接移动光标至类noMainMethod上运行，执行里面的2条Test并输出结果:\n\n```bin\n我是测试无main函数类中的第一个静态代码块\n[TestNG] Running:  \n123Lomo\ntest 2\n===============================================\nDefault Suite\nTotal tests run: 2, Failures: 0, Skips: 0\n===============================================\n```\n\n##### TestNG运行原理?\n\n> 思考🤔: TestNG如何实现Java无main函数运行代码的? \n\n首先简单从`@Test` 作为入口，找到TestNG的`annotations`, 或者从测试方法的import包里找到TestNG的annotations包: `import org.testng.annotations`\n\n可以看到org.testng包里除了annotations包外还有其它包: 断言asserts、log、junit、log4testng、xml...等等的包.\n\n进入annotations包，发现很多编译好的 `.class` 文件，找到其中之一`Test.class`, 双击进入\n\n```Java\npackage org.testng.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR})\npublic @interface Test {\n    String[] groups() default {};\n\n    boolean enabled() default true;\n\n    /** @deprecated */\n    @Deprecated\n    String[] parameters() default {};\n\n    String[] dependsOnGroups() default {};\n\n    String[] dependsOnMethods() default {};\n\n    long timeOut() default 0L;\n\n    long invocationTimeOut() default 0L;\n\n    int invocationCount() default 1;\n\n    int threadPoolSize() default 0;\n\n    int successPercentage() default 100;\n\n    String dataProvider() default \"\";\n\n    Class<?> dataProviderClass() default Object.class;\n\n    boolean alwaysRun() default false;\n\n    String description() default \"\";\n\n    Class[] expectedExceptions() default {};\n\n    String expectedExceptionsMessageRegExp() default \".*\";\n\n    String suiteName() default \"\";\n\n    String testName() default \"\";\n\n    /** @deprecated */\n    boolean sequential() default false;\n\n    boolean singleThreaded() default false;\n\n    Class retryAnalyzer() default Class.class;\n\n    boolean skipFailedInvocations() default false;\n\n    boolean ignoreMissingDependencies() default false;\n\n    int priority() default 0;\n}\n```\n\n> **分析**\n\n> 先粗糙地分析下，***待学完Java注解Anonation、反射等之后再深入总结下***.\n\n> 根据其import的包是 `java.lang.annotation`, 就可以断言，TestNG的 @Test模式肯定也是基于Java的注解模式来实现无main函数运行的.\n\n> 接着简单说说Test方法前3行代码:\n\n```Java\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR})\npublic @interface Test\n```\n\n> 1)Retention， 保留， 表示在什么级别保留此信息\n\n`SOURCE:源码注解，注解仅存在代码中，注解会被编译器丢弃`\n\n`CLASS:编译时注解，注解会在class文件中保留，但会被JVM丢弃`\n\n`RUNTIME:运行时注解，VM运行期间也会保留该注解，因此**可以通过反射来获得该注解**`\n\n> 2)Target，表示作用域，可能的ElementType参数包括：\n\n`CONSTRUCTOR:构造方法声明`\n\n`FIELD:字段声明`\n\n`LOCAL_VARIABLE:局部变量声明`\n\n`METHOD:方法声明`\n\n`PACKAGE:包声明`\n\n`PARAMETER:参数声明`\n\n`TYPE:类，接口或enum声明`\n\n\n> Test接口中，提供了很多 `@Test` 注解使用的属性，`@Test`标记一个类或方法作为测试的一部分。关于Test接口的详细属性列表参考：\n\n> http://testng.org/doc/documentation-main.html#annotations\n\n**小结**: TestNG 实现无main函数执行，是基于Java的注解，深究后续继续学习记录笔记.\n\nDone!","source":"_posts/Java-Class-and-Object.md","raw":"---\ntitle: Java Class and Object\ndate: 2016-11-11 22:25:18\ntags: [java]\ncategories: study\ndescription: Java类与对象, 类对象初始化顺序, TestNG原理\n---\n\n##  Java类和对象[学习笔记]\n\n### 简介\n\n类：是抽象的；\n\n&emsp;&emsp; 将对象的属性和方法封装在一起就组成了类这么个东西\n\n对象：是具体的；\n\n> 在面向对象编程中，主要思想：一切皆为对象！以对象为单位进行coding\n\n### 提出问题：\n\n>为什么Java中的main函数必须是static静态的？\n>为什么main方法中必须带有参数而且是不定参数String[] value形式？\n\n这是自己学习以来经常会在脑海里出现的问题，现在进行系统学习后，简单进行总结，答案在最后。\n\n### 类的创建和初始化\n\n#### 创建\n\n```Java\nclass 类名 {\n\n    //构造函数\n    public 类名() {\n        //do sth...\n    }\n}\n```\n\n> 默认地，如果一个类没有显式地申明构造函数，则在编译执行过程中会自动创建一个构造函数!\n\n> 而构造方法是一个类被初始化过程中必须执行的方法！！\n\n\n##### 类的创建规则：\n> 一个.java文件中可以有多个类，但是 **至多** 只能有一个public类 一般情况，该类里放置main方法，作为程序入口!\n\n> 可以有0个public的类, 那么.java文件的名可以与其中任何一个类名字相同即可\n\n> 如果有public类，则.java文件名字必须与该public类名相同！！！\n\n关于编译:\n\n> 编译时，会为每个.java文件创建一个对应的.class文件\n\n\n\n#### 初始化\n\n> 一般，通过类的构造器来创建对象, 构造器即：构造函数，是一个与类同名的方法；在new时对其传递一些参数完成初始化.\n\n```java\n类名  变量名 =  new 类名(\"参数\");\n```\n\n> E.g.\n```Java\npublic class classTest {\n\n    String name;\n    int age;\n    double height;\n    double weight;\n    String interest;\n    boolean sex;\n\n    public classTest(String name, int age, double height, double weight, String interest, boolean sex) {\n        this.name = name;\n        this.age = age;\n        this.height = height;\n        this.weight = weight;\n        this.interest = interest;\n        this.sex = sex;\n        //还有其它很多公有属性\n    }\n\n    public static void main(String[] args) {\n        classTest test = new classTest(\"Lomo\", 25, 165.00, 110.0, \"read\", true);\n        String  male;\n        if(test.sex) {\n            male = \"男\";\n        }else {\n            male = \"女\";\n        }\n\n        System.out.print(\"Name: \" + test.name + \"，Age: \" + test.age + \"，Height: \" + test.height + \"，Weight: \"+ test.weight + \"，Interest\" + test.interest + \"，Sex: \" + male);\n    }\n\n}\n// 运行输出: Name: Lomo，Age: 25，Height: 165.0，Weight: 110.0，Interestread，Sex: 男\n```\n\n> 【总结】 初始化/实例化一个类 这个new 的过程:\n\n> 编译器会首先检查类中是否有显式地申明构造函数，若有，则new的时候会直接调用该定义的构造器/构造函数;  若没有显式地申明构造函数，则编译器会自动为该类增加一个无参数的空构造方法：类名(){};\n\n#### 构造方法和变量的初始化顺序: \n\n> 类在被初始化new的过程中, 构造方法和变量的初始化顺序?\n\n结论：\n\n> 无论类中的(类)变量申明在方法/构造方法前面或者后面，变量都会优先于一般方法/构造方法 执行！！！\n\n> 无论类变量在类中相对于方法的位置是在方法前或后，只要在方法的外部，就一定会先初始化变量！！！\n\nE.g.1\n\n`Person.java`\n\n```Java\npublic class Person {\n\n    public String t = \"lomo\";\n\n    //构造器/构造函数\n    public Person(int id) {\n        System.out.println(\"Person: \" + id);\n    }\n\n    public static void main(String[] args) {\n        Build b = new Build();\n    }\n}\n\nclass Build{\n\n    Person p1 = new Person(1);\n\n    public Build() {\n        System.out.println(\"这是Build类的构造函数！\");\n        Person p2 = new Person(2);\n    }\n\n    Person p3 = new Person(3);\n}\n\n// 输出：\n        // Person: 1\n        // Person: 3\n        // 这是Build类的构造函数！\n        // Person: 2\n```\n\n> **分析** \n> 运行时，找到main方法，从main方法作为入口开始执行程序，在main方法中new了一个Build类对象b, 再看Build类, Build类中有两个变量p1, p3 和 一个Build类的显式声明的无参数的构造函数, 根据开头的结论：类变量初始化优先于构造函数初始化, 所以在main函数中new一个Build类实例时，会先初始化Build类的类变量p1, p3， 所以依次输出 `Person: 1`, `Person: 3`, 然后执行构造器的初始化, 打印了构造方法Build的结果 `这是Build类的构造函数！`, Build构造函数中第二行语句又new了一个Person类的实例，所以此时又按照刚才所述，同理先初始化类变量，此时Person类中无类变量，所以根据给new时给传入的参数2 执行Person类的构造方法，输出`Person: 2`.\n\n> 分析完毕!!!\n\n\n> 【实际使用】过程中，构造函数：通常 构造函数是为了在new创建类实例(对象)时就可以直接获取该类的一些属性.\n\n##### static与非static区别\n\n首先，对E.g.1改造：\n\n```Java\npublic class Person {\n\n    //构造器、构造函数\n    public Person(int id) {\n        System.out.println(\"Person: \" + id);\n        //Lomo lomo = new Lomo(\"LOMO\");\n    }\n\n    /**\n     * static 静态代码块\n     */\n    static {\n        System.out.println(\"这是static静态代码块！\");\n    }\n\n    /**\n     * 非静态块\n     */\n    {\n        System.out.println(\"这是非静态代码块！\");\n    }\n    // 主函数、程序执行入口\n    public static void main(String[] args) {\n        Build b = new Build();\n    }\n}\n\nclass Build {\n\n    Person p1 = new Person(1);\n\n    public Build() {\n        System.out.println(\"这是Build类！\");\n        Person p2 = new Person(2);\n    }\n\n    Person p3 = new Person(3);\n}\n\n// 运行，输出：\n//这是Person类中的static静态代码块！\n\n\n//这是Person类中的非静态代码块！\n//Person: 1\n\n//这是Person类中的非静态代码块！\n//Person: 3\n\n//这是Build类！\n\n//这是Person类中的非静态代码块！\n//Person: 2\n\n```\n> **分析**\n\n> Tips: 类中的static静态代码块或静态变量、静态方法，在初始化该类时，无论new多少，都只初始化一次然后保存在内存中，供使用！！！\n\n> 从main函数入口开始执行程序代码，被static修饰的变量或方法也属于e.g.1中分析所述的类变量、类方法(且 **只被初始化一次**)，所以在main函数开始执行时，Person类对应的.class已被装载完毕，等待main函数去执行，Java解释器会提前装载好main函数所在的Person类，而Person类中static声明的代码块就被初始化/执行, 打印出`这是Person类中的static静态代码块！`, 接着执行非静态代码块； 然后执行Build类对象b的初始化, 按照之前所述的原则, 初始化对象b时，调用的是Build类，所以要先对Build类的类变量p1初始化，执行new Person(1); new Person操作又是对Person类初始化，该初始化需要先执行Person类中的非静态代码块，所以先输出 `这是Person类中的非静态代码块！`, Person类中此时无其它类变量、类方法，所以就会执行Person的构造方法输出`Person: 1`, 此时可以理解为：主函数main方法中的第一部分执行完毕，即：` Person p1 = new Person(1);` , 按照之前所述规则，继续执行类变量p3初始化, 同上, 一次输出`这是Person类中的非静态代码块！` 和 `Person: 3`, 此时相当于主函数的第二部分执行完毕; 到此 Build类中的类变量全部初始化完毕; 第三部分: 执行Build类的构造函数, 顺序执行输出 `这是Build类！`, `Person p2 = new Person(2);` 再按照之前的规则, 一次输出: `这是Person类中的非静态代码块！`, `Person: 2`。\n\n> 分析完毕！！！\n\n> 【总结】\n\n> 被声明为static的变量或者方法，或者前面说的块，都属于类变量、类方法.\n\n> static 静态数据特点(static变量、方法)：初始化只在类的装载过程中只执行一次！！！\n整个过程中只进行一次初始化，在内存中只开辟一个空间，不论在哪儿调用，值保持一致。一旦被修改，所有引用它的地方都会跟着修改。 一般直接通过类名进行调用。\n\n> 类变量、类里的方法，外部对象对他们的引用还可以直接使用类名.变量名或类名.方法名 进行引用(在一个类中引用另一个类的变量,则该变量在另一个类中必须定义为private类型, 且范围不能是private修饰的).\n\n> 非静态块： 每new实例化一个对象时，就会执行一次非静态对象！！！\n\n\n对E.g.2 添加一行代码，在main函数中\n\nE.g.3\n\n```Java\nBuild b = new Build();\nSystem.out.println(\"第二次new Build 类!\"); //为了区分便于查看输出结果\nBuild b2 = new Build();  //见下边的总结6）\u0003\n\n//输出结果:\n\n//这是Person类中的static静态代码块！\n\n//这是Person类中的非静态代码块！\n//Person: 1\n//这是Person类中的非静态代码块！\n//Person: 3\n//这是Build类！\n//这是Person类中的非静态代码块！\n//Person: 2\n\n// 第二次new Build 类!\n\n//这是Person类中的static静态代码块！\n\n//这是Person类中的非静态代码块！\n//Person: 1\n//这是Person类中的非静态代码块！\n//Person: 3\n//这是Build类！\n//这是Person类中的非静态代码块！\n//Person: 2\n\n```\n\n\n#### 对象创建(new)过程总结\n\n> 1) 装载.class文件，创建class对象，对由static声明的变量、方法进行初始化 且 只初始化一次！\n\n> 2) new实例化时，在堆内存进行空间分配\n\n> 3) 执行非静态块\n\n> 4) 执行 所有方法外定义的(类)变量的初始化\n\n> 5) 执行构造器/构造函数(方法)  [ 基本可以认为 构造函数是   一个类new过程中最后执行的 ]\n\n> 6) 针对同一个类，同时new多个该类的对象实例，则每次new的过程都遵循、并按顺序执行 上述原则\n\n\n\n#### 问题1、2 答案\n\n##### Q1\n\n> Java中main函数为何必须是static修饰符？\n\n\n针对上述static分析、总结，现在来解释 开头的问题1：\n\n> Java中main函数为何必须是static修饰符？\n\n个人 + 网上各类博客文章 总结：\n\n> \tmain方法是Java解释器调用，那时候还未产生任何对象，程序入口，必须提前加载好；\n\tstatic修饰的类属性可以直接使用，而无需new一个实例化对象来去调用；\n\t[可以没有main方法而去执行Java代码]\n\n\n##### Q2\n\n> Java中main函数为何必须使用String[] args形式的不定参数(数组作为参数)？\n\nA: \n\n&emsp;&emsp;正确解释: 按照Java规定入口函数必须这样写，就这么记！！而且参数必须为String类实例化的数组.\n\n刚开始，查阅网上一些资料解释如下（不正确）:\n&emsp;&emsp; main方法里面的args的参数原来是接收的java运行参数。\n\n***证明***:\n\n```Java\npublic class Main {\n\n    public static void main(String[] args) {\n        for (String str : args) {\n            System.out.println(str);\n        }\n    }\n}\n//直接在IDE中编译运行，无任何输出\n\n```\n> 进入终端 使用javac 进行编译\n\n```bash\nlomo@LomodeMacBook-Pro:~/javaStudy/src/javaClassExercise % javac Main.java\n# 编译完成生成一下Main.class文件.\njava Main(1);\njava Main(\"\");\n## 均无法运行\n```\n\n关于Java main函数解析还可参考博文:\n\n    http://www.cnblogs.com/xwdreamer/archive/2012/04/09/2438845.html\n\n#### 附:无main函数运行Java代码\n\n ***问题：***\n> Java程序中, 无main函数作为入口函数, 程序是如何运行的呢？\n\nA:\n\n> 利用Junit或TestNG 测试框架，以@Test注解在测试方法上的形式 实现无main函数也可以运行Java代码.\n\n> 参考： http://www.ibm.com/developerworks/cn/java/j-cq08296/\n\n\n创建Maven工程：\n\n`pom.xml`添加依赖：\n\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.testng</groupId>\n            <artifactId>testng</artifactId>\n            <version>6.8.21</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n        </dependency>\n    </dependencies>\n```\n\nE.g. \n\n```Java\nimport org.testng.annotations.Test;\n\n/**\n * Created by lomo\n */\npublic class noMainMethod {\n\n    static {\n        System.out.println(\"我是测试无main函数类中的第一个静态代码块\");\n//        System.exit(0);\n    }\n\n    @Test(description = \"第一个\", testName = \"T1\")\n    public void test() throws Exception {\n        System.out.println(\"123chendong\");\n    }\n\n    @Test(description = \"第二个测试例子\", testName = \"T2\")\n    public void test2() throws Exception {\n        System.out.println(\"test 2\");\n    }\n\n}\n\n```\n\n光标移动至test 或test2 上右键运行即可成功执行并输出对应结果:\n\n```bin\n我是测试无main函数类中的第一个静态代码块\n[TestNG] Running: \n123Lomo\n===============================================\nDefault Suite\nTotal tests run: 1, Failures: 0, Skips: 0\n===============================================\n```\n\n\n或直接移动光标至类noMainMethod上运行，执行里面的2条Test并输出结果:\n\n```bin\n我是测试无main函数类中的第一个静态代码块\n[TestNG] Running:  \n123Lomo\ntest 2\n===============================================\nDefault Suite\nTotal tests run: 2, Failures: 0, Skips: 0\n===============================================\n```\n\n##### TestNG运行原理?\n\n> 思考🤔: TestNG如何实现Java无main函数运行代码的? \n\n首先简单从`@Test` 作为入口，找到TestNG的`annotations`, 或者从测试方法的import包里找到TestNG的annotations包: `import org.testng.annotations`\n\n可以看到org.testng包里除了annotations包外还有其它包: 断言asserts、log、junit、log4testng、xml...等等的包.\n\n进入annotations包，发现很多编译好的 `.class` 文件，找到其中之一`Test.class`, 双击进入\n\n```Java\npackage org.testng.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR})\npublic @interface Test {\n    String[] groups() default {};\n\n    boolean enabled() default true;\n\n    /** @deprecated */\n    @Deprecated\n    String[] parameters() default {};\n\n    String[] dependsOnGroups() default {};\n\n    String[] dependsOnMethods() default {};\n\n    long timeOut() default 0L;\n\n    long invocationTimeOut() default 0L;\n\n    int invocationCount() default 1;\n\n    int threadPoolSize() default 0;\n\n    int successPercentage() default 100;\n\n    String dataProvider() default \"\";\n\n    Class<?> dataProviderClass() default Object.class;\n\n    boolean alwaysRun() default false;\n\n    String description() default \"\";\n\n    Class[] expectedExceptions() default {};\n\n    String expectedExceptionsMessageRegExp() default \".*\";\n\n    String suiteName() default \"\";\n\n    String testName() default \"\";\n\n    /** @deprecated */\n    boolean sequential() default false;\n\n    boolean singleThreaded() default false;\n\n    Class retryAnalyzer() default Class.class;\n\n    boolean skipFailedInvocations() default false;\n\n    boolean ignoreMissingDependencies() default false;\n\n    int priority() default 0;\n}\n```\n\n> **分析**\n\n> 先粗糙地分析下，***待学完Java注解Anonation、反射等之后再深入总结下***.\n\n> 根据其import的包是 `java.lang.annotation`, 就可以断言，TestNG的 @Test模式肯定也是基于Java的注解模式来实现无main函数运行的.\n\n> 接着简单说说Test方法前3行代码:\n\n```Java\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR})\npublic @interface Test\n```\n\n> 1)Retention， 保留， 表示在什么级别保留此信息\n\n`SOURCE:源码注解，注解仅存在代码中，注解会被编译器丢弃`\n\n`CLASS:编译时注解，注解会在class文件中保留，但会被JVM丢弃`\n\n`RUNTIME:运行时注解，VM运行期间也会保留该注解，因此**可以通过反射来获得该注解**`\n\n> 2)Target，表示作用域，可能的ElementType参数包括：\n\n`CONSTRUCTOR:构造方法声明`\n\n`FIELD:字段声明`\n\n`LOCAL_VARIABLE:局部变量声明`\n\n`METHOD:方法声明`\n\n`PACKAGE:包声明`\n\n`PARAMETER:参数声明`\n\n`TYPE:类，接口或enum声明`\n\n\n> Test接口中，提供了很多 `@Test` 注解使用的属性，`@Test`标记一个类或方法作为测试的一部分。关于Test接口的详细属性列表参考：\n\n> http://testng.org/doc/documentation-main.html#annotations\n\n**小结**: TestNG 实现无main函数执行，是基于Java的注解，深究后续继续学习记录笔记.\n\nDone!","slug":"Java-Class-and-Object","published":1,"updated":"2017-03-12T03:40:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9flw0002eyqmhjtw54g8","content":"<h2 id=\"Java类和对象-学习笔记\"><a href=\"#Java类和对象-学习笔记\" class=\"headerlink\" title=\"Java类和对象[学习笔记]\"></a>Java类和对象[学习笔记]</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>类：是抽象的；</p>\n<p>&emsp;&emsp; 将对象的属性和方法封装在一起就组成了类这么个东西</p>\n<p>对象：是具体的；</p>\n<blockquote>\n<p>在面向对象编程中，主要思想：一切皆为对象！以对象为单位进行coding</p>\n</blockquote>\n<h3 id=\"提出问题：\"><a href=\"#提出问题：\" class=\"headerlink\" title=\"提出问题：\"></a>提出问题：</h3><blockquote>\n<p>为什么Java中的main函数必须是static静态的？<br>为什么main方法中必须带有参数而且是不定参数String[] value形式？</p>\n</blockquote>\n<p>这是自己学习以来经常会在脑海里出现的问题，现在进行系统学习后，简单进行总结，答案在最后。</p>\n<h3 id=\"类的创建和初始化\"><a href=\"#类的创建和初始化\" class=\"headerlink\" title=\"类的创建和初始化\"></a>类的创建和初始化</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"keyword\">public</span> 类名() &#123;</div><div class=\"line\">        <span class=\"comment\">//do sth...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>默认地，如果一个类没有显式地申明构造函数，则在编译执行过程中会自动创建一个构造函数!</p>\n<p>而构造方法是一个类被初始化过程中必须执行的方法！！</p>\n</blockquote>\n<h5 id=\"类的创建规则：\"><a href=\"#类的创建规则：\" class=\"headerlink\" title=\"类的创建规则：\"></a>类的创建规则：</h5><blockquote>\n<p>一个.java文件中可以有多个类，但是 <strong>至多</strong> 只能有一个public类 一般情况，该类里放置main方法，作为程序入口!</p>\n<p>可以有0个public的类, 那么.java文件的名可以与其中任何一个类名字相同即可</p>\n<p>如果有public类，则.java文件名字必须与该public类名相同！！！</p>\n</blockquote>\n<p>关于编译:</p>\n<blockquote>\n<p>编译时，会为每个.java文件创建一个对应的.class文件</p>\n</blockquote>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><blockquote>\n<p>一般，通过类的构造器来创建对象, 构造器即：构造函数，是一个与类同名的方法；在new时对其传递一些参数完成初始化.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类名  变量名 =  <span class=\"keyword\">new</span> 类名(<span class=\"string\">\"参数\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>E.g.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">classTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    String name;</div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">double</span> height;</div><div class=\"line\">    <span class=\"keyword\">double</span> weight;</div><div class=\"line\">    String interest;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> sex;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">classTest</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">double</span> height, <span class=\"keyword\">double</span> weight, String interest, <span class=\"keyword\">boolean</span> sex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">        <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">        <span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">        <span class=\"keyword\">this</span>.interest = interest;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</div><div class=\"line\">        <span class=\"comment\">//还有其它很多公有属性</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        classTest test = <span class=\"keyword\">new</span> classTest(<span class=\"string\">\"Lomo\"</span>, <span class=\"number\">25</span>, <span class=\"number\">165.00</span>, <span class=\"number\">110.0</span>, <span class=\"string\">\"read\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">        String  male;</div><div class=\"line\">        <span class=\"keyword\">if</span>(test.sex) &#123;</div><div class=\"line\">            male = <span class=\"string\">\"男\"</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            male = <span class=\"string\">\"女\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.print(<span class=\"string\">\"Name: \"</span> + test.name + <span class=\"string\">\"，Age: \"</span> + test.age + <span class=\"string\">\"，Height: \"</span> + test.height + <span class=\"string\">\"，Weight: \"</span>+ test.weight + <span class=\"string\">\"，Interest\"</span> + test.interest + <span class=\"string\">\"，Sex: \"</span> + male);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 运行输出: Name: Lomo，Age: 25，Height: 165.0，Weight: 110.0，Interestread，Sex: 男</span></div></pre></td></tr></table></figure></p>\n<p>【总结】 初始化/实例化一个类 这个new 的过程:</p>\n<p>编译器会首先检查类中是否有显式地申明构造函数，若有，则new的时候会直接调用该定义的构造器/构造函数;  若没有显式地申明构造函数，则编译器会自动为该类增加一个无参数的空构造方法：类名(){};</p>\n</blockquote>\n<h4 id=\"构造方法和变量的初始化顺序\"><a href=\"#构造方法和变量的初始化顺序\" class=\"headerlink\" title=\"构造方法和变量的初始化顺序:\"></a>构造方法和变量的初始化顺序:</h4><blockquote>\n<p>类在被初始化new的过程中, 构造方法和变量的初始化顺序?</p>\n</blockquote>\n<p>结论：</p>\n<blockquote>\n<p>无论类中的(类)变量申明在方法/构造方法前面或者后面，变量都会优先于一般方法/构造方法 执行！！！</p>\n<p>无论类变量在类中相对于方法的位置是在方法前或后，只要在方法的外部，就一定会先初始化变量！！！</p>\n</blockquote>\n<p>E.g.1</p>\n<p><code>Person.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String t = <span class=\"string\">\"lomo\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造器/构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Person: \"</span> + id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Build b = <span class=\"keyword\">new</span> Build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"这是Build类的构造函数！\"</span>);</div><div class=\"line\">        Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Person p3 = <span class=\"keyword\">new</span> Person(<span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出：</span></div><div class=\"line\">        <span class=\"comment\">// Person: 1</span></div><div class=\"line\">        <span class=\"comment\">// Person: 3</span></div><div class=\"line\">        <span class=\"comment\">// 这是Build类的构造函数！</span></div><div class=\"line\">        <span class=\"comment\">// Person: 2</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>分析</strong><br>运行时，找到main方法，从main方法作为入口开始执行程序，在main方法中new了一个Build类对象b, 再看Build类, Build类中有两个变量p1, p3 和 一个Build类的显式声明的无参数的构造函数, 根据开头的结论：类变量初始化优先于构造函数初始化, 所以在main函数中new一个Build类实例时，会先初始化Build类的类变量p1, p3， 所以依次输出 <code>Person: 1</code>, <code>Person: 3</code>, 然后执行构造器的初始化, 打印了构造方法Build的结果 <code>这是Build类的构造函数！</code>, Build构造函数中第二行语句又new了一个Person类的实例，所以此时又按照刚才所述，同理先初始化类变量，此时Person类中无类变量，所以根据给new时给传入的参数2 执行Person类的构造方法，输出<code>Person: 2</code>.</p>\n<p>分析完毕!!!</p>\n<p>【实际使用】过程中，构造函数：通常 构造函数是为了在new创建类实例(对象)时就可以直接获取该类的一些属性.</p>\n</blockquote>\n<h5 id=\"static与非static区别\"><a href=\"#static与非static区别\" class=\"headerlink\" title=\"static与非static区别\"></a>static与非static区别</h5><p>首先，对E.g.1改造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造器、构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Person: \"</span> + id);</div><div class=\"line\">        <span class=\"comment\">//Lomo lomo = new Lomo(\"LOMO\");</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * static 静态代码块</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"这是static静态代码块！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 非静态块</div><div class=\"line\">     */</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"这是非静态代码块！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 主函数、程序执行入口</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Build b = <span class=\"keyword\">new</span> Build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"这是Build类！\"</span>);</div><div class=\"line\">        Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Person p3 = <span class=\"keyword\">new</span> Person(<span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 运行，输出：</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的static静态代码块！</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Build类！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 2</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>分析</strong></p>\n<p>Tips: 类中的static静态代码块或静态变量、静态方法，在初始化该类时，无论new多少，都只初始化一次然后保存在内存中，供使用！！！</p>\n<p>从main函数入口开始执行程序代码，被static修饰的变量或方法也属于e.g.1中分析所述的类变量、类方法(且 <strong>只被初始化一次</strong>)，所以在main函数开始执行时，Person类对应的.class已被装载完毕，等待main函数去执行，Java解释器会提前装载好main函数所在的Person类，而Person类中static声明的代码块就被初始化/执行, 打印出<code>这是Person类中的static静态代码块！</code>, 接着执行非静态代码块； 然后执行Build类对象b的初始化, 按照之前所述的原则, 初始化对象b时，调用的是Build类，所以要先对Build类的类变量p1初始化，执行new Person(1); new Person操作又是对Person类初始化，该初始化需要先执行Person类中的非静态代码块，所以先输出 <code>这是Person类中的非静态代码块！</code>, Person类中此时无其它类变量、类方法，所以就会执行Person的构造方法输出<code>Person: 1</code>, 此时可以理解为：主函数main方法中的第一部分执行完毕，即：<code>Person p1 = new Person(1);</code> , 按照之前所述规则，继续执行类变量p3初始化, 同上, 一次输出<code>这是Person类中的非静态代码块！</code> 和 <code>Person: 3</code>, 此时相当于主函数的第二部分执行完毕; 到此 Build类中的类变量全部初始化完毕; 第三部分: 执行Build类的构造函数, 顺序执行输出 <code>这是Build类！</code>, <code>Person p2 = new Person(2);</code> 再按照之前的规则, 一次输出: <code>这是Person类中的非静态代码块！</code>, <code>Person: 2</code>。</p>\n<p>分析完毕！！！</p>\n<p>【总结】</p>\n<p>被声明为static的变量或者方法，或者前面说的块，都属于类变量、类方法.</p>\n<p>static 静态数据特点(static变量、方法)：初始化只在类的装载过程中只执行一次！！！<br>整个过程中只进行一次初始化，在内存中只开辟一个空间，不论在哪儿调用，值保持一致。一旦被修改，所有引用它的地方都会跟着修改。 一般直接通过类名进行调用。</p>\n<p>类变量、类里的方法，外部对象对他们的引用还可以直接使用类名.变量名或类名.方法名 进行引用(在一个类中引用另一个类的变量,则该变量在另一个类中必须定义为private类型, 且范围不能是private修饰的).</p>\n<p>非静态块： 每new实例化一个对象时，就会执行一次非静态对象！！！</p>\n</blockquote>\n<p>对E.g.2 添加一行代码，在main函数中</p>\n<p>E.g.3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Build b = <span class=\"keyword\">new</span> Build();</div><div class=\"line\">System.out.println(<span class=\"string\">\"第二次new Build 类!\"</span>); <span class=\"comment\">//为了区分便于查看输出结果</span></div><div class=\"line\">Build b2 = <span class=\"keyword\">new</span> Build();  <span class=\"comment\">//见下边的总结6）\u0003</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的static静态代码块！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 1</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 3</span></div><div class=\"line\"><span class=\"comment\">//这是Build类！</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 第二次new Build 类!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的static静态代码块！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 1</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 3</span></div><div class=\"line\"><span class=\"comment\">//这是Build类！</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 2</span></div></pre></td></tr></table></figure>\n<h4 id=\"对象创建-new-过程总结\"><a href=\"#对象创建-new-过程总结\" class=\"headerlink\" title=\"对象创建(new)过程总结\"></a>对象创建(new)过程总结</h4><blockquote>\n<p>1) 装载.class文件，创建class对象，对由static声明的变量、方法进行初始化 且 只初始化一次！</p>\n<p>2) new实例化时，在堆内存进行空间分配</p>\n<p>3) 执行非静态块</p>\n<p>4) 执行 所有方法外定义的(类)变量的初始化</p>\n<p>5) 执行构造器/构造函数(方法)  [ 基本可以认为 构造函数是   一个类new过程中最后执行的 ]</p>\n<p>6) 针对同一个类，同时new多个该类的对象实例，则每次new的过程都遵循、并按顺序执行 上述原则</p>\n</blockquote>\n<h4 id=\"问题1、2-答案\"><a href=\"#问题1、2-答案\" class=\"headerlink\" title=\"问题1、2 答案\"></a>问题1、2 答案</h4><h5 id=\"Q1\"><a href=\"#Q1\" class=\"headerlink\" title=\"Q1\"></a>Q1</h5><blockquote>\n<p>Java中main函数为何必须是static修饰符？</p>\n</blockquote>\n<p>针对上述static分析、总结，现在来解释 开头的问题1：</p>\n<blockquote>\n<p>Java中main函数为何必须是static修饰符？</p>\n</blockquote>\n<p>个人 + 网上各类博客文章 总结：</p>\n<blockquote>\n<pre><code>main方法是Java解释器调用，那时候还未产生任何对象，程序入口，必须提前加载好；\nstatic修饰的类属性可以直接使用，而无需new一个实例化对象来去调用；\n[可以没有main方法而去执行Java代码]\n</code></pre></blockquote>\n<h5 id=\"Q2\"><a href=\"#Q2\" class=\"headerlink\" title=\"Q2\"></a>Q2</h5><blockquote>\n<p>Java中main函数为何必须使用String[] args形式的不定参数(数组作为参数)？</p>\n</blockquote>\n<p>A: </p>\n<p>&emsp;&emsp;正确解释: 按照Java规定入口函数必须这样写，就这么记！！而且参数必须为String类实例化的数组.</p>\n<p>刚开始，查阅网上一些资料解释如下（不正确）:<br>&emsp;&emsp; main方法里面的args的参数原来是接收的java运行参数。</p>\n<p><strong><em>证明</em></strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (String str : args) &#123;</div><div class=\"line\">            System.out.println(str);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//直接在IDE中编译运行，无任何输出</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>进入终端 使用javac 进行编译</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">lomo@LomodeMacBook-Pro:~/javaStudy/src/javaClassExercise % javac Main.java</div><div class=\"line\"><span class=\"comment\"># 编译完成生成一下Main.class文件.</span></div><div class=\"line\">java Main(1);</div><div class=\"line\">java Main(<span class=\"string\">\"\"</span>);</div><div class=\"line\"><span class=\"comment\">## 均无法运行</span></div></pre></td></tr></table></figure>\n<p>关于Java main函数解析还可参考博文:</p>\n<pre><code>http://www.cnblogs.com/xwdreamer/archive/2012/04/09/2438845.html\n</code></pre><h4 id=\"附-无main函数运行Java代码\"><a href=\"#附-无main函数运行Java代码\" class=\"headerlink\" title=\"附:无main函数运行Java代码\"></a>附:无main函数运行Java代码</h4><p> <strong><em>问题：</em></strong></p>\n<blockquote>\n<p>Java程序中, 无main函数作为入口函数, 程序是如何运行的呢？</p>\n</blockquote>\n<p>A:</p>\n<blockquote>\n<p>利用Junit或TestNG 测试框架，以@Test注解在测试方法上的形式 实现无main函数也可以运行Java代码.</p>\n<p>参考： <a href=\"http://www.ibm.com/developerworks/cn/java/j-cq08296/\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/java/j-cq08296/</a></p>\n</blockquote>\n<p>创建Maven工程：</p>\n<p><code>pom.xml</code>添加依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.testng<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>testng<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.8.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>E.g. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.testng.annotations.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by lomo</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">noMainMethod</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"我是测试无main函数类中的第一个静态代码块\"</span>);</div><div class=\"line\"><span class=\"comment\">//        System.exit(0);</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span>(description = <span class=\"string\">\"第一个\"</span>, testName = <span class=\"string\">\"T1\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"123chendong\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span>(description = <span class=\"string\">\"第二个测试例子\"</span>, testName = <span class=\"string\">\"T2\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"test 2\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>光标移动至test 或test2 上右键运行即可成功执行并输出对应结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">我是测试无main函数类中的第一个静态代码块</div><div class=\"line\">[TestNG] Running: </div><div class=\"line\">123Lomo</div><div class=\"line\">===============================================</div><div class=\"line\">Default Suite</div><div class=\"line\">Total tests run: 1, Failures: 0, Skips: 0</div><div class=\"line\">===============================================</div></pre></td></tr></table></figure>\n<p>或直接移动光标至类noMainMethod上运行，执行里面的2条Test并输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">我是测试无main函数类中的第一个静态代码块</div><div class=\"line\">[TestNG] Running:  </div><div class=\"line\">123Lomo</div><div class=\"line\">test 2</div><div class=\"line\">===============================================</div><div class=\"line\">Default Suite</div><div class=\"line\">Total tests run: 2, Failures: 0, Skips: 0</div><div class=\"line\">===============================================</div></pre></td></tr></table></figure>\n<h5 id=\"TestNG运行原理\"><a href=\"#TestNG运行原理\" class=\"headerlink\" title=\"TestNG运行原理?\"></a>TestNG运行原理?</h5><blockquote>\n<p>思考🤔: TestNG如何实现Java无main函数运行代码的? </p>\n</blockquote>\n<p>首先简单从<code>@Test</code> 作为入口，找到TestNG的<code>annotations</code>, 或者从测试方法的import包里找到TestNG的annotations包: <code>import org.testng.annotations</code></p>\n<p>可以看到org.testng包里除了annotations包外还有其它包: 断言asserts、log、junit、log4testng、xml…等等的包.</p>\n<p>进入annotations包，发现很多编译好的 <code>.class</code> 文件，找到其中之一<code>Test.class</code>, 双击进入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.testng.annotations;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Test &#123;</div><div class=\"line\">    String[] groups() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enabled</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    String[] parameters() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] dependsOnGroups() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] dependsOnMethods() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">timeOut</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0L</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">invocationTimeOut</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0L</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">invocationCount</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">threadPoolSize</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">successPercentage</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 100</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">dataProvider</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    Class&lt;?&gt; dataProviderClass() <span class=\"keyword\">default</span> Object.class;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">alwaysRun</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">description</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    Class[] expectedExceptions() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">expectedExceptionsMessageRegExp</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \".*\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">suiteName</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">testName</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">sequential</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">singleThreaded</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Class <span class=\"title\">retryAnalyzer</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Class.class</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">skipFailedInvocations</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">ignoreMissingDependencies</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>分析</strong></p>\n<p>先粗糙地分析下，<strong><em>待学完Java注解Anonation、反射等之后再深入总结下</em></strong>.</p>\n<p>根据其import的包是 <code>java.lang.annotation</code>, 就可以断言，TestNG的 @Test模式肯定也是基于Java的注解模式来实现无main函数运行的.</p>\n<p>接着简单说说Test方法前3行代码:</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Test</div></pre></td></tr></table></figure>\n<blockquote>\n<p>1)Retention， 保留， 表示在什么级别保留此信息</p>\n</blockquote>\n<p><code>SOURCE:源码注解，注解仅存在代码中，注解会被编译器丢弃</code></p>\n<p><code>CLASS:编译时注解，注解会在class文件中保留，但会被JVM丢弃</code></p>\n<p><code>RUNTIME:运行时注解，VM运行期间也会保留该注解，因此**可以通过反射来获得该注解**</code></p>\n<blockquote>\n<p>2)Target，表示作用域，可能的ElementType参数包括：</p>\n</blockquote>\n<p><code>CONSTRUCTOR:构造方法声明</code></p>\n<p><code>FIELD:字段声明</code></p>\n<p><code>LOCAL_VARIABLE:局部变量声明</code></p>\n<p><code>METHOD:方法声明</code></p>\n<p><code>PACKAGE:包声明</code></p>\n<p><code>PARAMETER:参数声明</code></p>\n<p><code>TYPE:类，接口或enum声明</code></p>\n<blockquote>\n<p>Test接口中，提供了很多 <code>@Test</code> 注解使用的属性，<code>@Test</code>标记一个类或方法作为测试的一部分。关于Test接口的详细属性列表参考：</p>\n<p><a href=\"http://testng.org/doc/documentation-main.html#annotations\" target=\"_blank\" rel=\"external\">http://testng.org/doc/documentation-main.html#annotations</a></p>\n</blockquote>\n<p><strong>小结</strong>: TestNG 实现无main函数执行，是基于Java的注解，深究后续继续学习记录笔记.</p>\n<p>Done!</p>\n","excerpt":"","more":"<h2 id=\"Java类和对象-学习笔记\"><a href=\"#Java类和对象-学习笔记\" class=\"headerlink\" title=\"Java类和对象[学习笔记]\"></a>Java类和对象[学习笔记]</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>类：是抽象的；</p>\n<p>&emsp;&emsp; 将对象的属性和方法封装在一起就组成了类这么个东西</p>\n<p>对象：是具体的；</p>\n<blockquote>\n<p>在面向对象编程中，主要思想：一切皆为对象！以对象为单位进行coding</p>\n</blockquote>\n<h3 id=\"提出问题：\"><a href=\"#提出问题：\" class=\"headerlink\" title=\"提出问题：\"></a>提出问题：</h3><blockquote>\n<p>为什么Java中的main函数必须是static静态的？<br>为什么main方法中必须带有参数而且是不定参数String[] value形式？</p>\n</blockquote>\n<p>这是自己学习以来经常会在脑海里出现的问题，现在进行系统学习后，简单进行总结，答案在最后。</p>\n<h3 id=\"类的创建和初始化\"><a href=\"#类的创建和初始化\" class=\"headerlink\" title=\"类的创建和初始化\"></a>类的创建和初始化</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"keyword\">public</span> 类名() &#123;</div><div class=\"line\">        <span class=\"comment\">//do sth...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>默认地，如果一个类没有显式地申明构造函数，则在编译执行过程中会自动创建一个构造函数!</p>\n<p>而构造方法是一个类被初始化过程中必须执行的方法！！</p>\n</blockquote>\n<h5 id=\"类的创建规则：\"><a href=\"#类的创建规则：\" class=\"headerlink\" title=\"类的创建规则：\"></a>类的创建规则：</h5><blockquote>\n<p>一个.java文件中可以有多个类，但是 <strong>至多</strong> 只能有一个public类 一般情况，该类里放置main方法，作为程序入口!</p>\n<p>可以有0个public的类, 那么.java文件的名可以与其中任何一个类名字相同即可</p>\n<p>如果有public类，则.java文件名字必须与该public类名相同！！！</p>\n</blockquote>\n<p>关于编译:</p>\n<blockquote>\n<p>编译时，会为每个.java文件创建一个对应的.class文件</p>\n</blockquote>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><blockquote>\n<p>一般，通过类的构造器来创建对象, 构造器即：构造函数，是一个与类同名的方法；在new时对其传递一些参数完成初始化.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类名  变量名 =  <span class=\"keyword\">new</span> 类名(<span class=\"string\">\"参数\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>E.g.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">classTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    String name;</div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">double</span> height;</div><div class=\"line\">    <span class=\"keyword\">double</span> weight;</div><div class=\"line\">    String interest;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> sex;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">classTest</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">double</span> height, <span class=\"keyword\">double</span> weight, String interest, <span class=\"keyword\">boolean</span> sex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">        <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">        <span class=\"keyword\">this</span>.weight = weight;</div><div class=\"line\">        <span class=\"keyword\">this</span>.interest = interest;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</div><div class=\"line\">        <span class=\"comment\">//还有其它很多公有属性</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        classTest test = <span class=\"keyword\">new</span> classTest(<span class=\"string\">\"Lomo\"</span>, <span class=\"number\">25</span>, <span class=\"number\">165.00</span>, <span class=\"number\">110.0</span>, <span class=\"string\">\"read\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">        String  male;</div><div class=\"line\">        <span class=\"keyword\">if</span>(test.sex) &#123;</div><div class=\"line\">            male = <span class=\"string\">\"男\"</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            male = <span class=\"string\">\"女\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.print(<span class=\"string\">\"Name: \"</span> + test.name + <span class=\"string\">\"，Age: \"</span> + test.age + <span class=\"string\">\"，Height: \"</span> + test.height + <span class=\"string\">\"，Weight: \"</span>+ test.weight + <span class=\"string\">\"，Interest\"</span> + test.interest + <span class=\"string\">\"，Sex: \"</span> + male);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 运行输出: Name: Lomo，Age: 25，Height: 165.0，Weight: 110.0，Interestread，Sex: 男</span></div></pre></td></tr></table></figure></p>\n<p>【总结】 初始化/实例化一个类 这个new 的过程:</p>\n<p>编译器会首先检查类中是否有显式地申明构造函数，若有，则new的时候会直接调用该定义的构造器/构造函数;  若没有显式地申明构造函数，则编译器会自动为该类增加一个无参数的空构造方法：类名(){};</p>\n</blockquote>\n<h4 id=\"构造方法和变量的初始化顺序\"><a href=\"#构造方法和变量的初始化顺序\" class=\"headerlink\" title=\"构造方法和变量的初始化顺序:\"></a>构造方法和变量的初始化顺序:</h4><blockquote>\n<p>类在被初始化new的过程中, 构造方法和变量的初始化顺序?</p>\n</blockquote>\n<p>结论：</p>\n<blockquote>\n<p>无论类中的(类)变量申明在方法/构造方法前面或者后面，变量都会优先于一般方法/构造方法 执行！！！</p>\n<p>无论类变量在类中相对于方法的位置是在方法前或后，只要在方法的外部，就一定会先初始化变量！！！</p>\n</blockquote>\n<p>E.g.1</p>\n<p><code>Person.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String t = <span class=\"string\">\"lomo\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造器/构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Person: \"</span> + id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Build b = <span class=\"keyword\">new</span> Build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"这是Build类的构造函数！\"</span>);</div><div class=\"line\">        Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Person p3 = <span class=\"keyword\">new</span> Person(<span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出：</span></div><div class=\"line\">        <span class=\"comment\">// Person: 1</span></div><div class=\"line\">        <span class=\"comment\">// Person: 3</span></div><div class=\"line\">        <span class=\"comment\">// 这是Build类的构造函数！</span></div><div class=\"line\">        <span class=\"comment\">// Person: 2</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>分析</strong><br>运行时，找到main方法，从main方法作为入口开始执行程序，在main方法中new了一个Build类对象b, 再看Build类, Build类中有两个变量p1, p3 和 一个Build类的显式声明的无参数的构造函数, 根据开头的结论：类变量初始化优先于构造函数初始化, 所以在main函数中new一个Build类实例时，会先初始化Build类的类变量p1, p3， 所以依次输出 <code>Person: 1</code>, <code>Person: 3</code>, 然后执行构造器的初始化, 打印了构造方法Build的结果 <code>这是Build类的构造函数！</code>, Build构造函数中第二行语句又new了一个Person类的实例，所以此时又按照刚才所述，同理先初始化类变量，此时Person类中无类变量，所以根据给new时给传入的参数2 执行Person类的构造方法，输出<code>Person: 2</code>.</p>\n<p>分析完毕!!!</p>\n<p>【实际使用】过程中，构造函数：通常 构造函数是为了在new创建类实例(对象)时就可以直接获取该类的一些属性.</p>\n</blockquote>\n<h5 id=\"static与非static区别\"><a href=\"#static与非static区别\" class=\"headerlink\" title=\"static与非static区别\"></a>static与非static区别</h5><p>首先，对E.g.1改造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造器、构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Person: \"</span> + id);</div><div class=\"line\">        <span class=\"comment\">//Lomo lomo = new Lomo(\"LOMO\");</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * static 静态代码块</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"这是static静态代码块！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 非静态块</div><div class=\"line\">     */</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"这是非静态代码块！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 主函数、程序执行入口</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Build b = <span class=\"keyword\">new</span> Build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"这是Build类！\"</span>);</div><div class=\"line\">        Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Person p3 = <span class=\"keyword\">new</span> Person(<span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 运行，输出：</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的static静态代码块！</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Build类！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 2</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>分析</strong></p>\n<p>Tips: 类中的static静态代码块或静态变量、静态方法，在初始化该类时，无论new多少，都只初始化一次然后保存在内存中，供使用！！！</p>\n<p>从main函数入口开始执行程序代码，被static修饰的变量或方法也属于e.g.1中分析所述的类变量、类方法(且 <strong>只被初始化一次</strong>)，所以在main函数开始执行时，Person类对应的.class已被装载完毕，等待main函数去执行，Java解释器会提前装载好main函数所在的Person类，而Person类中static声明的代码块就被初始化/执行, 打印出<code>这是Person类中的static静态代码块！</code>, 接着执行非静态代码块； 然后执行Build类对象b的初始化, 按照之前所述的原则, 初始化对象b时，调用的是Build类，所以要先对Build类的类变量p1初始化，执行new Person(1); new Person操作又是对Person类初始化，该初始化需要先执行Person类中的非静态代码块，所以先输出 <code>这是Person类中的非静态代码块！</code>, Person类中此时无其它类变量、类方法，所以就会执行Person的构造方法输出<code>Person: 1</code>, 此时可以理解为：主函数main方法中的第一部分执行完毕，即：<code>Person p1 = new Person(1);</code> , 按照之前所述规则，继续执行类变量p3初始化, 同上, 一次输出<code>这是Person类中的非静态代码块！</code> 和 <code>Person: 3</code>, 此时相当于主函数的第二部分执行完毕; 到此 Build类中的类变量全部初始化完毕; 第三部分: 执行Build类的构造函数, 顺序执行输出 <code>这是Build类！</code>, <code>Person p2 = new Person(2);</code> 再按照之前的规则, 一次输出: <code>这是Person类中的非静态代码块！</code>, <code>Person: 2</code>。</p>\n<p>分析完毕！！！</p>\n<p>【总结】</p>\n<p>被声明为static的变量或者方法，或者前面说的块，都属于类变量、类方法.</p>\n<p>static 静态数据特点(static变量、方法)：初始化只在类的装载过程中只执行一次！！！<br>整个过程中只进行一次初始化，在内存中只开辟一个空间，不论在哪儿调用，值保持一致。一旦被修改，所有引用它的地方都会跟着修改。 一般直接通过类名进行调用。</p>\n<p>类变量、类里的方法，外部对象对他们的引用还可以直接使用类名.变量名或类名.方法名 进行引用(在一个类中引用另一个类的变量,则该变量在另一个类中必须定义为private类型, 且范围不能是private修饰的).</p>\n<p>非静态块： 每new实例化一个对象时，就会执行一次非静态对象！！！</p>\n</blockquote>\n<p>对E.g.2 添加一行代码，在main函数中</p>\n<p>E.g.3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Build b = <span class=\"keyword\">new</span> Build();</div><div class=\"line\">System.out.println(<span class=\"string\">\"第二次new Build 类!\"</span>); <span class=\"comment\">//为了区分便于查看输出结果</span></div><div class=\"line\">Build b2 = <span class=\"keyword\">new</span> Build();  <span class=\"comment\">//见下边的总结6）\u0003</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输出结果:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的static静态代码块！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 1</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 3</span></div><div class=\"line\"><span class=\"comment\">//这是Build类！</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 第二次new Build 类!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的static静态代码块！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 1</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 3</span></div><div class=\"line\"><span class=\"comment\">//这是Build类！</span></div><div class=\"line\"><span class=\"comment\">//这是Person类中的非静态代码块！</span></div><div class=\"line\"><span class=\"comment\">//Person: 2</span></div></pre></td></tr></table></figure>\n<h4 id=\"对象创建-new-过程总结\"><a href=\"#对象创建-new-过程总结\" class=\"headerlink\" title=\"对象创建(new)过程总结\"></a>对象创建(new)过程总结</h4><blockquote>\n<p>1) 装载.class文件，创建class对象，对由static声明的变量、方法进行初始化 且 只初始化一次！</p>\n<p>2) new实例化时，在堆内存进行空间分配</p>\n<p>3) 执行非静态块</p>\n<p>4) 执行 所有方法外定义的(类)变量的初始化</p>\n<p>5) 执行构造器/构造函数(方法)  [ 基本可以认为 构造函数是   一个类new过程中最后执行的 ]</p>\n<p>6) 针对同一个类，同时new多个该类的对象实例，则每次new的过程都遵循、并按顺序执行 上述原则</p>\n</blockquote>\n<h4 id=\"问题1、2-答案\"><a href=\"#问题1、2-答案\" class=\"headerlink\" title=\"问题1、2 答案\"></a>问题1、2 答案</h4><h5 id=\"Q1\"><a href=\"#Q1\" class=\"headerlink\" title=\"Q1\"></a>Q1</h5><blockquote>\n<p>Java中main函数为何必须是static修饰符？</p>\n</blockquote>\n<p>针对上述static分析、总结，现在来解释 开头的问题1：</p>\n<blockquote>\n<p>Java中main函数为何必须是static修饰符？</p>\n</blockquote>\n<p>个人 + 网上各类博客文章 总结：</p>\n<blockquote>\n<pre><code>main方法是Java解释器调用，那时候还未产生任何对象，程序入口，必须提前加载好；\nstatic修饰的类属性可以直接使用，而无需new一个实例化对象来去调用；\n[可以没有main方法而去执行Java代码]\n</code></pre></blockquote>\n<h5 id=\"Q2\"><a href=\"#Q2\" class=\"headerlink\" title=\"Q2\"></a>Q2</h5><blockquote>\n<p>Java中main函数为何必须使用String[] args形式的不定参数(数组作为参数)？</p>\n</blockquote>\n<p>A: </p>\n<p>&emsp;&emsp;正确解释: 按照Java规定入口函数必须这样写，就这么记！！而且参数必须为String类实例化的数组.</p>\n<p>刚开始，查阅网上一些资料解释如下（不正确）:<br>&emsp;&emsp; main方法里面的args的参数原来是接收的java运行参数。</p>\n<p><strong><em>证明</em></strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (String str : args) &#123;</div><div class=\"line\">            System.out.println(str);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//直接在IDE中编译运行，无任何输出</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>进入终端 使用javac 进行编译</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">lomo@LomodeMacBook-Pro:~/javaStudy/src/javaClassExercise % javac Main.java</div><div class=\"line\"><span class=\"comment\"># 编译完成生成一下Main.class文件.</span></div><div class=\"line\">java Main(1);</div><div class=\"line\">java Main(<span class=\"string\">\"\"</span>);</div><div class=\"line\"><span class=\"comment\">## 均无法运行</span></div></pre></td></tr></table></figure>\n<p>关于Java main函数解析还可参考博文:</p>\n<pre><code>http://www.cnblogs.com/xwdreamer/archive/2012/04/09/2438845.html\n</code></pre><h4 id=\"附-无main函数运行Java代码\"><a href=\"#附-无main函数运行Java代码\" class=\"headerlink\" title=\"附:无main函数运行Java代码\"></a>附:无main函数运行Java代码</h4><p> <strong><em>问题：</em></strong></p>\n<blockquote>\n<p>Java程序中, 无main函数作为入口函数, 程序是如何运行的呢？</p>\n</blockquote>\n<p>A:</p>\n<blockquote>\n<p>利用Junit或TestNG 测试框架，以@Test注解在测试方法上的形式 实现无main函数也可以运行Java代码.</p>\n<p>参考： <a href=\"http://www.ibm.com/developerworks/cn/java/j-cq08296/\">http://www.ibm.com/developerworks/cn/java/j-cq08296/</a></p>\n</blockquote>\n<p>创建Maven工程：</p>\n<p><code>pom.xml</code>添加依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.testng<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>testng<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.8.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>E.g. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.testng.annotations.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by lomo</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">noMainMethod</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"我是测试无main函数类中的第一个静态代码块\"</span>);</div><div class=\"line\"><span class=\"comment\">//        System.exit(0);</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span>(description = <span class=\"string\">\"第一个\"</span>, testName = <span class=\"string\">\"T1\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"123chendong\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span>(description = <span class=\"string\">\"第二个测试例子\"</span>, testName = <span class=\"string\">\"T2\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"test 2\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>光标移动至test 或test2 上右键运行即可成功执行并输出对应结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">我是测试无main函数类中的第一个静态代码块</div><div class=\"line\">[TestNG] Running: </div><div class=\"line\">123Lomo</div><div class=\"line\">===============================================</div><div class=\"line\">Default Suite</div><div class=\"line\">Total tests run: 1, Failures: 0, Skips: 0</div><div class=\"line\">===============================================</div></pre></td></tr></table></figure>\n<p>或直接移动光标至类noMainMethod上运行，执行里面的2条Test并输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">我是测试无main函数类中的第一个静态代码块</div><div class=\"line\">[TestNG] Running:  </div><div class=\"line\">123Lomo</div><div class=\"line\">test 2</div><div class=\"line\">===============================================</div><div class=\"line\">Default Suite</div><div class=\"line\">Total tests run: 2, Failures: 0, Skips: 0</div><div class=\"line\">===============================================</div></pre></td></tr></table></figure>\n<h5 id=\"TestNG运行原理\"><a href=\"#TestNG运行原理\" class=\"headerlink\" title=\"TestNG运行原理?\"></a>TestNG运行原理?</h5><blockquote>\n<p>思考🤔: TestNG如何实现Java无main函数运行代码的? </p>\n</blockquote>\n<p>首先简单从<code>@Test</code> 作为入口，找到TestNG的<code>annotations</code>, 或者从测试方法的import包里找到TestNG的annotations包: <code>import org.testng.annotations</code></p>\n<p>可以看到org.testng包里除了annotations包外还有其它包: 断言asserts、log、junit、log4testng、xml…等等的包.</p>\n<p>进入annotations包，发现很多编译好的 <code>.class</code> 文件，找到其中之一<code>Test.class</code>, 双击进入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.testng.annotations;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Test &#123;</div><div class=\"line\">    String[] groups() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enabled</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    String[] parameters() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] dependsOnGroups() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] dependsOnMethods() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">timeOut</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0L</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">invocationTimeOut</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0L</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">invocationCount</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">threadPoolSize</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">successPercentage</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 100</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">dataProvider</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    Class&lt;?&gt; dataProviderClass() <span class=\"keyword\">default</span> Object.class;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">alwaysRun</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">description</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    Class[] expectedExceptions() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">expectedExceptionsMessageRegExp</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \".*\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">suiteName</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">testName</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@deprecated</span> */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">sequential</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">singleThreaded</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Class <span class=\"title\">retryAnalyzer</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Class.class</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">skipFailedInvocations</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">ignoreMissingDependencies</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>分析</strong></p>\n<p>先粗糙地分析下，<strong><em>待学完Java注解Anonation、反射等之后再深入总结下</em></strong>.</p>\n<p>根据其import的包是 <code>java.lang.annotation</code>, 就可以断言，TestNG的 @Test模式肯定也是基于Java的注解模式来实现无main函数运行的.</p>\n<p>接着简单说说Test方法前3行代码:</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Test</div></pre></td></tr></table></figure>\n<blockquote>\n<p>1)Retention， 保留， 表示在什么级别保留此信息</p>\n</blockquote>\n<p><code>SOURCE:源码注解，注解仅存在代码中，注解会被编译器丢弃</code></p>\n<p><code>CLASS:编译时注解，注解会在class文件中保留，但会被JVM丢弃</code></p>\n<p><code>RUNTIME:运行时注解，VM运行期间也会保留该注解，因此**可以通过反射来获得该注解**</code></p>\n<blockquote>\n<p>2)Target，表示作用域，可能的ElementType参数包括：</p>\n</blockquote>\n<p><code>CONSTRUCTOR:构造方法声明</code></p>\n<p><code>FIELD:字段声明</code></p>\n<p><code>LOCAL_VARIABLE:局部变量声明</code></p>\n<p><code>METHOD:方法声明</code></p>\n<p><code>PACKAGE:包声明</code></p>\n<p><code>PARAMETER:参数声明</code></p>\n<p><code>TYPE:类，接口或enum声明</code></p>\n<blockquote>\n<p>Test接口中，提供了很多 <code>@Test</code> 注解使用的属性，<code>@Test</code>标记一个类或方法作为测试的一部分。关于Test接口的详细属性列表参考：</p>\n<p><a href=\"http://testng.org/doc/documentation-main.html#annotations\">http://testng.org/doc/documentation-main.html#annotations</a></p>\n</blockquote>\n<p><strong>小结</strong>: TestNG 实现无main函数执行，是基于Java的注解，深究后续继续学习记录笔记.</p>\n<p>Done!</p>\n"},{"title":"Linux and BSD difference","date":"2014-06-13T04:54:04.000Z","_content":"\n## Linux 与BSD关系 区别\n\nLinux 是只是一个内核。制作 Linux 发行版所要做的工作就是，汇集那些创建一个完整 Linux 操作系统所需的所有软件，将它组合成一个像 Ubuntu、Mint、Debian、RedHat 或者是 Arch 这样的 Linux 发行版。有许多不同的 Linux 发行版。\n\n与此相反的是，BSD 这个名字则代表其内核和操作系统。例如，FreeBSD 提供了 FreeBSD 内核和 FreeBSD 操作系统。它是作为一个单一的项目维护的。换句话说，如果你想要安装 FreeBSD，就只有一个 FreeBSD 可供你安装。如果你想要安装 Linux，你首先需要在许多 Linux 发行版之间选择。\n\n许可证是典型的差异，虽然它不会对大多数人产生影响。Linux 使用 GNU 通用公共许可证，即 GPL。如果你修改了 Linux 内核，并将其分发，你就必须放出您的修改的源代码。\n\nBSD 使用 BSD 许可证。如果你修改了 BSD 内核或发行版，并且发布它，你根本不需要必须发布其源代码。你可以自由地对你的 BSD 代码做任何你想做的事情，你没有义务发布的你修改的源代码，当然你想发布也行。\n\n以下是通常认可的三个“主流” BSD 操作系统：\n• FreeBSD: FreeBSD 是最受欢迎的 BSD，针对高性能和易用性。它支持英特尔和 AMD 的32位和64位处理器。\n• NetBSD: NetBSD 被设计运行在几乎任何架构上，支持更多的体系结构。在他们的主页上的格言是\"理所当然，我们运行在 NetBSD 上\"。\n• OpenBSD:OpenBSD 为最大化的安全性设计的 —— 这不仅仅它宣称的功能，在实践中也确实如此。它是为银行和其他重要机构的关键系统设计的。\n\n还有两个其他的重要 BSD 操作系统：\n• DragonFly BSD: DragonFly BSD 的设计目标是提供一个运行在多线程环境中的操作系统 —— 例如，计算机集群。\n• Darwin / Mac OS X: Mac OS X 实际上基于 Darwin 操作系统，而 Darwin 系统基于 BSD。它与其他的 BSD 有点不同，虽然底层内核和其他的软件是开源代码(BSD 代码)，但操作系统的大部分是闭源的 Mac OS 代码)。苹果在 BSD 基础上开发了 Mac OS X 和 iOS，这样他们就不必写操作系统底层，就像 谷歌在 Linux 基础上开发 android 系统一样。\n\n如果你是一个 PC 桌面用户，你真的不需要太过在意 BSD。你可能会喜欢 Linux，因为它具有更先进的硬件支持，更容易安装，具有现代操作系统的特点。如果你关注服务器或嵌入式的设备，你可能会更喜欢 FreeBSD。\n","source":"_posts/Linux-and-BSD-difference.md","raw":"---\ntitle: Linux and BSD difference\ndate: 2014-06-13 12:54:04\ntags: [Linux, BSD, Darwin]\ncategories: read\n---\n\n## Linux 与BSD关系 区别\n\nLinux 是只是一个内核。制作 Linux 发行版所要做的工作就是，汇集那些创建一个完整 Linux 操作系统所需的所有软件，将它组合成一个像 Ubuntu、Mint、Debian、RedHat 或者是 Arch 这样的 Linux 发行版。有许多不同的 Linux 发行版。\n\n与此相反的是，BSD 这个名字则代表其内核和操作系统。例如，FreeBSD 提供了 FreeBSD 内核和 FreeBSD 操作系统。它是作为一个单一的项目维护的。换句话说，如果你想要安装 FreeBSD，就只有一个 FreeBSD 可供你安装。如果你想要安装 Linux，你首先需要在许多 Linux 发行版之间选择。\n\n许可证是典型的差异，虽然它不会对大多数人产生影响。Linux 使用 GNU 通用公共许可证，即 GPL。如果你修改了 Linux 内核，并将其分发，你就必须放出您的修改的源代码。\n\nBSD 使用 BSD 许可证。如果你修改了 BSD 内核或发行版，并且发布它，你根本不需要必须发布其源代码。你可以自由地对你的 BSD 代码做任何你想做的事情，你没有义务发布的你修改的源代码，当然你想发布也行。\n\n以下是通常认可的三个“主流” BSD 操作系统：\n• FreeBSD: FreeBSD 是最受欢迎的 BSD，针对高性能和易用性。它支持英特尔和 AMD 的32位和64位处理器。\n• NetBSD: NetBSD 被设计运行在几乎任何架构上，支持更多的体系结构。在他们的主页上的格言是\"理所当然，我们运行在 NetBSD 上\"。\n• OpenBSD:OpenBSD 为最大化的安全性设计的 —— 这不仅仅它宣称的功能，在实践中也确实如此。它是为银行和其他重要机构的关键系统设计的。\n\n还有两个其他的重要 BSD 操作系统：\n• DragonFly BSD: DragonFly BSD 的设计目标是提供一个运行在多线程环境中的操作系统 —— 例如，计算机集群。\n• Darwin / Mac OS X: Mac OS X 实际上基于 Darwin 操作系统，而 Darwin 系统基于 BSD。它与其他的 BSD 有点不同，虽然底层内核和其他的软件是开源代码(BSD 代码)，但操作系统的大部分是闭源的 Mac OS 代码)。苹果在 BSD 基础上开发了 Mac OS X 和 iOS，这样他们就不必写操作系统底层，就像 谷歌在 Linux 基础上开发 android 系统一样。\n\n如果你是一个 PC 桌面用户，你真的不需要太过在意 BSD。你可能会喜欢 Linux，因为它具有更先进的硬件支持，更容易安装，具有现代操作系统的特点。如果你关注服务器或嵌入式的设备，你可能会更喜欢 FreeBSD。\n","slug":"Linux-and-BSD-difference","published":1,"updated":"2017-02-25T15:39:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fm70004eyqmt4ypyrts","content":"<h2 id=\"Linux-与BSD关系-区别\"><a href=\"#Linux-与BSD关系-区别\" class=\"headerlink\" title=\"Linux 与BSD关系 区别\"></a>Linux 与BSD关系 区别</h2><p>Linux 是只是一个内核。制作 Linux 发行版所要做的工作就是，汇集那些创建一个完整 Linux 操作系统所需的所有软件，将它组合成一个像 Ubuntu、Mint、Debian、RedHat 或者是 Arch 这样的 Linux 发行版。有许多不同的 Linux 发行版。</p>\n<p>与此相反的是，BSD 这个名字则代表其内核和操作系统。例如，FreeBSD 提供了 FreeBSD 内核和 FreeBSD 操作系统。它是作为一个单一的项目维护的。换句话说，如果你想要安装 FreeBSD，就只有一个 FreeBSD 可供你安装。如果你想要安装 Linux，你首先需要在许多 Linux 发行版之间选择。</p>\n<p>许可证是典型的差异，虽然它不会对大多数人产生影响。Linux 使用 GNU 通用公共许可证，即 GPL。如果你修改了 Linux 内核，并将其分发，你就必须放出您的修改的源代码。</p>\n<p>BSD 使用 BSD 许可证。如果你修改了 BSD 内核或发行版，并且发布它，你根本不需要必须发布其源代码。你可以自由地对你的 BSD 代码做任何你想做的事情，你没有义务发布的你修改的源代码，当然你想发布也行。</p>\n<p>以下是通常认可的三个“主流” BSD 操作系统：<br>• FreeBSD: FreeBSD 是最受欢迎的 BSD，针对高性能和易用性。它支持英特尔和 AMD 的32位和64位处理器。<br>• NetBSD: NetBSD 被设计运行在几乎任何架构上，支持更多的体系结构。在他们的主页上的格言是”理所当然，我们运行在 NetBSD 上”。<br>• OpenBSD:OpenBSD 为最大化的安全性设计的 —— 这不仅仅它宣称的功能，在实践中也确实如此。它是为银行和其他重要机构的关键系统设计的。</p>\n<p>还有两个其他的重要 BSD 操作系统：<br>• DragonFly BSD: DragonFly BSD 的设计目标是提供一个运行在多线程环境中的操作系统 —— 例如，计算机集群。<br>• Darwin / Mac OS X: Mac OS X 实际上基于 Darwin 操作系统，而 Darwin 系统基于 BSD。它与其他的 BSD 有点不同，虽然底层内核和其他的软件是开源代码(BSD 代码)，但操作系统的大部分是闭源的 Mac OS 代码)。苹果在 BSD 基础上开发了 Mac OS X 和 iOS，这样他们就不必写操作系统底层，就像 谷歌在 Linux 基础上开发 android 系统一样。</p>\n<p>如果你是一个 PC 桌面用户，你真的不需要太过在意 BSD。你可能会喜欢 Linux，因为它具有更先进的硬件支持，更容易安装，具有现代操作系统的特点。如果你关注服务器或嵌入式的设备，你可能会更喜欢 FreeBSD。</p>\n","excerpt":"","more":"<h2 id=\"Linux-与BSD关系-区别\"><a href=\"#Linux-与BSD关系-区别\" class=\"headerlink\" title=\"Linux 与BSD关系 区别\"></a>Linux 与BSD关系 区别</h2><p>Linux 是只是一个内核。制作 Linux 发行版所要做的工作就是，汇集那些创建一个完整 Linux 操作系统所需的所有软件，将它组合成一个像 Ubuntu、Mint、Debian、RedHat 或者是 Arch 这样的 Linux 发行版。有许多不同的 Linux 发行版。</p>\n<p>与此相反的是，BSD 这个名字则代表其内核和操作系统。例如，FreeBSD 提供了 FreeBSD 内核和 FreeBSD 操作系统。它是作为一个单一的项目维护的。换句话说，如果你想要安装 FreeBSD，就只有一个 FreeBSD 可供你安装。如果你想要安装 Linux，你首先需要在许多 Linux 发行版之间选择。</p>\n<p>许可证是典型的差异，虽然它不会对大多数人产生影响。Linux 使用 GNU 通用公共许可证，即 GPL。如果你修改了 Linux 内核，并将其分发，你就必须放出您的修改的源代码。</p>\n<p>BSD 使用 BSD 许可证。如果你修改了 BSD 内核或发行版，并且发布它，你根本不需要必须发布其源代码。你可以自由地对你的 BSD 代码做任何你想做的事情，你没有义务发布的你修改的源代码，当然你想发布也行。</p>\n<p>以下是通常认可的三个“主流” BSD 操作系统：<br>• FreeBSD: FreeBSD 是最受欢迎的 BSD，针对高性能和易用性。它支持英特尔和 AMD 的32位和64位处理器。<br>• NetBSD: NetBSD 被设计运行在几乎任何架构上，支持更多的体系结构。在他们的主页上的格言是”理所当然，我们运行在 NetBSD 上”。<br>• OpenBSD:OpenBSD 为最大化的安全性设计的 —— 这不仅仅它宣称的功能，在实践中也确实如此。它是为银行和其他重要机构的关键系统设计的。</p>\n<p>还有两个其他的重要 BSD 操作系统：<br>• DragonFly BSD: DragonFly BSD 的设计目标是提供一个运行在多线程环境中的操作系统 —— 例如，计算机集群。<br>• Darwin / Mac OS X: Mac OS X 实际上基于 Darwin 操作系统，而 Darwin 系统基于 BSD。它与其他的 BSD 有点不同，虽然底层内核和其他的软件是开源代码(BSD 代码)，但操作系统的大部分是闭源的 Mac OS 代码)。苹果在 BSD 基础上开发了 Mac OS X 和 iOS，这样他们就不必写操作系统底层，就像 谷歌在 Linux 基础上开发 android 系统一样。</p>\n<p>如果你是一个 PC 桌面用户，你真的不需要太过在意 BSD。你可能会喜欢 Linux，因为它具有更先进的硬件支持，更容易安装，具有现代操作系统的特点。如果你关注服务器或嵌入式的设备，你可能会更喜欢 FreeBSD。</p>\n"},{"title":"MS Bing CodeFlow Architecture","date":"2014-05-07T03:26:49.000Z","_content":"\n## Simple Analysis Microsoft's Code Revew Tool\n\nIn Microsoft Company, how does they do the Code Revew?\n\nI am proud to know it a little about it, let's see it Today !\n\n### CodeFlow\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-screenshot.png)\n\n### CodeFlow Architecture\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-architecture.png)\n\n### Overview of the review process\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-overview-process.png)\n\n","source":"_posts/MS-Bing-CodeFlow.md","raw":"---\ntitle: MS Bing CodeFlow Architecture\ndate: 2014-05-07 11:26:49\ntags: [MS, Bing, CodeFlow]\ncategories: study\n---\n\n## Simple Analysis Microsoft's Code Revew Tool\n\nIn Microsoft Company, how does they do the Code Revew?\n\nI am proud to know it a little about it, let's see it Today !\n\n### CodeFlow\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-screenshot.png)\n\n### CodeFlow Architecture\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-architecture.png)\n\n### Overview of the review process\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-overview-process.png)\n\n","slug":"MS-Bing-CodeFlow","published":1,"updated":"2017-02-25T15:47:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fms0008eyqmxprpfsfx","content":"<h2 id=\"Simple-Analysis-Microsoft’s-Code-Revew-Tool\"><a href=\"#Simple-Analysis-Microsoft’s-Code-Revew-Tool\" class=\"headerlink\" title=\"Simple Analysis Microsoft’s Code Revew Tool\"></a>Simple Analysis Microsoft’s Code Revew Tool</h2><p>In Microsoft Company, how does they do the Code Revew?</p>\n<p>I am proud to know it a little about it, let’s see it Today !</p>\n<h3 id=\"CodeFlow\"><a href=\"#CodeFlow\" class=\"headerlink\" title=\"CodeFlow\"></a>CodeFlow</h3><p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-screenshot.png\" alt=\"img\"></p>\n<h3 id=\"CodeFlow-Architecture\"><a href=\"#CodeFlow-Architecture\" class=\"headerlink\" title=\"CodeFlow Architecture\"></a>CodeFlow Architecture</h3><p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-architecture.png\" alt=\"img\"></p>\n<h3 id=\"Overview-of-the-review-process\"><a href=\"#Overview-of-the-review-process\" class=\"headerlink\" title=\"Overview of the review process\"></a>Overview of the review process</h3><p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-overview-process.png\" alt=\"img\"></p>\n","excerpt":"","more":"<h2 id=\"Simple-Analysis-Microsoft’s-Code-Revew-Tool\"><a href=\"#Simple-Analysis-Microsoft’s-Code-Revew-Tool\" class=\"headerlink\" title=\"Simple Analysis Microsoft’s Code Revew Tool\"></a>Simple Analysis Microsoft’s Code Revew Tool</h2><p>In Microsoft Company, how does they do the Code Revew?</p>\n<p>I am proud to know it a little about it, let’s see it Today !</p>\n<h3 id=\"CodeFlow\"><a href=\"#CodeFlow\" class=\"headerlink\" title=\"CodeFlow\"></a>CodeFlow</h3><p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-screenshot.png\" alt=\"img\"></p>\n<h3 id=\"CodeFlow-Architecture\"><a href=\"#CodeFlow-Architecture\" class=\"headerlink\" title=\"CodeFlow Architecture\"></a>CodeFlow Architecture</h3><p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-architecture.png\" alt=\"img\"></p>\n<h3 id=\"Overview-of-the-review-process\"><a href=\"#Overview-of-the-review-process\" class=\"headerlink\" title=\"Overview of the review process\"></a>Overview of the review process</h3><p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/codeflow-overview-process.png\" alt=\"img\"></p>\n"},{"title":"MacOXS Install JDK 1.7-1.8","date":"2016-10-14T02:01:37.000Z","Description":"OSX共存1.7和1.8版本JDK","_content":"\n## Mac OSX同时安装JDK 1.7/1.8\n\n### 准备工作\n1. JDK 1.7按照常规安装完毕。\n\n2. 环境变量配置\n\n`~/.bash_profile` 配置如下：\n\n```bash\n\tJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home\n\tPATH=$JAVA_HOME/bin:$PATH\n\tMAVEN_HOME=/Users/lomo/env/apache-maven-3.3.9\n\tPATH=$MAVEN_HOME/bin:$PATH\n\texport ANDROID_HOME=/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx\n\texport PATH=${PATH}:/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx/tools\n\texport PATH=${PATH}:/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx/platform-tools\n\texport HOMEBREW_CASK_OPTS=\"--caskroom=/opt/homebrew-cask/Caskroom\"\n\talias mysql=/usr/local/mysql/bin/mysql\n\talias mysqladmin=/usr/local/mysql/bin/mysqladmin\n\tPATH=/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb:$PATH\n\t\t\t\n\texport MAVEN_HOME\n\texport JAVA_HOME\n\texport PATH\n\texport TRAVIS=1\n\n```\n\n3. 下载安装JDK 1.8\n\n> http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n下载后双击安装1.8即可。\n\n安装完后，在`/Library/Java/JavaVirtualMachines` 可以看到多出来的JDK 1.8版的目录文件夹.\n\n### 配置多版本JDK环境变量\n\n```bash\n\texport JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home\n\texport JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home\n\tMAVEN_HOME=/Users/lomo/env/apache-maven-3.3.9\n\tPATH=$MAVEN_HOME/bin:$PATH\n\texport ANDROID_HOME=/Users/lomo/Documents/SDK/sdk/android-sdk-macosx\n\texport PATH=${PATH}:/Users/lomo/Documents/SDK/sdk/android-sdk-macosx/tools\n\texport PATH=${PATH}:/Users/lomo/Documents/SDK/sdk/android-sdk-macosx/platform-tools\n\texport HOMEBREW_CASK_OPTS=\"--caskroom=/opt/homebrew-cask/Caskroom\"\n\talias mysql=/usr/local/mysql/bin/mysql\n\talias mysqladmin=/usr/local/mysql/bin/mysqladmin\n\talias jdk7='export JAVA_HOME=$JAVA_7_HOME'  # 使用alias轻松切换JDK版本\n\talias jdk8='export JAVA_HOME=$JAVA_8_HOME'\n\tPATH=/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb:$PATH\n\t\t\t\n\texport MAVEN_HOME\n\texport PATH\n\texport TRAVIS=1\n    export JAVA_HOME=$JAVA_7_HOME\n```\n> 默认还是使用JDK1.7版本\n\n配置完毕！\n\n### 测试\n\n终端输入alias，即可切换系统环境的默认JDK版本。如图：\n\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/osx-jdk-multi-version.png\"/> </div>\n\n\n### IDE配置\n\nEclipse 或 Intellij Idea的JDK 需要手动配置对应的Project的JDK，默认新建的是使用之前默认的JDK1.7，所以可以手动切换一下。\n\n如下：\n\n[Step1:\n\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/intellig-file.png\" /> </div>\n\n[Step2:\n\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/intellijIdea-jdk-settings.png\" /> </div>","source":"_posts/MacOXS-Install-JDK-1-7-1-8.md","raw":"---\ntitle: MacOXS Install JDK 1.7-1.8\ndate: 2016-10-14 10:01:37\ntags: [Mac, JDK]\ncategories: write\nDescription: OSX共存1.7和1.8版本JDK\n---\n\n## Mac OSX同时安装JDK 1.7/1.8\n\n### 准备工作\n1. JDK 1.7按照常规安装完毕。\n\n2. 环境变量配置\n\n`~/.bash_profile` 配置如下：\n\n```bash\n\tJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home\n\tPATH=$JAVA_HOME/bin:$PATH\n\tMAVEN_HOME=/Users/lomo/env/apache-maven-3.3.9\n\tPATH=$MAVEN_HOME/bin:$PATH\n\texport ANDROID_HOME=/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx\n\texport PATH=${PATH}:/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx/tools\n\texport PATH=${PATH}:/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx/platform-tools\n\texport HOMEBREW_CASK_OPTS=\"--caskroom=/opt/homebrew-cask/Caskroom\"\n\talias mysql=/usr/local/mysql/bin/mysql\n\talias mysqladmin=/usr/local/mysql/bin/mysqladmin\n\tPATH=/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb:$PATH\n\t\t\t\n\texport MAVEN_HOME\n\texport JAVA_HOME\n\texport PATH\n\texport TRAVIS=1\n\n```\n\n3. 下载安装JDK 1.8\n\n> http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n下载后双击安装1.8即可。\n\n安装完后，在`/Library/Java/JavaVirtualMachines` 可以看到多出来的JDK 1.8版的目录文件夹.\n\n### 配置多版本JDK环境变量\n\n```bash\n\texport JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home\n\texport JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home\n\tMAVEN_HOME=/Users/lomo/env/apache-maven-3.3.9\n\tPATH=$MAVEN_HOME/bin:$PATH\n\texport ANDROID_HOME=/Users/lomo/Documents/SDK/sdk/android-sdk-macosx\n\texport PATH=${PATH}:/Users/lomo/Documents/SDK/sdk/android-sdk-macosx/tools\n\texport PATH=${PATH}:/Users/lomo/Documents/SDK/sdk/android-sdk-macosx/platform-tools\n\texport HOMEBREW_CASK_OPTS=\"--caskroom=/opt/homebrew-cask/Caskroom\"\n\talias mysql=/usr/local/mysql/bin/mysql\n\talias mysqladmin=/usr/local/mysql/bin/mysqladmin\n\talias jdk7='export JAVA_HOME=$JAVA_7_HOME'  # 使用alias轻松切换JDK版本\n\talias jdk8='export JAVA_HOME=$JAVA_8_HOME'\n\tPATH=/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb:$PATH\n\t\t\t\n\texport MAVEN_HOME\n\texport PATH\n\texport TRAVIS=1\n    export JAVA_HOME=$JAVA_7_HOME\n```\n> 默认还是使用JDK1.7版本\n\n配置完毕！\n\n### 测试\n\n终端输入alias，即可切换系统环境的默认JDK版本。如图：\n\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/osx-jdk-multi-version.png\"/> </div>\n\n\n### IDE配置\n\nEclipse 或 Intellij Idea的JDK 需要手动配置对应的Project的JDK，默认新建的是使用之前默认的JDK1.7，所以可以手动切换一下。\n\n如下：\n\n[Step1:\n\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/intellig-file.png\" /> </div>\n\n[Step2:\n\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/intellijIdea-jdk-settings.png\" /> </div>","slug":"MacOXS-Install-JDK-1-7-1-8","published":1,"updated":"2017-03-15T11:38:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fn3000aeyqmeuxwwfii","content":"<h2 id=\"Mac-OSX同时安装JDK-1-7-1-8\"><a href=\"#Mac-OSX同时安装JDK-1-7-1-8\" class=\"headerlink\" title=\"Mac OSX同时安装JDK 1.7/1.8\"></a>Mac OSX同时安装JDK 1.7/1.8</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><p>JDK 1.7按照常规安装完毕。</p>\n</li>\n<li><p>环境变量配置</p>\n</li>\n</ol>\n<p><code>~/.bash_profile</code> 配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</div><div class=\"line\">PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\">MAVEN_HOME=/Users/lomo/env/apache-maven-3.3.9</div><div class=\"line\">PATH=<span class=\"variable\">$MAVEN_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\"><span class=\"built_in\">export</span> ANDROID_HOME=/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx/tools</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx/platform-tools</div><div class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_CASK_OPTS=<span class=\"string\">\"--caskroom=/opt/homebrew-cask/Caskroom\"</span></div><div class=\"line\"><span class=\"built_in\">alias</span> mysql=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql</div><div class=\"line\"><span class=\"built_in\">alias</span> mysqladmin=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysqladmin</div><div class=\"line\">PATH=/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb:<span class=\"variable\">$PATH</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"built_in\">export</span> MAVEN_HOME</div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME</div><div class=\"line\"><span class=\"built_in\">export</span> PATH</div><div class=\"line\"><span class=\"built_in\">export</span> TRAVIS=1</div></pre></td></tr></table></figure>\n<ol>\n<li>下载安装JDK 1.8</li>\n</ol>\n<blockquote>\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n</blockquote>\n<p>下载后双击安装1.8即可。</p>\n<p>安装完后，在<code>/Library/Java/JavaVirtualMachines</code> 可以看到多出来的JDK 1.8版的目录文件夹.</p>\n<h3 id=\"配置多版本JDK环境变量\"><a href=\"#配置多版本JDK环境变量\" class=\"headerlink\" title=\"配置多版本JDK环境变量\"></a>配置多版本JDK环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home</div><div class=\"line\">MAVEN_HOME=/Users/lomo/env/apache-maven-3.3.9</div><div class=\"line\">PATH=<span class=\"variable\">$MAVEN_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\"><span class=\"built_in\">export</span> ANDROID_HOME=/Users/lomo/Documents/SDK/sdk/android-sdk-macosx</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/Users/lomo/Documents/SDK/sdk/android-sdk-macosx/tools</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/Users/lomo/Documents/SDK/sdk/android-sdk-macosx/platform-tools</div><div class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_CASK_OPTS=<span class=\"string\">\"--caskroom=/opt/homebrew-cask/Caskroom\"</span></div><div class=\"line\"><span class=\"built_in\">alias</span> mysql=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql</div><div class=\"line\"><span class=\"built_in\">alias</span> mysqladmin=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysqladmin</div><div class=\"line\"><span class=\"built_in\">alias</span> jdk7=<span class=\"string\">'export JAVA_HOME=$JAVA_7_HOME'</span>  <span class=\"comment\"># 使用alias轻松切换JDK版本</span></div><div class=\"line\"><span class=\"built_in\">alias</span> jdk8=<span class=\"string\">'export JAVA_HOME=$JAVA_8_HOME'</span></div><div class=\"line\">PATH=/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb:<span class=\"variable\">$PATH</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"built_in\">export</span> MAVEN_HOME</div><div class=\"line\"><span class=\"built_in\">export</span> PATH</div><div class=\"line\"><span class=\"built_in\">export</span> TRAVIS=1</div><div class=\"line\">   <span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$JAVA_7_HOME</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>默认还是使用JDK1.7版本</p>\n</blockquote>\n<p>配置完毕！</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>终端输入alias，即可切换系统环境的默认JDK版本。如图：</p>\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/osx-jdk-multi-version.png\"> </div>\n\n\n<h3 id=\"IDE配置\"><a href=\"#IDE配置\" class=\"headerlink\" title=\"IDE配置\"></a>IDE配置</h3><p>Eclipse 或 Intellij Idea的JDK 需要手动配置对应的Project的JDK，默认新建的是使用之前默认的JDK1.7，所以可以手动切换一下。</p>\n<p>如下：</p>\n<p>[Step1:</p>\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/intellig-file.png\"> </div>\n\n<p>[Step2:</p>\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/intellijIdea-jdk-settings.png\"> </div>","excerpt":"","more":"<h2 id=\"Mac-OSX同时安装JDK-1-7-1-8\"><a href=\"#Mac-OSX同时安装JDK-1-7-1-8\" class=\"headerlink\" title=\"Mac OSX同时安装JDK 1.7/1.8\"></a>Mac OSX同时安装JDK 1.7/1.8</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><p>JDK 1.7按照常规安装完毕。</p>\n</li>\n<li><p>环境变量配置</p>\n</li>\n</ol>\n<p><code>~/.bash_profile</code> 配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</div><div class=\"line\">PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\">MAVEN_HOME=/Users/lomo/env/apache-maven-3.3.9</div><div class=\"line\">PATH=<span class=\"variable\">$MAVEN_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\"><span class=\"built_in\">export</span> ANDROID_HOME=/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx/tools</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/Users/lomo/Documents/IntelliJ/sdk/android-sdk-macosx/platform-tools</div><div class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_CASK_OPTS=<span class=\"string\">\"--caskroom=/opt/homebrew-cask/Caskroom\"</span></div><div class=\"line\"><span class=\"built_in\">alias</span> mysql=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql</div><div class=\"line\"><span class=\"built_in\">alias</span> mysqladmin=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysqladmin</div><div class=\"line\">PATH=/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb:<span class=\"variable\">$PATH</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"built_in\">export</span> MAVEN_HOME</div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME</div><div class=\"line\"><span class=\"built_in\">export</span> PATH</div><div class=\"line\"><span class=\"built_in\">export</span> TRAVIS=1</div></pre></td></tr></table></figure>\n<ol>\n<li>下载安装JDK 1.8</li>\n</ol>\n<blockquote>\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n</blockquote>\n<p>下载后双击安装1.8即可。</p>\n<p>安装完后，在<code>/Library/Java/JavaVirtualMachines</code> 可以看到多出来的JDK 1.8版的目录文件夹.</p>\n<h3 id=\"配置多版本JDK环境变量\"><a href=\"#配置多版本JDK环境变量\" class=\"headerlink\" title=\"配置多版本JDK环境变量\"></a>配置多版本JDK环境变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home</div><div class=\"line\">MAVEN_HOME=/Users/lomo/env/apache-maven-3.3.9</div><div class=\"line\">PATH=<span class=\"variable\">$MAVEN_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\"><span class=\"built_in\">export</span> ANDROID_HOME=/Users/lomo/Documents/SDK/sdk/android-sdk-macosx</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/Users/lomo/Documents/SDK/sdk/android-sdk-macosx/tools</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/Users/lomo/Documents/SDK/sdk/android-sdk-macosx/platform-tools</div><div class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_CASK_OPTS=<span class=\"string\">\"--caskroom=/opt/homebrew-cask/Caskroom\"</span></div><div class=\"line\"><span class=\"built_in\">alias</span> mysql=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysql</div><div class=\"line\"><span class=\"built_in\">alias</span> mysqladmin=/usr/<span class=\"built_in\">local</span>/mysql/bin/mysqladmin</div><div class=\"line\"><span class=\"built_in\">alias</span> jdk7=<span class=\"string\">'export JAVA_HOME=$JAVA_7_HOME'</span>  <span class=\"comment\"># 使用alias轻松切换JDK版本</span></div><div class=\"line\"><span class=\"built_in\">alias</span> jdk8=<span class=\"string\">'export JAVA_HOME=$JAVA_8_HOME'</span></div><div class=\"line\">PATH=/Applications/MongoDB.app/Contents/Resources/Vendor/mongodb:<span class=\"variable\">$PATH</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"built_in\">export</span> MAVEN_HOME</div><div class=\"line\"><span class=\"built_in\">export</span> PATH</div><div class=\"line\"><span class=\"built_in\">export</span> TRAVIS=1</div><div class=\"line\">   <span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$JAVA_7_HOME</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>默认还是使用JDK1.7版本</p>\n</blockquote>\n<p>配置完毕！</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>终端输入alias，即可切换系统环境的默认JDK版本。如图：</p>\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/osx-jdk-multi-version.png\"/> </div>\n\n\n<h3 id=\"IDE配置\"><a href=\"#IDE配置\" class=\"headerlink\" title=\"IDE配置\"></a>IDE配置</h3><p>Eclipse 或 Intellij Idea的JDK 需要手动配置对应的Project的JDK，默认新建的是使用之前默认的JDK1.7，所以可以手动切换一下。</p>\n<p>如下：</p>\n<p>[Step1:</p>\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/intellig-file.png\" /> </div>\n\n<p>[Step2:</p>\n<div align=\"center\"> <img width=\"75%\" src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/intellijIdea-jdk-settings.png\" /> </div>"},{"title":"LAMP开发环境搭建[手记]","date":"2016-09-21T07:05:46.000Z","_content":"## LAMP开发环境\n    硬件：VPS\n    系统环境：CentOS 6.5\n    \n## Apache安装\n```bash\n$ yum install httpd httpd-devel\n```\n控制台有提示y/n时，输入y回车等待安装完成即可。\n### 启动ApApache\n`/etc/init.d/httpd start`\n如果此时提示错误，像下图所示：\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/start-error.png)\n\n  【解决方案：\n     `vi /etc/httpd/conf/httpd.conf`\n\n     去掉 #注释，把domain改为localhost. (默认：www.example.com)\n\n将Apache设置为开机启动：\n`chkconfig httpd on`\n\n\n## MySQL安装\n```bash\n$  yum install mysql mysql-server mysql-devel\n```\n\n### 启动MySQL：\n`/etc/init.d/mysqld start`\n\n### 设置密码\n`mysql`\n\n`use mysql`\n\n`UPDATE user SET Password=PASSWORD('root') WHERE user='root';`\n\n以上方法设置MySQL的密码可能无效(本地机器远程连接此VPS的数据库时)\n\n\n方案2：\n\n登录此远程机器，执行MySQL安全配置：\n`mysql_secure_installation`\n\n如图：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-secure.png)\n\n接着按照控制台提示输入root密码；\n\n其它选项修改见以下截图配置，包括：匿名登录、是否允许从远端以root账户登录该数据库等。\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-other-settings.png)\n\n### 创建远程登录账户\n```bash\n$  CREATE USER '用户名'@'%' IDENTIFIED BY '密码';\n$  GRANT ALL PRIVILEGES ON *.* TO '用户名'@'%';\n```\n完成创建，即可远程以非root账户登录该数据库，访问其全县范围内的资源。\n\n\n\n## PHP安装\n```bash\n$  yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml \n```\n\n### Apache配置：\n\n配置Apache使其支持解析PHP类文件\n\n`vi /etc/httpd/conf/httpd.conf`\n\n如下图：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/apache-config-PHP.png)\n\n重启Apache：\n\n`/etc/init.d/httpd restart`\n\n\n### web/php默认文件目录修改\n\n`vi /etc/httpd/conf/httpd.conf`\n\n默认存放目录为：`/var/www/html` , 将httpd.conf文件中的该目录修改为自己需要的目录即可。\n\n给自己创建的文件目录加权：`chmod -R 755 路径`\n\n重启Apache。\n\n在自定义的目录下，创建PHP测试文件，以此来测试Apache是否可以正确加载并解释PHP。\n\n`cd 自定义目录`\n\n`touch phpinfo.php`\n\n`vim phpinfo.php`\n\n`<?php   phpinfo();  ?>`\n\n\n\n### 后记\n\nLAMP 常见安装路径\n\n#### Apache\n```bash\n如果采用RPM包安装，安装路径应在 /etc/httpd目录下\napache配置文件:/etc/httpd/conf/httpd.conf\nApache模块路径：/usr/sbin/apachectl\nweb目录:/var/www/html\n如果采用源代码安装，一般默认安装在/usr/local/apache2目录下\n```\n\n#### PHP\n```bash\n如果采用RPM包安装，安装路径应在 /etc/目录下\nphp的配置文件:/etc/php.ini\n如果采用源代码安装，一般默认安装在/usr/local/lib目录下\nphp配置文件: /usr/local/lib/php.ini\n或/usr/local/php/etc/php.ini\n\n```\n\n#### MySQL\n```bash\n如果采用RPM包安装，安装路径应在/usr/share/mysql目录下\nmysqldump文件位置：/usr/bin/mysqldump\nmysqli配置文件:\n/etc/my.cnf或/usr/share/mysql/my.cnf\nmysql数据目录在/var/lib/mysql目录下\n如果采用源代码安装，一般默认安装在/usr/local/mysql目录下\n```","source":"_posts/centos-install-LAMP-develop-env.md","raw":"---\ntitle: LAMP开发环境搭建[手记]\ndate: 2016-09-21 15:05:46\ntags: [centOS, Linux, LAMP, PHP, MySQL, Apache]\ncategories: write\n---\n## LAMP开发环境\n    硬件：VPS\n    系统环境：CentOS 6.5\n    \n## Apache安装\n```bash\n$ yum install httpd httpd-devel\n```\n控制台有提示y/n时，输入y回车等待安装完成即可。\n### 启动ApApache\n`/etc/init.d/httpd start`\n如果此时提示错误，像下图所示：\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/start-error.png)\n\n  【解决方案：\n     `vi /etc/httpd/conf/httpd.conf`\n\n     去掉 #注释，把domain改为localhost. (默认：www.example.com)\n\n将Apache设置为开机启动：\n`chkconfig httpd on`\n\n\n## MySQL安装\n```bash\n$  yum install mysql mysql-server mysql-devel\n```\n\n### 启动MySQL：\n`/etc/init.d/mysqld start`\n\n### 设置密码\n`mysql`\n\n`use mysql`\n\n`UPDATE user SET Password=PASSWORD('root') WHERE user='root';`\n\n以上方法设置MySQL的密码可能无效(本地机器远程连接此VPS的数据库时)\n\n\n方案2：\n\n登录此远程机器，执行MySQL安全配置：\n`mysql_secure_installation`\n\n如图：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-secure.png)\n\n接着按照控制台提示输入root密码；\n\n其它选项修改见以下截图配置，包括：匿名登录、是否允许从远端以root账户登录该数据库等。\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-other-settings.png)\n\n### 创建远程登录账户\n```bash\n$  CREATE USER '用户名'@'%' IDENTIFIED BY '密码';\n$  GRANT ALL PRIVILEGES ON *.* TO '用户名'@'%';\n```\n完成创建，即可远程以非root账户登录该数据库，访问其全县范围内的资源。\n\n\n\n## PHP安装\n```bash\n$  yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml \n```\n\n### Apache配置：\n\n配置Apache使其支持解析PHP类文件\n\n`vi /etc/httpd/conf/httpd.conf`\n\n如下图：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/apache-config-PHP.png)\n\n重启Apache：\n\n`/etc/init.d/httpd restart`\n\n\n### web/php默认文件目录修改\n\n`vi /etc/httpd/conf/httpd.conf`\n\n默认存放目录为：`/var/www/html` , 将httpd.conf文件中的该目录修改为自己需要的目录即可。\n\n给自己创建的文件目录加权：`chmod -R 755 路径`\n\n重启Apache。\n\n在自定义的目录下，创建PHP测试文件，以此来测试Apache是否可以正确加载并解释PHP。\n\n`cd 自定义目录`\n\n`touch phpinfo.php`\n\n`vim phpinfo.php`\n\n`<?php   phpinfo();  ?>`\n\n\n\n### 后记\n\nLAMP 常见安装路径\n\n#### Apache\n```bash\n如果采用RPM包安装，安装路径应在 /etc/httpd目录下\napache配置文件:/etc/httpd/conf/httpd.conf\nApache模块路径：/usr/sbin/apachectl\nweb目录:/var/www/html\n如果采用源代码安装，一般默认安装在/usr/local/apache2目录下\n```\n\n#### PHP\n```bash\n如果采用RPM包安装，安装路径应在 /etc/目录下\nphp的配置文件:/etc/php.ini\n如果采用源代码安装，一般默认安装在/usr/local/lib目录下\nphp配置文件: /usr/local/lib/php.ini\n或/usr/local/php/etc/php.ini\n\n```\n\n#### MySQL\n```bash\n如果采用RPM包安装，安装路径应在/usr/share/mysql目录下\nmysqldump文件位置：/usr/bin/mysqldump\nmysqli配置文件:\n/etc/my.cnf或/usr/share/mysql/my.cnf\nmysql数据目录在/var/lib/mysql目录下\n如果采用源代码安装，一般默认安装在/usr/local/mysql目录下\n```","slug":"centos-install-LAMP-develop-env","published":1,"updated":"2017-02-25T15:12:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fn6000beyqm2ftuhl2a","content":"<h2 id=\"LAMP开发环境\"><a href=\"#LAMP开发环境\" class=\"headerlink\" title=\"LAMP开发环境\"></a>LAMP开发环境</h2><pre><code>硬件：VPS\n系统环境：CentOS 6.5\n</code></pre><h2 id=\"Apache安装\"><a href=\"#Apache安装\" class=\"headerlink\" title=\"Apache安装\"></a>Apache安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install httpd httpd-devel</div></pre></td></tr></table></figure>\n<p>控制台有提示y/n时，输入y回车等待安装完成即可。</p>\n<h3 id=\"启动ApApache\"><a href=\"#启动ApApache\" class=\"headerlink\" title=\"启动ApApache\"></a>启动ApApache</h3><p><code>/etc/init.d/httpd start</code><br>如果此时提示错误，像下图所示：<br><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/start-error.png\" alt=\"img\"></p>\n<p>  【解决方案：<br>     <code>vi /etc/httpd/conf/httpd.conf</code></p>\n<pre><code>去掉 #注释，把domain改为localhost. (默认：www.example.com)\n</code></pre><p>将Apache设置为开机启动：<br><code>chkconfig httpd on</code></p>\n<h2 id=\"MySQL安装\"><a href=\"#MySQL安装\" class=\"headerlink\" title=\"MySQL安装\"></a>MySQL安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum install mysql mysql-server mysql-devel</div></pre></td></tr></table></figure>\n<h3 id=\"启动MySQL：\"><a href=\"#启动MySQL：\" class=\"headerlink\" title=\"启动MySQL：\"></a>启动MySQL：</h3><p><code>/etc/init.d/mysqld start</code></p>\n<h3 id=\"设置密码\"><a href=\"#设置密码\" class=\"headerlink\" title=\"设置密码\"></a>设置密码</h3><p><code>mysql</code></p>\n<p><code>use mysql</code></p>\n<p><code>UPDATE user SET Password=PASSWORD(&#39;root&#39;) WHERE user=&#39;root&#39;;</code></p>\n<p>以上方法设置MySQL的密码可能无效(本地机器远程连接此VPS的数据库时)</p>\n<p>方案2：</p>\n<p>登录此远程机器，执行MySQL安全配置：<br><code>mysql_secure_installation</code></p>\n<p>如图：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-secure.png\" alt=\"img\"></p>\n<p>接着按照控制台提示输入root密码；</p>\n<p>其它选项修改见以下截图配置，包括：匿名登录、是否允许从远端以root账户登录该数据库等。</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-other-settings.png\" alt=\"img\"></p>\n<h3 id=\"创建远程登录账户\"><a href=\"#创建远程登录账户\" class=\"headerlink\" title=\"创建远程登录账户\"></a>创建远程登录账户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  CREATE USER <span class=\"string\">'用户名'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'密码'</span>;</div><div class=\"line\">$  GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">'用户名'</span>@<span class=\"string\">'%'</span>;</div></pre></td></tr></table></figure>\n<p>完成创建，即可远程以非root账户登录该数据库，访问其全县范围内的资源。</p>\n<h2 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml</div></pre></td></tr></table></figure>\n<h3 id=\"Apache配置：\"><a href=\"#Apache配置：\" class=\"headerlink\" title=\"Apache配置：\"></a>Apache配置：</h3><p>配置Apache使其支持解析PHP类文件</p>\n<p><code>vi /etc/httpd/conf/httpd.conf</code></p>\n<p>如下图：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/apache-config-PHP.png\" alt=\"img\"></p>\n<p>重启Apache：</p>\n<p><code>/etc/init.d/httpd restart</code></p>\n<h3 id=\"web-php默认文件目录修改\"><a href=\"#web-php默认文件目录修改\" class=\"headerlink\" title=\"web/php默认文件目录修改\"></a>web/php默认文件目录修改</h3><p><code>vi /etc/httpd/conf/httpd.conf</code></p>\n<p>默认存放目录为：<code>/var/www/html</code> , 将httpd.conf文件中的该目录修改为自己需要的目录即可。</p>\n<p>给自己创建的文件目录加权：<code>chmod -R 755 路径</code></p>\n<p>重启Apache。</p>\n<p>在自定义的目录下，创建PHP测试文件，以此来测试Apache是否可以正确加载并解释PHP。</p>\n<p><code>cd 自定义目录</code></p>\n<p><code>touch phpinfo.php</code></p>\n<p><code>vim phpinfo.php</code></p>\n<p><code>&lt;?php   phpinfo();  ?&gt;</code></p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>LAMP 常见安装路径</p>\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果采用RPM包安装，安装路径应在 /etc/httpd目录下</div><div class=\"line\">apache配置文件:/etc/httpd/conf/httpd.conf</div><div class=\"line\">Apache模块路径：/usr/sbin/apachectl</div><div class=\"line\">web目录:/var/www/html</div><div class=\"line\">如果采用源代码安装，一般默认安装在/usr/<span class=\"built_in\">local</span>/apache2目录下</div></pre></td></tr></table></figure>\n<h4 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果采用RPM包安装，安装路径应在 /etc/目录下</div><div class=\"line\">php的配置文件:/etc/php.ini</div><div class=\"line\">如果采用源代码安装，一般默认安装在/usr/<span class=\"built_in\">local</span>/lib目录下</div><div class=\"line\">php配置文件: /usr/<span class=\"built_in\">local</span>/lib/php.ini</div><div class=\"line\">或/usr/<span class=\"built_in\">local</span>/php/etc/php.ini</div></pre></td></tr></table></figure>\n<h4 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果采用RPM包安装，安装路径应在/usr/share/mysql目录下</div><div class=\"line\">mysqldump文件位置：/usr/bin/mysqldump</div><div class=\"line\">mysqli配置文件:</div><div class=\"line\">/etc/my.cnf或/usr/share/mysql/my.cnf</div><div class=\"line\">mysql数据目录在/var/lib/mysql目录下</div><div class=\"line\">如果采用源代码安装，一般默认安装在/usr/<span class=\"built_in\">local</span>/mysql目录下</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"LAMP开发环境\"><a href=\"#LAMP开发环境\" class=\"headerlink\" title=\"LAMP开发环境\"></a>LAMP开发环境</h2><pre><code>硬件：VPS\n系统环境：CentOS 6.5\n</code></pre><h2 id=\"Apache安装\"><a href=\"#Apache安装\" class=\"headerlink\" title=\"Apache安装\"></a>Apache安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install httpd httpd-devel</div></pre></td></tr></table></figure>\n<p>控制台有提示y/n时，输入y回车等待安装完成即可。</p>\n<h3 id=\"启动ApApache\"><a href=\"#启动ApApache\" class=\"headerlink\" title=\"启动ApApache\"></a>启动ApApache</h3><p><code>/etc/init.d/httpd start</code><br>如果此时提示错误，像下图所示：<br><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/start-error.png\" alt=\"img\"></p>\n<p>  【解决方案：<br>     <code>vi /etc/httpd/conf/httpd.conf</code></p>\n<pre><code>去掉 #注释，把domain改为localhost. (默认：www.example.com)\n</code></pre><p>将Apache设置为开机启动：<br><code>chkconfig httpd on</code></p>\n<h2 id=\"MySQL安装\"><a href=\"#MySQL安装\" class=\"headerlink\" title=\"MySQL安装\"></a>MySQL安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum install mysql mysql-server mysql-devel</div></pre></td></tr></table></figure>\n<h3 id=\"启动MySQL：\"><a href=\"#启动MySQL：\" class=\"headerlink\" title=\"启动MySQL：\"></a>启动MySQL：</h3><p><code>/etc/init.d/mysqld start</code></p>\n<h3 id=\"设置密码\"><a href=\"#设置密码\" class=\"headerlink\" title=\"设置密码\"></a>设置密码</h3><p><code>mysql</code></p>\n<p><code>use mysql</code></p>\n<p><code>UPDATE user SET Password=PASSWORD(&#39;root&#39;) WHERE user=&#39;root&#39;;</code></p>\n<p>以上方法设置MySQL的密码可能无效(本地机器远程连接此VPS的数据库时)</p>\n<p>方案2：</p>\n<p>登录此远程机器，执行MySQL安全配置：<br><code>mysql_secure_installation</code></p>\n<p>如图：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-secure.png\" alt=\"img\"></p>\n<p>接着按照控制台提示输入root密码；</p>\n<p>其它选项修改见以下截图配置，包括：匿名登录、是否允许从远端以root账户登录该数据库等。</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-other-settings.png\" alt=\"img\"></p>\n<h3 id=\"创建远程登录账户\"><a href=\"#创建远程登录账户\" class=\"headerlink\" title=\"创建远程登录账户\"></a>创建远程登录账户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  CREATE USER <span class=\"string\">'用户名'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'密码'</span>;</div><div class=\"line\">$  GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">'用户名'</span>@<span class=\"string\">'%'</span>;</div></pre></td></tr></table></figure>\n<p>完成创建，即可远程以非root账户登录该数据库，访问其全县范围内的资源。</p>\n<h2 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml</div></pre></td></tr></table></figure>\n<h3 id=\"Apache配置：\"><a href=\"#Apache配置：\" class=\"headerlink\" title=\"Apache配置：\"></a>Apache配置：</h3><p>配置Apache使其支持解析PHP类文件</p>\n<p><code>vi /etc/httpd/conf/httpd.conf</code></p>\n<p>如下图：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/apache-config-PHP.png\" alt=\"img\"></p>\n<p>重启Apache：</p>\n<p><code>/etc/init.d/httpd restart</code></p>\n<h3 id=\"web-php默认文件目录修改\"><a href=\"#web-php默认文件目录修改\" class=\"headerlink\" title=\"web/php默认文件目录修改\"></a>web/php默认文件目录修改</h3><p><code>vi /etc/httpd/conf/httpd.conf</code></p>\n<p>默认存放目录为：<code>/var/www/html</code> , 将httpd.conf文件中的该目录修改为自己需要的目录即可。</p>\n<p>给自己创建的文件目录加权：<code>chmod -R 755 路径</code></p>\n<p>重启Apache。</p>\n<p>在自定义的目录下，创建PHP测试文件，以此来测试Apache是否可以正确加载并解释PHP。</p>\n<p><code>cd 自定义目录</code></p>\n<p><code>touch phpinfo.php</code></p>\n<p><code>vim phpinfo.php</code></p>\n<p><code>&lt;?php   phpinfo();  ?&gt;</code></p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>LAMP 常见安装路径</p>\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果采用RPM包安装，安装路径应在 /etc/httpd目录下</div><div class=\"line\">apache配置文件:/etc/httpd/conf/httpd.conf</div><div class=\"line\">Apache模块路径：/usr/sbin/apachectl</div><div class=\"line\">web目录:/var/www/html</div><div class=\"line\">如果采用源代码安装，一般默认安装在/usr/<span class=\"built_in\">local</span>/apache2目录下</div></pre></td></tr></table></figure>\n<h4 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果采用RPM包安装，安装路径应在 /etc/目录下</div><div class=\"line\">php的配置文件:/etc/php.ini</div><div class=\"line\">如果采用源代码安装，一般默认安装在/usr/<span class=\"built_in\">local</span>/lib目录下</div><div class=\"line\">php配置文件: /usr/<span class=\"built_in\">local</span>/lib/php.ini</div><div class=\"line\">或/usr/<span class=\"built_in\">local</span>/php/etc/php.ini</div></pre></td></tr></table></figure>\n<h4 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果采用RPM包安装，安装路径应在/usr/share/mysql目录下</div><div class=\"line\">mysqldump文件位置：/usr/bin/mysqldump</div><div class=\"line\">mysqli配置文件:</div><div class=\"line\">/etc/my.cnf或/usr/share/mysql/my.cnf</div><div class=\"line\">mysql数据目录在/var/lib/mysql目录下</div><div class=\"line\">如果采用源代码安装，一般默认安装在/usr/<span class=\"built_in\">local</span>/mysql目录下</div></pre></td></tr></table></figure>"},{"title":"CentOS 6.5 安装FTP","date":"2016-12-21T04:33:02.000Z","description":"CentOS安装FTP及其基本配置","_content":"记录下在CentOS 6.5上安装FTP的过程及其注意事项.\n\n## Install FTP\n```bash\n$  yum -y install ftp vsftpd  #yum安装ftp vsftpd\n$  rpm -qa|grep ftp  #检查是否安装成功\n$  chkconfig vsftpd on  #设其为开机启动\n$  rpm -qc vsftpd  #查看配置文件所在路径\n$  vi /etc/sysconfig/iptables #修改防火墙\n##  -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n## 添加该记录到iptables文件.\n##  esc -> wq -> enter回车保存退出.\n$  service vsftpd restart #更新FTP服务\n```\n### 匿名用户处理\n禁止其登陆.\n    `vi /etc/vsftpd/vsftpd.conf`\n    `(INSERT)anonymous_enable=YES 改为 anonymous_enable=NO`\n\t保存退出.\n\t\n###  添加远程登录用户\n\n例如：\n\t   在root组中加入一个htmler账户用来ftp到/var/www/html并给它添加密码\n\n```bash\n->useradd -g root -M -d /var/www/html -s /sbin/nologin lomo\n->passwd lomo\n->输入密码\n\n```\n重启服务，`service vsftpd restart`, 即可远程访问FTP资源. \nURL like： ftp://lomo.space  或 ftp://127.0.0.1\n\n### 常用命令\n```bash \n启动vsftpd:  service vsftpd start\n停止vsftpd:  service vsftpd stop\n重启vsftpd:  service vsftpd restart\n```\n\n### 常见问题\n1. 上传文件：553 Could not create file？\n    解决方案：\n        `getsebool -a|grep ftp`\n    查看：\n        `ftpd_disable_trans ftp_home_dir allow_ftpd_full_access` \n        是否为on, 不是则修改为on.\n        \n2. 其它修改：\n    `setsebool allow_ftpd_full_access 1`\n    `setsebool allow_ftpd_use_cifs 1`\n    `setsebool allow_ftpd_use_nfs 1`\n    `setsebool ftp_home_dir 1`\n    `setsebool httpd_enable_ftp_server 1`\n    `setsebool tftp_anon_write 1`\n    最后：\n    `service vsftpd restart`\n查看修改是否生效：\n    `getsebool -a|grep ftp`\n若还是Fail,则\n`vi /etc/vsftpd/vsftpd.conf\n`\n添加：\n`local_root=/data`\n\nkill -9 +进程ID，杀死进程，重启服务.\n\n3.  getsebool:  SELinux is disabled ？\n    `vi /etc/selinux/config`\n    `SELINUX=1`\n    `reboot`\n\n\nReference:\n    http://www.111cn.net/sys/linux/45542.htm\n    \n\n\n","source":"_posts/centos-install-ftp.md","raw":"---\ntitle: CentOS 6.5 安装FTP\ndate: 2016-12-21 12:33:02\ntags: [CentOS,FTP]\ncategories: study\ndescription: CentOS安装FTP及其基本配置\n---\n记录下在CentOS 6.5上安装FTP的过程及其注意事项.\n\n## Install FTP\n```bash\n$  yum -y install ftp vsftpd  #yum安装ftp vsftpd\n$  rpm -qa|grep ftp  #检查是否安装成功\n$  chkconfig vsftpd on  #设其为开机启动\n$  rpm -qc vsftpd  #查看配置文件所在路径\n$  vi /etc/sysconfig/iptables #修改防火墙\n##  -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n## 添加该记录到iptables文件.\n##  esc -> wq -> enter回车保存退出.\n$  service vsftpd restart #更新FTP服务\n```\n### 匿名用户处理\n禁止其登陆.\n    `vi /etc/vsftpd/vsftpd.conf`\n    `(INSERT)anonymous_enable=YES 改为 anonymous_enable=NO`\n\t保存退出.\n\t\n###  添加远程登录用户\n\n例如：\n\t   在root组中加入一个htmler账户用来ftp到/var/www/html并给它添加密码\n\n```bash\n->useradd -g root -M -d /var/www/html -s /sbin/nologin lomo\n->passwd lomo\n->输入密码\n\n```\n重启服务，`service vsftpd restart`, 即可远程访问FTP资源. \nURL like： ftp://lomo.space  或 ftp://127.0.0.1\n\n### 常用命令\n```bash \n启动vsftpd:  service vsftpd start\n停止vsftpd:  service vsftpd stop\n重启vsftpd:  service vsftpd restart\n```\n\n### 常见问题\n1. 上传文件：553 Could not create file？\n    解决方案：\n        `getsebool -a|grep ftp`\n    查看：\n        `ftpd_disable_trans ftp_home_dir allow_ftpd_full_access` \n        是否为on, 不是则修改为on.\n        \n2. 其它修改：\n    `setsebool allow_ftpd_full_access 1`\n    `setsebool allow_ftpd_use_cifs 1`\n    `setsebool allow_ftpd_use_nfs 1`\n    `setsebool ftp_home_dir 1`\n    `setsebool httpd_enable_ftp_server 1`\n    `setsebool tftp_anon_write 1`\n    最后：\n    `service vsftpd restart`\n查看修改是否生效：\n    `getsebool -a|grep ftp`\n若还是Fail,则\n`vi /etc/vsftpd/vsftpd.conf\n`\n添加：\n`local_root=/data`\n\nkill -9 +进程ID，杀死进程，重启服务.\n\n3.  getsebool:  SELinux is disabled ？\n    `vi /etc/selinux/config`\n    `SELINUX=1`\n    `reboot`\n\n\nReference:\n    http://www.111cn.net/sys/linux/45542.htm\n    \n\n\n","slug":"centos-install-ftp","published":1,"updated":"2017-03-15T12:00:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fna000feyqmjwze82l7","content":"<p>记录下在CentOS 6.5上安装FTP的过程及其注意事项.</p>\n<h2 id=\"Install-FTP\"><a href=\"#Install-FTP\" class=\"headerlink\" title=\"Install FTP\"></a>Install FTP</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum -y install ftp vsftpd  <span class=\"comment\">#yum安装ftp vsftpd</span></div><div class=\"line\">$  rpm -qa|grep ftp  <span class=\"comment\">#检查是否安装成功</span></div><div class=\"line\">$  chkconfig vsftpd on  <span class=\"comment\">#设其为开机启动</span></div><div class=\"line\">$  rpm -qc vsftpd  <span class=\"comment\">#查看配置文件所在路径</span></div><div class=\"line\">$  vi /etc/sysconfig/iptables <span class=\"comment\">#修改防火墙</span></div><div class=\"line\"><span class=\"comment\">##  -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT</span></div><div class=\"line\"><span class=\"comment\">## 添加该记录到iptables文件.</span></div><div class=\"line\"><span class=\"comment\">##  esc -&gt; wq -&gt; enter回车保存退出.</span></div><div class=\"line\">$  service vsftpd restart <span class=\"comment\">#更新FTP服务</span></div></pre></td></tr></table></figure>\n<h3 id=\"匿名用户处理\"><a href=\"#匿名用户处理\" class=\"headerlink\" title=\"匿名用户处理\"></a>匿名用户处理</h3><p>禁止其登陆.<br>    <code>vi /etc/vsftpd/vsftpd.conf</code><br>    <code>(INSERT)anonymous_enable=YES 改为 anonymous_enable=NO</code><br>    保存退出.</p>\n<h3 id=\"添加远程登录用户\"><a href=\"#添加远程登录用户\" class=\"headerlink\" title=\"添加远程登录用户\"></a>添加远程登录用户</h3><p>例如：<br>       在root组中加入一个htmler账户用来ftp到/var/www/html并给它添加密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-&gt;useradd -g root -M <span class=\"_\">-d</span> /var/www/html <span class=\"_\">-s</span> /sbin/nologin lomo</div><div class=\"line\">-&gt;passwd lomo</div><div class=\"line\">-&gt;输入密码</div></pre></td></tr></table></figure>\n<p>重启服务，<code>service vsftpd restart</code>, 即可远程访问FTP资源.<br>URL like： ftp://lomo.space  或 ftp://127.0.0.1</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动vsftpd:  service vsftpd start</div><div class=\"line\">停止vsftpd:  service vsftpd stop</div><div class=\"line\">重启vsftpd:  service vsftpd restart</div></pre></td></tr></table></figure>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ol>\n<li><p>上传文件：553 Could not create file？<br> 解决方案：</p>\n<pre><code>`getsebool -a|grep ftp`\n</code></pre><p> 查看：</p>\n<pre><code>`ftpd_disable_trans ftp_home_dir allow_ftpd_full_access` \n是否为on, 不是则修改为on.\n</code></pre></li>\n<li><p>其它修改：<br> <code>setsebool allow_ftpd_full_access 1</code><br> <code>setsebool allow_ftpd_use_cifs 1</code><br> <code>setsebool allow_ftpd_use_nfs 1</code><br> <code>setsebool ftp_home_dir 1</code><br> <code>setsebool httpd_enable_ftp_server 1</code><br> <code>setsebool tftp_anon_write 1</code><br> 最后：<br> <code>service vsftpd restart</code><br>查看修改是否生效：<br> <code>getsebool -a|grep ftp</code><br>若还是Fail,则<br><code>vi /etc/vsftpd/vsftpd.conf</code><br>添加：<br><code>local_root=/data</code></p>\n</li>\n</ol>\n<p>kill -9 +进程ID，杀死进程，重启服务.</p>\n<ol>\n<li>getsebool:  SELinux is disabled ？<br><code>vi /etc/selinux/config</code><br><code>SELINUX=1</code><br><code>reboot</code></li>\n</ol>\n<p>Reference:<br>    <a href=\"http://www.111cn.net/sys/linux/45542.htm\" target=\"_blank\" rel=\"external\">http://www.111cn.net/sys/linux/45542.htm</a></p>\n","excerpt":"","more":"<p>记录下在CentOS 6.5上安装FTP的过程及其注意事项.</p>\n<h2 id=\"Install-FTP\"><a href=\"#Install-FTP\" class=\"headerlink\" title=\"Install FTP\"></a>Install FTP</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum -y install ftp vsftpd  <span class=\"comment\">#yum安装ftp vsftpd</span></div><div class=\"line\">$  rpm -qa|grep ftp  <span class=\"comment\">#检查是否安装成功</span></div><div class=\"line\">$  chkconfig vsftpd on  <span class=\"comment\">#设其为开机启动</span></div><div class=\"line\">$  rpm -qc vsftpd  <span class=\"comment\">#查看配置文件所在路径</span></div><div class=\"line\">$  vi /etc/sysconfig/iptables <span class=\"comment\">#修改防火墙</span></div><div class=\"line\"><span class=\"comment\">##  -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT</span></div><div class=\"line\"><span class=\"comment\">## 添加该记录到iptables文件.</span></div><div class=\"line\"><span class=\"comment\">##  esc -&gt; wq -&gt; enter回车保存退出.</span></div><div class=\"line\">$  service vsftpd restart <span class=\"comment\">#更新FTP服务</span></div></pre></td></tr></table></figure>\n<h3 id=\"匿名用户处理\"><a href=\"#匿名用户处理\" class=\"headerlink\" title=\"匿名用户处理\"></a>匿名用户处理</h3><p>禁止其登陆.<br>    <code>vi /etc/vsftpd/vsftpd.conf</code><br>    <code>(INSERT)anonymous_enable=YES 改为 anonymous_enable=NO</code><br>    保存退出.</p>\n<h3 id=\"添加远程登录用户\"><a href=\"#添加远程登录用户\" class=\"headerlink\" title=\"添加远程登录用户\"></a>添加远程登录用户</h3><p>例如：<br>       在root组中加入一个htmler账户用来ftp到/var/www/html并给它添加密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-&gt;useradd -g root -M <span class=\"_\">-d</span> /var/www/html <span class=\"_\">-s</span> /sbin/nologin lomo</div><div class=\"line\">-&gt;passwd lomo</div><div class=\"line\">-&gt;输入密码</div></pre></td></tr></table></figure>\n<p>重启服务，<code>service vsftpd restart</code>, 即可远程访问FTP资源.<br>URL like： ftp://lomo.space  或 ftp://127.0.0.1</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动vsftpd:  service vsftpd start</div><div class=\"line\">停止vsftpd:  service vsftpd stop</div><div class=\"line\">重启vsftpd:  service vsftpd restart</div></pre></td></tr></table></figure>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ol>\n<li><p>上传文件：553 Could not create file？<br> 解决方案：</p>\n<pre><code>`getsebool -a|grep ftp`\n</code></pre><p> 查看：</p>\n<pre><code>`ftpd_disable_trans ftp_home_dir allow_ftpd_full_access` \n是否为on, 不是则修改为on.\n</code></pre></li>\n<li><p>其它修改：<br> <code>setsebool allow_ftpd_full_access 1</code><br> <code>setsebool allow_ftpd_use_cifs 1</code><br> <code>setsebool allow_ftpd_use_nfs 1</code><br> <code>setsebool ftp_home_dir 1</code><br> <code>setsebool httpd_enable_ftp_server 1</code><br> <code>setsebool tftp_anon_write 1</code><br> 最后：<br> <code>service vsftpd restart</code><br>查看修改是否生效：<br> <code>getsebool -a|grep ftp</code><br>若还是Fail,则<br><code>vi /etc/vsftpd/vsftpd.conf</code><br>添加：<br><code>local_root=/data</code></p>\n</li>\n</ol>\n<p>kill -9 +进程ID，杀死进程，重启服务.</p>\n<ol>\n<li>getsebool:  SELinux is disabled ？<br><code>vi /etc/selinux/config</code><br><code>SELINUX=1</code><br><code>reboot</code></li>\n</ol>\n<p>Reference:<br>    <a href=\"http://www.111cn.net/sys/linux/45542.htm\">http://www.111cn.net/sys/linux/45542.htm</a></p>\n"},{"title":"centos upgrade mysql to 5.7","date":"2016-11-09T05:07:20.000Z","_content":"\n## CentOS升级LAMP之MySQL至5.7\n\n### 清理、卸载旧版MySQL\n```bash\n$  yum list installed | grep mysql\t\n$  yum -y remove mysql *\n```\n\n### 添加CentOS的RPM源\n```bash\n# wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm\n# yum localinstall mysql-community-release-el6-5.noarch.rpm\n# yum repolist all | grep mysql\n# yum-config-manager --disable mysql55-community\n# yum-config-manager --disable mysql56-community\n# yum-config-manager --enable mysql57-community-dmr\n# yum repolist enabled | grep mysql\n```\n\n### 检查MySQL源安装是否成功\n```bash\n$  yum repolist enabled | grep \"mysql.*-community.*\"\n```\n\n### 安装MySQL\n```bash\n$  yum install mysql-community-server\n```\n安装完后会获得一个初始密码，先记下此密码，后边用。\n\n或直接查询安装完成后生成的零时密码：\n\n`grep 'temporary password' /var/log/mysqld.log`\n\n或 使用 mysql_secure_installation 进行安全设置 修改/充值 root 密码\n\n\n### 启动\n```bash\n$  service mysqld start\n```\n\n### 设置自启动\n```bash\n$  chkconfig --list | grep mysqld  ##查看是否自启动\n$  chkconfig mysqld on\n```\n\n### ROOT账户相关\n\nmysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误。\n\n### 密码设定策略\n```bash\n$  show variables like '%password%';\n```\n\n### 添加远程登录MySQL用户\n\n参考上一篇文章，同初次安装时的设定。\n\n### 修改默认编码\n\nMySQL更新升级完后，需要修改默认编码方式。\n\n```bash\n$  show variables like \"%character%\";\n```\n\n如图：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-default-character.png)\n\n接着，\n\n`vi /etc/my.cnf`\n\n在[mysqld] 下添加：\n\n```bash\n  character_set_server=utf8 \n  init_connect='SET NAMES utf8'\n```\n\n然后重启MySQL服务:\n\n`service mysqld restart`\n\n再次查看默认编码，已改为utf-8，如下图：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-character-modified.png)\n","source":"_posts/centos-upgrade-mysql-to-5-7.md","raw":"---\ntitle: centos upgrade mysql to 5.7\ndate: 2016-11-09 13:07:20\ntags: [MySQL, upgrade, CentOS]\ncategories: essay\n---\n\n## CentOS升级LAMP之MySQL至5.7\n\n### 清理、卸载旧版MySQL\n```bash\n$  yum list installed | grep mysql\t\n$  yum -y remove mysql *\n```\n\n### 添加CentOS的RPM源\n```bash\n# wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm\n# yum localinstall mysql-community-release-el6-5.noarch.rpm\n# yum repolist all | grep mysql\n# yum-config-manager --disable mysql55-community\n# yum-config-manager --disable mysql56-community\n# yum-config-manager --enable mysql57-community-dmr\n# yum repolist enabled | grep mysql\n```\n\n### 检查MySQL源安装是否成功\n```bash\n$  yum repolist enabled | grep \"mysql.*-community.*\"\n```\n\n### 安装MySQL\n```bash\n$  yum install mysql-community-server\n```\n安装完后会获得一个初始密码，先记下此密码，后边用。\n\n或直接查询安装完成后生成的零时密码：\n\n`grep 'temporary password' /var/log/mysqld.log`\n\n或 使用 mysql_secure_installation 进行安全设置 修改/充值 root 密码\n\n\n### 启动\n```bash\n$  service mysqld start\n```\n\n### 设置自启动\n```bash\n$  chkconfig --list | grep mysqld  ##查看是否自启动\n$  chkconfig mysqld on\n```\n\n### ROOT账户相关\n\nmysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误。\n\n### 密码设定策略\n```bash\n$  show variables like '%password%';\n```\n\n### 添加远程登录MySQL用户\n\n参考上一篇文章，同初次安装时的设定。\n\n### 修改默认编码\n\nMySQL更新升级完后，需要修改默认编码方式。\n\n```bash\n$  show variables like \"%character%\";\n```\n\n如图：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-default-character.png)\n\n接着，\n\n`vi /etc/my.cnf`\n\n在[mysqld] 下添加：\n\n```bash\n  character_set_server=utf8 \n  init_connect='SET NAMES utf8'\n```\n\n然后重启MySQL服务:\n\n`service mysqld restart`\n\n再次查看默认编码，已改为utf-8，如下图：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-character-modified.png)\n","slug":"centos-upgrade-mysql-to-5-7","published":1,"updated":"2017-02-25T15:29:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fni000heyqmqjkthh69","content":"<h2 id=\"CentOS升级LAMP之MySQL至5-7\"><a href=\"#CentOS升级LAMP之MySQL至5-7\" class=\"headerlink\" title=\"CentOS升级LAMP之MySQL至5.7\"></a>CentOS升级LAMP之MySQL至5.7</h2><h3 id=\"清理、卸载旧版MySQL\"><a href=\"#清理、卸载旧版MySQL\" class=\"headerlink\" title=\"清理、卸载旧版MySQL\"></a>清理、卸载旧版MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum list installed | grep mysql\t</div><div class=\"line\">$  yum -y remove mysql *</div></pre></td></tr></table></figure>\n<h3 id=\"添加CentOS的RPM源\"><a href=\"#添加CentOS的RPM源\" class=\"headerlink\" title=\"添加CentOS的RPM源\"></a>添加CentOS的RPM源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span></div><div class=\"line\"><span class=\"comment\"># yum localinstall mysql-community-release-el6-5.noarch.rpm</span></div><div class=\"line\"><span class=\"comment\"># yum repolist all | grep mysql</span></div><div class=\"line\"><span class=\"comment\"># yum-config-manager --disable mysql55-community</span></div><div class=\"line\"><span class=\"comment\"># yum-config-manager --disable mysql56-community</span></div><div class=\"line\"><span class=\"comment\"># yum-config-manager --enable mysql57-community-dmr</span></div><div class=\"line\"><span class=\"comment\"># yum repolist enabled | grep mysql</span></div></pre></td></tr></table></figure>\n<h3 id=\"检查MySQL源安装是否成功\"><a href=\"#检查MySQL源安装是否成功\" class=\"headerlink\" title=\"检查MySQL源安装是否成功\"></a>检查MySQL源安装是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum repolist enabled | grep <span class=\"string\">\"mysql.*-community.*\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum install mysql-community-server</div></pre></td></tr></table></figure>\n<p>安装完后会获得一个初始密码，先记下此密码，后边用。</p>\n<p>或直接查询安装完成后生成的零时密码：</p>\n<p><code>grep &#39;temporary password&#39; /var/log/mysqld.log</code></p>\n<p>或 使用 mysql_secure_installation 进行安全设置 修改/充值 root 密码</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  service mysqld start</div></pre></td></tr></table></figure>\n<h3 id=\"设置自启动\"><a href=\"#设置自启动\" class=\"headerlink\" title=\"设置自启动\"></a>设置自启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  chkconfig --list | grep mysqld  <span class=\"comment\">##查看是否自启动</span></div><div class=\"line\">$  chkconfig mysqld on</div></pre></td></tr></table></figure>\n<h3 id=\"ROOT账户相关\"><a href=\"#ROOT账户相关\" class=\"headerlink\" title=\"ROOT账户相关\"></a>ROOT账户相关</h3><p>mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误。</p>\n<h3 id=\"密码设定策略\"><a href=\"#密码设定策略\" class=\"headerlink\" title=\"密码设定策略\"></a>密码设定策略</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  show variables like <span class=\"string\">'%password%'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"添加远程登录MySQL用户\"><a href=\"#添加远程登录MySQL用户\" class=\"headerlink\" title=\"添加远程登录MySQL用户\"></a>添加远程登录MySQL用户</h3><p>参考上一篇文章，同初次安装时的设定。</p>\n<h3 id=\"修改默认编码\"><a href=\"#修改默认编码\" class=\"headerlink\" title=\"修改默认编码\"></a>修改默认编码</h3><p>MySQL更新升级完后，需要修改默认编码方式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  show variables like <span class=\"string\">\"%character%\"</span>;</div></pre></td></tr></table></figure>\n<p>如图：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-default-character.png\" alt=\"img\"></p>\n<p>接着，</p>\n<p><code>vi /etc/my.cnf</code></p>\n<p>在[mysqld] 下添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">character_set_server=utf8 </div><div class=\"line\">init_connect=<span class=\"string\">'SET NAMES utf8'</span></div></pre></td></tr></table></figure>\n<p>然后重启MySQL服务:</p>\n<p><code>service mysqld restart</code></p>\n<p>再次查看默认编码，已改为utf-8，如下图：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-character-modified.png\" alt=\"img\"></p>\n","excerpt":"","more":"<h2 id=\"CentOS升级LAMP之MySQL至5-7\"><a href=\"#CentOS升级LAMP之MySQL至5-7\" class=\"headerlink\" title=\"CentOS升级LAMP之MySQL至5.7\"></a>CentOS升级LAMP之MySQL至5.7</h2><h3 id=\"清理、卸载旧版MySQL\"><a href=\"#清理、卸载旧版MySQL\" class=\"headerlink\" title=\"清理、卸载旧版MySQL\"></a>清理、卸载旧版MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum list installed | grep mysql\t</div><div class=\"line\">$  yum -y remove mysql *</div></pre></td></tr></table></figure>\n<h3 id=\"添加CentOS的RPM源\"><a href=\"#添加CentOS的RPM源\" class=\"headerlink\" title=\"添加CentOS的RPM源\"></a>添加CentOS的RPM源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span></div><div class=\"line\"><span class=\"comment\"># yum localinstall mysql-community-release-el6-5.noarch.rpm</span></div><div class=\"line\"><span class=\"comment\"># yum repolist all | grep mysql</span></div><div class=\"line\"><span class=\"comment\"># yum-config-manager --disable mysql55-community</span></div><div class=\"line\"><span class=\"comment\"># yum-config-manager --disable mysql56-community</span></div><div class=\"line\"><span class=\"comment\"># yum-config-manager --enable mysql57-community-dmr</span></div><div class=\"line\"><span class=\"comment\"># yum repolist enabled | grep mysql</span></div></pre></td></tr></table></figure>\n<h3 id=\"检查MySQL源安装是否成功\"><a href=\"#检查MySQL源安装是否成功\" class=\"headerlink\" title=\"检查MySQL源安装是否成功\"></a>检查MySQL源安装是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum repolist enabled | grep <span class=\"string\">\"mysql.*-community.*\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum install mysql-community-server</div></pre></td></tr></table></figure>\n<p>安装完后会获得一个初始密码，先记下此密码，后边用。</p>\n<p>或直接查询安装完成后生成的零时密码：</p>\n<p><code>grep &#39;temporary password&#39; /var/log/mysqld.log</code></p>\n<p>或 使用 mysql_secure_installation 进行安全设置 修改/充值 root 密码</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  service mysqld start</div></pre></td></tr></table></figure>\n<h3 id=\"设置自启动\"><a href=\"#设置自启动\" class=\"headerlink\" title=\"设置自启动\"></a>设置自启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  chkconfig --list | grep mysqld  <span class=\"comment\">##查看是否自启动</span></div><div class=\"line\">$  chkconfig mysqld on</div></pre></td></tr></table></figure>\n<h3 id=\"ROOT账户相关\"><a href=\"#ROOT账户相关\" class=\"headerlink\" title=\"ROOT账户相关\"></a>ROOT账户相关</h3><p>mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误。</p>\n<h3 id=\"密码设定策略\"><a href=\"#密码设定策略\" class=\"headerlink\" title=\"密码设定策略\"></a>密码设定策略</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  show variables like <span class=\"string\">'%password%'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"添加远程登录MySQL用户\"><a href=\"#添加远程登录MySQL用户\" class=\"headerlink\" title=\"添加远程登录MySQL用户\"></a>添加远程登录MySQL用户</h3><p>参考上一篇文章，同初次安装时的设定。</p>\n<h3 id=\"修改默认编码\"><a href=\"#修改默认编码\" class=\"headerlink\" title=\"修改默认编码\"></a>修改默认编码</h3><p>MySQL更新升级完后，需要修改默认编码方式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  show variables like <span class=\"string\">\"%character%\"</span>;</div></pre></td></tr></table></figure>\n<p>如图：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-default-character.png\" alt=\"img\"></p>\n<p>接着，</p>\n<p><code>vi /etc/my.cnf</code></p>\n<p>在[mysqld] 下添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">character_set_server=utf8 </div><div class=\"line\">init_connect=<span class=\"string\">'SET NAMES utf8'</span></div></pre></td></tr></table></figure>\n<p>然后重启MySQL服务:</p>\n<p><code>service mysqld restart</code></p>\n<p>再次查看默认编码，已改为utf-8，如下图：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-character-modified.png\" alt=\"img\"></p>\n"},{"title":"centos upgrade php","date":"2016-10-25T01:32:14.000Z","_content":"\n## CentOS 升级PHP\n\n### 卸载、删除旧依赖\n\n  1. 查看系统版本，方便后边选择对应的包\n\n    `lsb_release -a`\n\n  2. 停止服务\n\n    `service httpd stop`\n\n  3. 卸载安装包\n\n    `看图⬇`\n\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/uninstall-old-php.png)\n\n    删除依赖\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/rpm-dependencies.png)\n\n    删除一些其它相关包\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/delete-others.png)\n\n### 更新安装源\n\n```bash\n\tCentos 5.X：\n\t\trpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm\n\tCentOs 6.x\n\t\t rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm\n\tCentOs 7.X\n\t\trpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm\n\t\trpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n\n```\n\n### 安装制定版本PHP\n\n```bash\n ##5.5版本PHP\n  yum install php55w.x86_64 php55w-cli.x86_64 php55w-common.x86_64 php55w-gd.x86_64 php55w-ldap.x86_64 php55w-mbstring.x86_64 php55w-mcrypt.x86_64 php55w-mysql.x86_64 php55w-pdo.x86_64\n ##5.6版本PHP\n  yum install php56w.x86_64 php56w-cli.x86_64 php56w-common.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64\n ##7.0版本PHP\n  yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64\n```\n\n### 安装FPM\n```bash\n ## 选择对应版本即可\n \tyum install php55w-fpm \n\tyum install php56w-fpm \n    yum install php70w-fpm\n```\n\n\n","source":"_posts/centos-upgrade-php.md","raw":"---\ntitle: centos upgrade php\ndate: 2016-10-25 09:32:14\ntags: [CentOS, PHP]\ncategories: read\n---\n\n## CentOS 升级PHP\n\n### 卸载、删除旧依赖\n\n  1. 查看系统版本，方便后边选择对应的包\n\n    `lsb_release -a`\n\n  2. 停止服务\n\n    `service httpd stop`\n\n  3. 卸载安装包\n\n    `看图⬇`\n\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/uninstall-old-php.png)\n\n    删除依赖\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/rpm-dependencies.png)\n\n    删除一些其它相关包\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/delete-others.png)\n\n### 更新安装源\n\n```bash\n\tCentos 5.X：\n\t\trpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm\n\tCentOs 6.x\n\t\t rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm\n\tCentOs 7.X\n\t\trpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm\n\t\trpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n\n```\n\n### 安装制定版本PHP\n\n```bash\n ##5.5版本PHP\n  yum install php55w.x86_64 php55w-cli.x86_64 php55w-common.x86_64 php55w-gd.x86_64 php55w-ldap.x86_64 php55w-mbstring.x86_64 php55w-mcrypt.x86_64 php55w-mysql.x86_64 php55w-pdo.x86_64\n ##5.6版本PHP\n  yum install php56w.x86_64 php56w-cli.x86_64 php56w-common.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64\n ##7.0版本PHP\n  yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64\n```\n\n### 安装FPM\n```bash\n ## 选择对应版本即可\n \tyum install php55w-fpm \n\tyum install php56w-fpm \n    yum install php70w-fpm\n```\n\n\n","slug":"centos-upgrade-php","published":1,"updated":"2017-02-25T15:08:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fnr000keyqmdr7jqi0h","content":"<h2 id=\"CentOS-升级PHP\"><a href=\"#CentOS-升级PHP\" class=\"headerlink\" title=\"CentOS 升级PHP\"></a>CentOS 升级PHP</h2><h3 id=\"卸载、删除旧依赖\"><a href=\"#卸载、删除旧依赖\" class=\"headerlink\" title=\"卸载、删除旧依赖\"></a>卸载、删除旧依赖</h3><ol>\n<li><p>查看系统版本，方便后边选择对应的包</p>\n<p><code>lsb_release -a</code></p>\n</li>\n<li><p>停止服务</p>\n<p><code>service httpd stop</code></p>\n</li>\n<li><p>卸载安装包</p>\n<p><code>看图⬇</code></p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/uninstall-old-php.png\" alt=\"img\"></p>\n<p>删除依赖<br><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/rpm-dependencies.png\" alt=\"img\"></p>\n<p>删除一些其它相关包<br><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/delete-others.png\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"更新安装源\"><a href=\"#更新安装源\" class=\"headerlink\" title=\"更新安装源\"></a>更新安装源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos 5.X：</div><div class=\"line\">\trpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm</div><div class=\"line\">CentOs 6.x</div><div class=\"line\">\t rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm</div><div class=\"line\">CentOs 7.X</div><div class=\"line\">\trpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</div><div class=\"line\">\trpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</div></pre></td></tr></table></figure>\n<h3 id=\"安装制定版本PHP\"><a href=\"#安装制定版本PHP\" class=\"headerlink\" title=\"安装制定版本PHP\"></a>安装制定版本PHP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">##5.5版本PHP</span></div><div class=\"line\"> yum install php55w.x86_64 php55w-cli.x86_64 php55w-common.x86_64 php55w-gd.x86_64 php55w-ldap.x86_64 php55w-mbstring.x86_64 php55w-mcrypt.x86_64 php55w-mysql.x86_64 php55w-pdo.x86_64</div><div class=\"line\"><span class=\"comment\">##5.6版本PHP</span></div><div class=\"line\"> yum install php56w.x86_64 php56w-cli.x86_64 php56w-common.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64</div><div class=\"line\"><span class=\"comment\">##7.0版本PHP</span></div><div class=\"line\"> yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64</div></pre></td></tr></table></figure>\n<h3 id=\"安装FPM\"><a href=\"#安装FPM\" class=\"headerlink\" title=\"安装FPM\"></a>安装FPM</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## 选择对应版本即可</span></div><div class=\"line\">\tyum install php55w-fpm </div><div class=\"line\">yum install php56w-fpm </div><div class=\"line\">   yum install php70w-fpm</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"CentOS-升级PHP\"><a href=\"#CentOS-升级PHP\" class=\"headerlink\" title=\"CentOS 升级PHP\"></a>CentOS 升级PHP</h2><h3 id=\"卸载、删除旧依赖\"><a href=\"#卸载、删除旧依赖\" class=\"headerlink\" title=\"卸载、删除旧依赖\"></a>卸载、删除旧依赖</h3><ol>\n<li><p>查看系统版本，方便后边选择对应的包</p>\n<p><code>lsb_release -a</code></p>\n</li>\n<li><p>停止服务</p>\n<p><code>service httpd stop</code></p>\n</li>\n<li><p>卸载安装包</p>\n<p><code>看图⬇</code></p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/uninstall-old-php.png\" alt=\"img\"></p>\n<p>删除依赖<br><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/rpm-dependencies.png\" alt=\"img\"></p>\n<p>删除一些其它相关包<br><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/delete-others.png\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"更新安装源\"><a href=\"#更新安装源\" class=\"headerlink\" title=\"更新安装源\"></a>更新安装源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos 5.X：</div><div class=\"line\">\trpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm</div><div class=\"line\">CentOs 6.x</div><div class=\"line\">\t rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm</div><div class=\"line\">CentOs 7.X</div><div class=\"line\">\trpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</div><div class=\"line\">\trpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</div></pre></td></tr></table></figure>\n<h3 id=\"安装制定版本PHP\"><a href=\"#安装制定版本PHP\" class=\"headerlink\" title=\"安装制定版本PHP\"></a>安装制定版本PHP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">##5.5版本PHP</span></div><div class=\"line\"> yum install php55w.x86_64 php55w-cli.x86_64 php55w-common.x86_64 php55w-gd.x86_64 php55w-ldap.x86_64 php55w-mbstring.x86_64 php55w-mcrypt.x86_64 php55w-mysql.x86_64 php55w-pdo.x86_64</div><div class=\"line\"><span class=\"comment\">##5.6版本PHP</span></div><div class=\"line\"> yum install php56w.x86_64 php56w-cli.x86_64 php56w-common.x86_64 php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64</div><div class=\"line\"><span class=\"comment\">##7.0版本PHP</span></div><div class=\"line\"> yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64</div></pre></td></tr></table></figure>\n<h3 id=\"安装FPM\"><a href=\"#安装FPM\" class=\"headerlink\" title=\"安装FPM\"></a>安装FPM</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## 选择对应版本即可</span></div><div class=\"line\">\tyum install php55w-fpm </div><div class=\"line\">yum install php56w-fpm </div><div class=\"line\">   yum install php70w-fpm</div></pre></td></tr></table></figure>\n"},{"title":"create git by gogs","date":"2016-03-10T08:22:55.000Z","_content":"\n## 搭建内网Git仓库\n\n### Introduce\n快速搭建内网或公司内部版的GitHub?\n\n>Gogs, Google版GitHub.\n\n### 本地尝鲜\n\n本地Mac系统先使用。\n\n1. 下载Mac系统对应的Gogs版本并解压.\n\n2. cd进入解压出来的目录.\n\n3. 运行./gogs web 即可, 默认端口为3000, 打开http://localhost:3000 即可访问、注册、登录进行体验.\n\n### CentOS 上安装\n\n> CentOS 6.5/64bit\n\n1. 下载对应CentOS架构的Gogs二进制安装包\n\n2. 解压安装包\n\n3. 进入解压后目录，./gogs web & 运行即可访问.\n\n> 上述方式运行方式需要一直保持当前session窗口激活状态，如果关闭窗口，则运行的服务就被停止无法访问。\n\n> 解决方案：\n\n①. 使用nohup 进行后台运行命令即可。\n\n②. 配置命令如下：\n```bash\ncd /data/website/gogs\nnohup ./gogs web &\n```\n\n③. 关于nohup\n\n> 在使用nohup命令的时候，经常由于输出nohup.out的路径没有写入权限，而无法使用nohup\n<br>\n4. 配置alias\n\n`alias gogs=\"nohup /data/website/gogs/./gogs web &\" `\n\n\n### 配置Email服务\n\n> 如果首次安装时未配置email服务，则可按照如下配置进行。\n<br>\n\n1. 第一步\n\n>找到 `/custom/conf`目录，找到该目录下的app.ini文件，修改其配置即可，具体配置如下：\n\n```bash\n[mailer]\nENABLED = true  # 必须开启 设置为true\nHOST = smtp.exmail.qq.com:465 #对应邮箱服务设置里找此配置项\nFROM = xxx@qq.com\nUSER = xxx@qq.com\nPASSWD = 邮箱密码或授权码\n\n[service]\n## 要求注册用户必须验证邮箱\nREGISTER_EMAIL_CONFIRM = true\n## 激活该选项来发送通知邮件给关注者，例如创建 issue 时\nENABLE_NOTIFY_MAIL     = true\n## 激活该选项来禁止用户注册功能，只能由管理员创建帐号\nDISABLE_REGISTRATION   = false\n## 激活该选项以在用户注册时要求输入验证码\nENABLE_CAPTCHA         = true\n## 激活该选项来要求用户必须登录才能浏览任何页面\nREQUIRE_SIGNIN_VIEW    = true\n\n```\n\n<br>\n2. 第二步\n\n> 重启服务, 必须重启gogs服务!!!\n\n> 以git账户运行. \n\n【ssh登录后默认的是root账户，所以需要su git 切换至git账户，然后再切换回root账户，su root， 输入roor账户密码；输入alias  gogs即可】\n\n测试邮件激活服务：\n\n重新注册账号，进入新注册邮箱，查看激活邮件。\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs-confirm-email.png)\n\n点击链接， 确认激活即可。\n\n查看数据库字段，再次确认是否激活。\n\n> 未启动mailer之前，注册账号默认都是激活的, `is_active`字段默认为1.\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs-db-actived.png)\n\n\n### CentOS 升级Gogs\n\n1. 查看更新log决定是否更新：\n\n> https://gogs.io/docs/intro/change_log\n\n<br>\n2. 官网下载最新Gogs二进制安装包\n<br>\n3. 备份旧版本gogs，解压新版本gogs\n\n> 按照官网说法，只需要删除旧版本的templates文件夹，并用最新版本的templates覆盖，经过测试，是有问题和bug的，所以现小记自己的升级更新之笔记.\n\n<br>\n4. 经过上述操作完毕后, 备份/gogs根目录下的以下文件夹:\n\n> 二进制可执行文件 gogs\n\n> public 文件夹\n\n> templates文件夹\n\n> scriptes文件夹\n\n<br>\n5. 备份完毕，用最新版的对应文件替换上面备份过的文件夹即可。\n\n> **二进制gogs可执行文件一定要更新，否则nohup.out文件里会提示相应错误**\n\n<br>\n6. 说明:\n\n> templates 存放的都是前端模板 .tmpl文件，用来渲染数据\n\n> public里面存的是最新样式相关资源js/css/img等, 【更新时需要同时更新，避免使用了新的CSS资源导致页面显示问题】\n\n> 更新这些文件夹，基本不用kill之前开启的gog服务进程, 直接覆盖即可.\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs_upgrade_bk.png)\n\n","source":"_posts/create-git-by-gogs.md","raw":"---\ntitle: create git by gogs\ndate: 2016-03-10 16:22:55\ntags: [gogs,git]\ncategories: essay\n---\n\n## 搭建内网Git仓库\n\n### Introduce\n快速搭建内网或公司内部版的GitHub?\n\n>Gogs, Google版GitHub.\n\n### 本地尝鲜\n\n本地Mac系统先使用。\n\n1. 下载Mac系统对应的Gogs版本并解压.\n\n2. cd进入解压出来的目录.\n\n3. 运行./gogs web 即可, 默认端口为3000, 打开http://localhost:3000 即可访问、注册、登录进行体验.\n\n### CentOS 上安装\n\n> CentOS 6.5/64bit\n\n1. 下载对应CentOS架构的Gogs二进制安装包\n\n2. 解压安装包\n\n3. 进入解压后目录，./gogs web & 运行即可访问.\n\n> 上述方式运行方式需要一直保持当前session窗口激活状态，如果关闭窗口，则运行的服务就被停止无法访问。\n\n> 解决方案：\n\n①. 使用nohup 进行后台运行命令即可。\n\n②. 配置命令如下：\n```bash\ncd /data/website/gogs\nnohup ./gogs web &\n```\n\n③. 关于nohup\n\n> 在使用nohup命令的时候，经常由于输出nohup.out的路径没有写入权限，而无法使用nohup\n<br>\n4. 配置alias\n\n`alias gogs=\"nohup /data/website/gogs/./gogs web &\" `\n\n\n### 配置Email服务\n\n> 如果首次安装时未配置email服务，则可按照如下配置进行。\n<br>\n\n1. 第一步\n\n>找到 `/custom/conf`目录，找到该目录下的app.ini文件，修改其配置即可，具体配置如下：\n\n```bash\n[mailer]\nENABLED = true  # 必须开启 设置为true\nHOST = smtp.exmail.qq.com:465 #对应邮箱服务设置里找此配置项\nFROM = xxx@qq.com\nUSER = xxx@qq.com\nPASSWD = 邮箱密码或授权码\n\n[service]\n## 要求注册用户必须验证邮箱\nREGISTER_EMAIL_CONFIRM = true\n## 激活该选项来发送通知邮件给关注者，例如创建 issue 时\nENABLE_NOTIFY_MAIL     = true\n## 激活该选项来禁止用户注册功能，只能由管理员创建帐号\nDISABLE_REGISTRATION   = false\n## 激活该选项以在用户注册时要求输入验证码\nENABLE_CAPTCHA         = true\n## 激活该选项来要求用户必须登录才能浏览任何页面\nREQUIRE_SIGNIN_VIEW    = true\n\n```\n\n<br>\n2. 第二步\n\n> 重启服务, 必须重启gogs服务!!!\n\n> 以git账户运行. \n\n【ssh登录后默认的是root账户，所以需要su git 切换至git账户，然后再切换回root账户，su root， 输入roor账户密码；输入alias  gogs即可】\n\n测试邮件激活服务：\n\n重新注册账号，进入新注册邮箱，查看激活邮件。\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs-confirm-email.png)\n\n点击链接， 确认激活即可。\n\n查看数据库字段，再次确认是否激活。\n\n> 未启动mailer之前，注册账号默认都是激活的, `is_active`字段默认为1.\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs-db-actived.png)\n\n\n### CentOS 升级Gogs\n\n1. 查看更新log决定是否更新：\n\n> https://gogs.io/docs/intro/change_log\n\n<br>\n2. 官网下载最新Gogs二进制安装包\n<br>\n3. 备份旧版本gogs，解压新版本gogs\n\n> 按照官网说法，只需要删除旧版本的templates文件夹，并用最新版本的templates覆盖，经过测试，是有问题和bug的，所以现小记自己的升级更新之笔记.\n\n<br>\n4. 经过上述操作完毕后, 备份/gogs根目录下的以下文件夹:\n\n> 二进制可执行文件 gogs\n\n> public 文件夹\n\n> templates文件夹\n\n> scriptes文件夹\n\n<br>\n5. 备份完毕，用最新版的对应文件替换上面备份过的文件夹即可。\n\n> **二进制gogs可执行文件一定要更新，否则nohup.out文件里会提示相应错误**\n\n<br>\n6. 说明:\n\n> templates 存放的都是前端模板 .tmpl文件，用来渲染数据\n\n> public里面存的是最新样式相关资源js/css/img等, 【更新时需要同时更新，避免使用了新的CSS资源导致页面显示问题】\n\n> 更新这些文件夹，基本不用kill之前开启的gog服务进程, 直接覆盖即可.\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs_upgrade_bk.png)\n\n","slug":"create-git-by-gogs","published":1,"updated":"2017-03-11T09:29:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fnu000meyqmfzrlek04","content":"<h2 id=\"搭建内网Git仓库\"><a href=\"#搭建内网Git仓库\" class=\"headerlink\" title=\"搭建内网Git仓库\"></a>搭建内网Git仓库</h2><h3 id=\"Introduce\"><a href=\"#Introduce\" class=\"headerlink\" title=\"Introduce\"></a>Introduce</h3><p>快速搭建内网或公司内部版的GitHub?</p>\n<blockquote>\n<p>Gogs, Google版GitHub.</p>\n</blockquote>\n<h3 id=\"本地尝鲜\"><a href=\"#本地尝鲜\" class=\"headerlink\" title=\"本地尝鲜\"></a>本地尝鲜</h3><p>本地Mac系统先使用。</p>\n<ol>\n<li><p>下载Mac系统对应的Gogs版本并解压.</p>\n</li>\n<li><p>cd进入解压出来的目录.</p>\n</li>\n<li><p>运行./gogs web 即可, 默认端口为3000, 打开<a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> 即可访问、注册、登录进行体验.</p>\n</li>\n</ol>\n<h3 id=\"CentOS-上安装\"><a href=\"#CentOS-上安装\" class=\"headerlink\" title=\"CentOS 上安装\"></a>CentOS 上安装</h3><blockquote>\n<p>CentOS 6.5/64bit</p>\n</blockquote>\n<ol>\n<li><p>下载对应CentOS架构的Gogs二进制安装包</p>\n</li>\n<li><p>解压安装包</p>\n</li>\n<li><p>进入解压后目录，./gogs web &amp; 运行即可访问.</p>\n</li>\n</ol>\n<blockquote>\n<p>上述方式运行方式需要一直保持当前session窗口激活状态，如果关闭窗口，则运行的服务就被停止无法访问。</p>\n<p>解决方案：</p>\n</blockquote>\n<p>①. 使用nohup 进行后台运行命令即可。</p>\n<p>②. 配置命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /data/website/gogs</div><div class=\"line\">nohup ./gogs web &amp;</div></pre></td></tr></table></figure></p>\n<p>③. 关于nohup</p>\n<blockquote>\n<p>在使用nohup命令的时候，经常由于输出nohup.out的路径没有写入权限，而无法使用nohup<br><br></p>\n<ol>\n<li>配置alias</li>\n</ol>\n</blockquote>\n<p><code>alias gogs=&quot;nohup /data/website/gogs/./gogs web &amp;&quot;</code></p>\n<h3 id=\"配置Email服务\"><a href=\"#配置Email服务\" class=\"headerlink\" title=\"配置Email服务\"></a>配置Email服务</h3><blockquote>\n<p>如果首次安装时未配置email服务，则可按照如下配置进行。<br><br></p>\n</blockquote>\n<ol>\n<li>第一步</li>\n</ol>\n<blockquote>\n<p>找到 <code>/custom/conf</code>目录，找到该目录下的app.ini文件，修改其配置即可，具体配置如下：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mailer]</div><div class=\"line\">ENABLED = <span class=\"literal\">true</span>  <span class=\"comment\"># 必须开启 设置为true</span></div><div class=\"line\">HOST = smtp.exmail.qq.com:465 <span class=\"comment\">#对应邮箱服务设置里找此配置项</span></div><div class=\"line\">FROM = xxx@qq.com</div><div class=\"line\">USER = xxx@qq.com</div><div class=\"line\">PASSWD = 邮箱密码或授权码</div><div class=\"line\"></div><div class=\"line\">[service]</div><div class=\"line\"><span class=\"comment\">## 要求注册用户必须验证邮箱</span></div><div class=\"line\">REGISTER_EMAIL_CONFIRM = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">## 激活该选项来发送通知邮件给关注者，例如创建 issue 时</span></div><div class=\"line\">ENABLE_NOTIFY_MAIL     = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">## 激活该选项来禁止用户注册功能，只能由管理员创建帐号</span></div><div class=\"line\">DISABLE_REGISTRATION   = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"comment\">## 激活该选项以在用户注册时要求输入验证码</span></div><div class=\"line\">ENABLE_CAPTCHA         = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">## 激活该选项来要求用户必须登录才能浏览任何页面</span></div><div class=\"line\">REQUIRE_SIGNIN_VIEW    = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p><br></p>\n<ol>\n<li>第二步</li>\n</ol>\n<blockquote>\n<p>重启服务, 必须重启gogs服务!!!</p>\n<p>以git账户运行. </p>\n</blockquote>\n<p>【ssh登录后默认的是root账户，所以需要su git 切换至git账户，然后再切换回root账户，su root， 输入roor账户密码；输入alias  gogs即可】</p>\n<p>测试邮件激活服务：</p>\n<p>重新注册账号，进入新注册邮箱，查看激活邮件。</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs-confirm-email.png\" alt=\"img\"></p>\n<p>点击链接， 确认激活即可。</p>\n<p>查看数据库字段，再次确认是否激活。</p>\n<blockquote>\n<p>未启动mailer之前，注册账号默认都是激活的, <code>is_active</code>字段默认为1.</p>\n</blockquote>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs-db-actived.png\" alt=\"img\"></p>\n<h3 id=\"CentOS-升级Gogs\"><a href=\"#CentOS-升级Gogs\" class=\"headerlink\" title=\"CentOS 升级Gogs\"></a>CentOS 升级Gogs</h3><ol>\n<li>查看更新log决定是否更新：</li>\n</ol>\n<blockquote>\n<p><a href=\"https://gogs.io/docs/intro/change_log\" target=\"_blank\" rel=\"external\">https://gogs.io/docs/intro/change_log</a></p>\n</blockquote>\n<p><br></p>\n<ol>\n<li>官网下载最新Gogs二进制安装包<br><br></li>\n<li>备份旧版本gogs，解压新版本gogs</li>\n</ol>\n<blockquote>\n<p>按照官网说法，只需要删除旧版本的templates文件夹，并用最新版本的templates覆盖，经过测试，是有问题和bug的，所以现小记自己的升级更新之笔记.</p>\n</blockquote>\n<p><br></p>\n<ol>\n<li>经过上述操作完毕后, 备份/gogs根目录下的以下文件夹:</li>\n</ol>\n<blockquote>\n<p>二进制可执行文件 gogs</p>\n<p>public 文件夹</p>\n<p>templates文件夹</p>\n<p>scriptes文件夹</p>\n</blockquote>\n<p><br></p>\n<ol>\n<li>备份完毕，用最新版的对应文件替换上面备份过的文件夹即可。</li>\n</ol>\n<blockquote>\n<p><strong>二进制gogs可执行文件一定要更新，否则nohup.out文件里会提示相应错误</strong></p>\n</blockquote>\n<p><br></p>\n<ol>\n<li>说明:</li>\n</ol>\n<blockquote>\n<p>templates 存放的都是前端模板 .tmpl文件，用来渲染数据</p>\n<p>public里面存的是最新样式相关资源js/css/img等, 【更新时需要同时更新，避免使用了新的CSS资源导致页面显示问题】</p>\n<p>更新这些文件夹，基本不用kill之前开启的gog服务进程, 直接覆盖即可.</p>\n</blockquote>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs_upgrade_bk.png\" alt=\"img\"></p>\n","excerpt":"","more":"<h2 id=\"搭建内网Git仓库\"><a href=\"#搭建内网Git仓库\" class=\"headerlink\" title=\"搭建内网Git仓库\"></a>搭建内网Git仓库</h2><h3 id=\"Introduce\"><a href=\"#Introduce\" class=\"headerlink\" title=\"Introduce\"></a>Introduce</h3><p>快速搭建内网或公司内部版的GitHub?</p>\n<blockquote>\n<p>Gogs, Google版GitHub.</p>\n</blockquote>\n<h3 id=\"本地尝鲜\"><a href=\"#本地尝鲜\" class=\"headerlink\" title=\"本地尝鲜\"></a>本地尝鲜</h3><p>本地Mac系统先使用。</p>\n<ol>\n<li><p>下载Mac系统对应的Gogs版本并解压.</p>\n</li>\n<li><p>cd进入解压出来的目录.</p>\n</li>\n<li><p>运行./gogs web 即可, 默认端口为3000, 打开<a href=\"http://localhost:3000\">http://localhost:3000</a> 即可访问、注册、登录进行体验.</p>\n</li>\n</ol>\n<h3 id=\"CentOS-上安装\"><a href=\"#CentOS-上安装\" class=\"headerlink\" title=\"CentOS 上安装\"></a>CentOS 上安装</h3><blockquote>\n<p>CentOS 6.5/64bit</p>\n</blockquote>\n<ol>\n<li><p>下载对应CentOS架构的Gogs二进制安装包</p>\n</li>\n<li><p>解压安装包</p>\n</li>\n<li><p>进入解压后目录，./gogs web &amp; 运行即可访问.</p>\n</li>\n</ol>\n<blockquote>\n<p>上述方式运行方式需要一直保持当前session窗口激活状态，如果关闭窗口，则运行的服务就被停止无法访问。</p>\n<p>解决方案：</p>\n</blockquote>\n<p>①. 使用nohup 进行后台运行命令即可。</p>\n<p>②. 配置命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /data/website/gogs</div><div class=\"line\">nohup ./gogs web &amp;</div></pre></td></tr></table></figure></p>\n<p>③. 关于nohup</p>\n<blockquote>\n<p>在使用nohup命令的时候，经常由于输出nohup.out的路径没有写入权限，而无法使用nohup<br><br></p>\n<ol>\n<li>配置alias</li>\n</ol>\n</blockquote>\n<p><code>alias gogs=&quot;nohup /data/website/gogs/./gogs web &amp;&quot;</code></p>\n<h3 id=\"配置Email服务\"><a href=\"#配置Email服务\" class=\"headerlink\" title=\"配置Email服务\"></a>配置Email服务</h3><blockquote>\n<p>如果首次安装时未配置email服务，则可按照如下配置进行。<br><br></p>\n</blockquote>\n<ol>\n<li>第一步</li>\n</ol>\n<blockquote>\n<p>找到 <code>/custom/conf</code>目录，找到该目录下的app.ini文件，修改其配置即可，具体配置如下：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mailer]</div><div class=\"line\">ENABLED = <span class=\"literal\">true</span>  <span class=\"comment\"># 必须开启 设置为true</span></div><div class=\"line\">HOST = smtp.exmail.qq.com:465 <span class=\"comment\">#对应邮箱服务设置里找此配置项</span></div><div class=\"line\">FROM = xxx@qq.com</div><div class=\"line\">USER = xxx@qq.com</div><div class=\"line\">PASSWD = 邮箱密码或授权码</div><div class=\"line\"></div><div class=\"line\">[service]</div><div class=\"line\"><span class=\"comment\">## 要求注册用户必须验证邮箱</span></div><div class=\"line\">REGISTER_EMAIL_CONFIRM = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">## 激活该选项来发送通知邮件给关注者，例如创建 issue 时</span></div><div class=\"line\">ENABLE_NOTIFY_MAIL     = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">## 激活该选项来禁止用户注册功能，只能由管理员创建帐号</span></div><div class=\"line\">DISABLE_REGISTRATION   = <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"comment\">## 激活该选项以在用户注册时要求输入验证码</span></div><div class=\"line\">ENABLE_CAPTCHA         = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">## 激活该选项来要求用户必须登录才能浏览任何页面</span></div><div class=\"line\">REQUIRE_SIGNIN_VIEW    = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p><br></p>\n<ol>\n<li>第二步</li>\n</ol>\n<blockquote>\n<p>重启服务, 必须重启gogs服务!!!</p>\n<p>以git账户运行. </p>\n</blockquote>\n<p>【ssh登录后默认的是root账户，所以需要su git 切换至git账户，然后再切换回root账户，su root， 输入roor账户密码；输入alias  gogs即可】</p>\n<p>测试邮件激活服务：</p>\n<p>重新注册账号，进入新注册邮箱，查看激活邮件。</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs-confirm-email.png\" alt=\"img\"></p>\n<p>点击链接， 确认激活即可。</p>\n<p>查看数据库字段，再次确认是否激活。</p>\n<blockquote>\n<p>未启动mailer之前，注册账号默认都是激活的, <code>is_active</code>字段默认为1.</p>\n</blockquote>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs-db-actived.png\" alt=\"img\"></p>\n<h3 id=\"CentOS-升级Gogs\"><a href=\"#CentOS-升级Gogs\" class=\"headerlink\" title=\"CentOS 升级Gogs\"></a>CentOS 升级Gogs</h3><ol>\n<li>查看更新log决定是否更新：</li>\n</ol>\n<blockquote>\n<p><a href=\"https://gogs.io/docs/intro/change_log\">https://gogs.io/docs/intro/change_log</a></p>\n</blockquote>\n<p><br></p>\n<ol>\n<li>官网下载最新Gogs二进制安装包<br><br></li>\n<li>备份旧版本gogs，解压新版本gogs</li>\n</ol>\n<blockquote>\n<p>按照官网说法，只需要删除旧版本的templates文件夹，并用最新版本的templates覆盖，经过测试，是有问题和bug的，所以现小记自己的升级更新之笔记.</p>\n</blockquote>\n<p><br></p>\n<ol>\n<li>经过上述操作完毕后, 备份/gogs根目录下的以下文件夹:</li>\n</ol>\n<blockquote>\n<p>二进制可执行文件 gogs</p>\n<p>public 文件夹</p>\n<p>templates文件夹</p>\n<p>scriptes文件夹</p>\n</blockquote>\n<p><br></p>\n<ol>\n<li>备份完毕，用最新版的对应文件替换上面备份过的文件夹即可。</li>\n</ol>\n<blockquote>\n<p><strong>二进制gogs可执行文件一定要更新，否则nohup.out文件里会提示相应错误</strong></p>\n</blockquote>\n<p><br></p>\n<ol>\n<li>说明:</li>\n</ol>\n<blockquote>\n<p>templates 存放的都是前端模板 .tmpl文件，用来渲染数据</p>\n<p>public里面存的是最新样式相关资源js/css/img等, 【更新时需要同时更新，避免使用了新的CSS资源导致页面显示问题】</p>\n<p>更新这些文件夹，基本不用kill之前开启的gog服务进程, 直接覆盖即可.</p>\n</blockquote>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/gogs_upgrade_bk.png\" alt=\"img\"></p>\n"},{"title":"Hexo如何新创建新博文","date":"2016-02-24T05:40:48.000Z","_content":"\n## 命令生成初始文章\n```bash\n$  hexo n \"how to write a new article\"\n```\n然后即可在`./source/_posts` 目录下创建对应的.md文件，例如我的：\n  \n  `~/Documents/Blog/source/_posts/how-to-write-a-new-article.md`\n\n同时，会在创建一个文件夹同名的文件夹，这个文件夹一般用来存放这篇博文相关的图片、自定义样式css、或其他js脚本文件等.\n\n截图如下：\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/how-to-write-article.png)\n\n   -->>  注意观察命令行参数与所生产文件及文件夹名的对应关系！\n\n123222\n然后即可开始撰写文字。\n一般地，其格式如下：\n\n    `title: hexo post #可以改成中文的，如“新文章”\n\tdate: 2015-01-14 21:31:42 #发表日期，可自定义修改排序\n\tcategories: blog #文章文类\n\ttags: [博客,文章] #文章标签，可以加入多标签\n\t---`\n\n","source":"_posts/how-to-write-a-new-article.md","raw":"---\ntitle: Hexo如何新创建新博文\ndate: 2016-02-24 13:40:48\ntags: write\ncategories: essay\n---\n\n## 命令生成初始文章\n```bash\n$  hexo n \"how to write a new article\"\n```\n然后即可在`./source/_posts` 目录下创建对应的.md文件，例如我的：\n  \n  `~/Documents/Blog/source/_posts/how-to-write-a-new-article.md`\n\n同时，会在创建一个文件夹同名的文件夹，这个文件夹一般用来存放这篇博文相关的图片、自定义样式css、或其他js脚本文件等.\n\n截图如下：\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/how-to-write-article.png)\n\n   -->>  注意观察命令行参数与所生产文件及文件夹名的对应关系！\n\n123222\n然后即可开始撰写文字。\n一般地，其格式如下：\n\n    `title: hexo post #可以改成中文的，如“新文章”\n\tdate: 2015-01-14 21:31:42 #发表日期，可自定义修改排序\n\tcategories: blog #文章文类\n\ttags: [博客,文章] #文章标签，可以加入多标签\n\t---`\n\n","slug":"how-to-write-a-new-article","published":1,"updated":"2017-02-24T17:31:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fnz000qeyqmonsy1nxa","content":"<h2 id=\"命令生成初始文章\"><a href=\"#命令生成初始文章\" class=\"headerlink\" title=\"命令生成初始文章\"></a>命令生成初始文章</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  hexo n <span class=\"string\">\"how to write a new article\"</span></div></pre></td></tr></table></figure>\n<p>然后即可在<code>./source/_posts</code> 目录下创建对应的.md文件，例如我的：</p>\n<p>  <code>~/Documents/Blog/source/_posts/how-to-write-a-new-article.md</code></p>\n<p>同时，会在创建一个文件夹同名的文件夹，这个文件夹一般用来存放这篇博文相关的图片、自定义样式css、或其他js脚本文件等.</p>\n<p>截图如下：<br>    <img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/how-to-write-article.png\" alt=\"img\"></p>\n<p>   –&gt;&gt;  注意观察命令行参数与所生产文件及文件夹名的对应关系！</p>\n<p>123222<br>然后即可开始撰写文字。<br>一般地，其格式如下：</p>\n<pre><code>`title: hexo post #可以改成中文的，如“新文章”\ndate: 2015-01-14 21:31:42 #发表日期，可自定义修改排序\ncategories: blog #文章文类\ntags: [博客,文章] #文章标签，可以加入多标签\n---`\n</code></pre>","excerpt":"","more":"<h2 id=\"命令生成初始文章\"><a href=\"#命令生成初始文章\" class=\"headerlink\" title=\"命令生成初始文章\"></a>命令生成初始文章</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  hexo n <span class=\"string\">\"how to write a new article\"</span></div></pre></td></tr></table></figure>\n<p>然后即可在<code>./source/_posts</code> 目录下创建对应的.md文件，例如我的：</p>\n<p>  <code>~/Documents/Blog/source/_posts/how-to-write-a-new-article.md</code></p>\n<p>同时，会在创建一个文件夹同名的文件夹，这个文件夹一般用来存放这篇博文相关的图片、自定义样式css、或其他js脚本文件等.</p>\n<p>截图如下：<br>    <img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/how-to-write-article.png\" alt=\"img\"></p>\n<p>   –&gt;&gt;  注意观察命令行参数与所生产文件及文件夹名的对应关系！</p>\n<p>123222<br>然后即可开始撰写文字。<br>一般地，其格式如下：</p>\n<pre><code>`title: hexo post #可以改成中文的，如“新文章”\ndate: 2015-01-14 21:31:42 #发表日期，可自定义修改排序\ncategories: blog #文章文类\ntags: [博客,文章] #文章标签，可以加入多标签\n---`\n</code></pre>"},{"title":"使用GitHub Pages创建个人博客","date":"2016-06-21T15:33:02.000Z","description":null,"_content":"基于GitHub Pages 加上自己的域名lomo.space创建个人博客，并将博客相关数据、文件免费托管于Github. 2013年左右时，个人博客是基于WordPress二次开发并自己购买空间、域名进行第三方付费托管于维护。\n\n## 【第一部分】安装 Hexo + 服务 + 各类依赖\n``` bash\n$ npm install -g hexo-cli #全局安装cli\n```\n### 初始化 Hexo\n```bash\n$ hexo init +文件夹名\n```\ninit过程可能遇到NPM warning 级别错误，提示deprecated swig的错误：\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/node-swig-error.png)\n\n解决方案：\n` npm install swig@latest `\n\n### 安装 Hexo\n```bash\n$ npm install hexo --save    #非全局(-g)\n```\n### 生成静态资源文件\n```bash\n$ hexo g || hexo generate #生成静态可访问资源(html+css+js)，附带一个web示例\n```\n生成的示例可通过URL：http://localhost:4000/  进行访问。\n\n### 尝试启动服务\n```bash\n$ hexo s || hexo serve  #启动本地服务器\n```\n由于是首次本地安装Hexo，故尝试起服务前，必须安装一个server依赖包，否则会报错！\n使用NPM安装serve依赖包：\n    ` npm install hexo-server --save\n    `\n再次重启服务：hexo g, hexo s -o, 自动打开浏览器，发现空白，只有一行提示：`Cannot get /` 这样的错误提示！\n#### 针对以上错误 解决方案:\n```bash\n$  npm install hexo-renderer-ejs --save  #hexo依赖\n$  npm install hexo-renderer-stylus --save  #hexo依赖\n$  npm install hexo-renderer-marked --save  #hexo依赖\n```\n重新生成、部署本地服务，hexo g, hexo s。\n浏览器重新打开URL：http://localhost:4000/ 访问OK，出现了基本页面。\n\n至此，Hexo-cli、hexo 安装及基本依赖安装完毕。\n\n## 【第二部分】主题 及theme配置、二次开发\n选取自己喜欢的主题即可，可参考知乎或GitHub上自行索取。\n    \n### 主题安装\n    ```bash \n    $ cd themes\n    $ git clone https://github.com/wuchong/jacman.git  # 选用的主题\n    ```\n安装完主题后，在对应主题根目录下有一个和该Blog根目录下同名的 `_config.yml` 配置文件,注意区别！\n\n二次开发部分此处省略，直接参考整个Blog代码。\n\n## 【第三部分】常用功能模块配置\n\n### 博客基本配置\n首页默认展示文章形式(缩略：只显示部分)，可修改，在主题配置文件 `_config.yml`中：\n`index:\n  expand: false   #缩略显示\n  excerpt_link: Read More \n`\n#### 根目录_config.yml配置\n为了便于deploy本地文件到GitHub上，在博客根目录的 `_config.yml` 文件中，找到deploy关键字，如果没有，则在文件最后加上如下：\n    `\tdeploy:\n\t\t\ttype: git\n\t\t\trepo: https://github.com/lomo1/lomo1.github.io.git  \n\t\t\t#自己的github page地址\n        branch: master  #分支\n    `\n#### 快捷部署至GitHub\n为了使用快捷部署功能：hexo d 或hexo deploy (hexo g本地生成最新public文件夹之后)，必须要先安装一个hexo依赖包：\n` npm install hexo-deployer-git --save`\n最后hexo d 即可将最新博客相关数据文件更新至GitHub Pages上。\n\n### 主题基本配置\n安装完主题后，博客根目录 `_config.yml` 启动新的主题：\n`theme: jacman\nstylus:\n    compress: true\n`\n\n菜单部分配置对应主题文件夹下的_config.yml文件，可参考如下:\n    `menu:`\n      `Home: / ` \n      `Essay: /categories/essay`\n      `Write: /categories/write`\n      `Read:\t/categories/read`\n      `Study: /categories/study`\n      `Code: /categories/program`\n      `About: /about`\n      \n菜单按照如上配置后，在博客根目录下的 `source`目录下创建(若无)对应的目录，并在每一个folder下创建index.md 填充内容，否则在浏览器点击导航栏的Link后，跳转的页面是空白页。\n\n### Widget配置\n```bash\n\nauthor:\n  intro_line1:  \"Lomo's Introduce One...\"    ## your introduction on the bottom of the page\n  intro_line2:  \"Lomo's Introduce Two ....\"  ## the 2nd line\n  weibo:    ## 微博ID, http://weibo.com/527123733/home?wvr=5\n  weibo_verifier:    \n  tsina:    \n  douban: chnhawk    \n  zhihu: chan-donald     \n  email: lomo@lomo.space     \n  twitter: chnhawk   \n  github:    ## e.g. for https://github.com/lomo1\n  facebook:  \n  linkedin:   \n  google_plus:    ## e.g. \"1111908813418008123\", the \"\" is needed!\n  stackoverflow:  ## e.g. 123221 \n  ## 填写对应的社交账户的ID后，网站底部就会显示个人的社交主页链接，访客可直接点击访问个人对应社交主页.\n```\n#### 友情链接 配置\n主题目录下的 `_config.yml` 文件：\n    `#### Links`\n`links:`\n  `看雪: http://www.kanxue.com/`\n  `GoogleCodeStyle: https://google.github.io/styleguide/`\n\n#### Sina WeiBo 配置\n1. 获取嵌入代码: http://app.weibo.com/tool/weiboshow, 选取样式，并copy iframe代码\n2.  `cd /Users/lomo/Documents/Blog/themes/jacman/layout/_widget`\n3. 编辑weibo.ejs（/theme/layout/widget/weibo.ejs）,paste刚才copy的 iframe代码\n4. hexo g, hexo s 查看效果。\n\n#### RSS配置\n```bash\n$  npm install hexo-generator-feed --save  #插件 install\n```\n1. 博客根目录下的`_config.yml` 文件做如下配置：\n`\t\t\tfeed:\n\t\t\t  type: atom\n\t\t\t  path: atom.xml\n\t\t\t  limit: 20\n  hub:\n  `\n2. 主题根目录下配置文件做如下修改：\n    `rss: /atom.xml`\n    \n3. 重新生成、部署。\n\n### 文章评论功能 设置\n``` bash\nduoshuo_shortname: lomo1   \n## 多说注册时，要求填写的三级域名里的那个name\n##如果名称和域名里的那个name不一致，则用域名里的那个name，否则评论数据会消失.\n\ndisqus_shortname:     \n## 国外的dispus评论功能插件.\n```\n使用多说 -> http://duoshuo.com/\n\n\n\n目前主要就这么多总结，给自己做笔记，留个备份，方便后用。后续问题再补充进来。\n对了随时插入图片的问题，还没解决好，后续跟进...\n\n","source":"_posts/howToCreateBlogByUsingGitHubPages.md","raw":"---\ntitle: 使用GitHub Pages创建个人博客\ndate: 2016-06-21 23:33:02\ntags: [blog,GitHub,Hexo]\ncategories: essay # 配置categories\ndescription:\n---\n基于GitHub Pages 加上自己的域名lomo.space创建个人博客，并将博客相关数据、文件免费托管于Github. 2013年左右时，个人博客是基于WordPress二次开发并自己购买空间、域名进行第三方付费托管于维护。\n\n## 【第一部分】安装 Hexo + 服务 + 各类依赖\n``` bash\n$ npm install -g hexo-cli #全局安装cli\n```\n### 初始化 Hexo\n```bash\n$ hexo init +文件夹名\n```\ninit过程可能遇到NPM warning 级别错误，提示deprecated swig的错误：\n    ![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/node-swig-error.png)\n\n解决方案：\n` npm install swig@latest `\n\n### 安装 Hexo\n```bash\n$ npm install hexo --save    #非全局(-g)\n```\n### 生成静态资源文件\n```bash\n$ hexo g || hexo generate #生成静态可访问资源(html+css+js)，附带一个web示例\n```\n生成的示例可通过URL：http://localhost:4000/  进行访问。\n\n### 尝试启动服务\n```bash\n$ hexo s || hexo serve  #启动本地服务器\n```\n由于是首次本地安装Hexo，故尝试起服务前，必须安装一个server依赖包，否则会报错！\n使用NPM安装serve依赖包：\n    ` npm install hexo-server --save\n    `\n再次重启服务：hexo g, hexo s -o, 自动打开浏览器，发现空白，只有一行提示：`Cannot get /` 这样的错误提示！\n#### 针对以上错误 解决方案:\n```bash\n$  npm install hexo-renderer-ejs --save  #hexo依赖\n$  npm install hexo-renderer-stylus --save  #hexo依赖\n$  npm install hexo-renderer-marked --save  #hexo依赖\n```\n重新生成、部署本地服务，hexo g, hexo s。\n浏览器重新打开URL：http://localhost:4000/ 访问OK，出现了基本页面。\n\n至此，Hexo-cli、hexo 安装及基本依赖安装完毕。\n\n## 【第二部分】主题 及theme配置、二次开发\n选取自己喜欢的主题即可，可参考知乎或GitHub上自行索取。\n    \n### 主题安装\n    ```bash \n    $ cd themes\n    $ git clone https://github.com/wuchong/jacman.git  # 选用的主题\n    ```\n安装完主题后，在对应主题根目录下有一个和该Blog根目录下同名的 `_config.yml` 配置文件,注意区别！\n\n二次开发部分此处省略，直接参考整个Blog代码。\n\n## 【第三部分】常用功能模块配置\n\n### 博客基本配置\n首页默认展示文章形式(缩略：只显示部分)，可修改，在主题配置文件 `_config.yml`中：\n`index:\n  expand: false   #缩略显示\n  excerpt_link: Read More \n`\n#### 根目录_config.yml配置\n为了便于deploy本地文件到GitHub上，在博客根目录的 `_config.yml` 文件中，找到deploy关键字，如果没有，则在文件最后加上如下：\n    `\tdeploy:\n\t\t\ttype: git\n\t\t\trepo: https://github.com/lomo1/lomo1.github.io.git  \n\t\t\t#自己的github page地址\n        branch: master  #分支\n    `\n#### 快捷部署至GitHub\n为了使用快捷部署功能：hexo d 或hexo deploy (hexo g本地生成最新public文件夹之后)，必须要先安装一个hexo依赖包：\n` npm install hexo-deployer-git --save`\n最后hexo d 即可将最新博客相关数据文件更新至GitHub Pages上。\n\n### 主题基本配置\n安装完主题后，博客根目录 `_config.yml` 启动新的主题：\n`theme: jacman\nstylus:\n    compress: true\n`\n\n菜单部分配置对应主题文件夹下的_config.yml文件，可参考如下:\n    `menu:`\n      `Home: / ` \n      `Essay: /categories/essay`\n      `Write: /categories/write`\n      `Read:\t/categories/read`\n      `Study: /categories/study`\n      `Code: /categories/program`\n      `About: /about`\n      \n菜单按照如上配置后，在博客根目录下的 `source`目录下创建(若无)对应的目录，并在每一个folder下创建index.md 填充内容，否则在浏览器点击导航栏的Link后，跳转的页面是空白页。\n\n### Widget配置\n```bash\n\nauthor:\n  intro_line1:  \"Lomo's Introduce One...\"    ## your introduction on the bottom of the page\n  intro_line2:  \"Lomo's Introduce Two ....\"  ## the 2nd line\n  weibo:    ## 微博ID, http://weibo.com/527123733/home?wvr=5\n  weibo_verifier:    \n  tsina:    \n  douban: chnhawk    \n  zhihu: chan-donald     \n  email: lomo@lomo.space     \n  twitter: chnhawk   \n  github:    ## e.g. for https://github.com/lomo1\n  facebook:  \n  linkedin:   \n  google_plus:    ## e.g. \"1111908813418008123\", the \"\" is needed!\n  stackoverflow:  ## e.g. 123221 \n  ## 填写对应的社交账户的ID后，网站底部就会显示个人的社交主页链接，访客可直接点击访问个人对应社交主页.\n```\n#### 友情链接 配置\n主题目录下的 `_config.yml` 文件：\n    `#### Links`\n`links:`\n  `看雪: http://www.kanxue.com/`\n  `GoogleCodeStyle: https://google.github.io/styleguide/`\n\n#### Sina WeiBo 配置\n1. 获取嵌入代码: http://app.weibo.com/tool/weiboshow, 选取样式，并copy iframe代码\n2.  `cd /Users/lomo/Documents/Blog/themes/jacman/layout/_widget`\n3. 编辑weibo.ejs（/theme/layout/widget/weibo.ejs）,paste刚才copy的 iframe代码\n4. hexo g, hexo s 查看效果。\n\n#### RSS配置\n```bash\n$  npm install hexo-generator-feed --save  #插件 install\n```\n1. 博客根目录下的`_config.yml` 文件做如下配置：\n`\t\t\tfeed:\n\t\t\t  type: atom\n\t\t\t  path: atom.xml\n\t\t\t  limit: 20\n  hub:\n  `\n2. 主题根目录下配置文件做如下修改：\n    `rss: /atom.xml`\n    \n3. 重新生成、部署。\n\n### 文章评论功能 设置\n``` bash\nduoshuo_shortname: lomo1   \n## 多说注册时，要求填写的三级域名里的那个name\n##如果名称和域名里的那个name不一致，则用域名里的那个name，否则评论数据会消失.\n\ndisqus_shortname:     \n## 国外的dispus评论功能插件.\n```\n使用多说 -> http://duoshuo.com/\n\n\n\n目前主要就这么多总结，给自己做笔记，留个备份，方便后用。后续问题再补充进来。\n对了随时插入图片的问题，还没解决好，后续跟进...\n\n","slug":"howToCreateBlogByUsingGitHubPages","published":1,"updated":"2017-03-11T08:00:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fo3000seyqm6uc3jgyb","content":"<p>基于GitHub Pages 加上自己的域名lomo.space创建个人博客，并将博客相关数据、文件免费托管于Github. 2013年左右时，个人博客是基于WordPress二次开发并自己购买空间、域名进行第三方付费托管于维护。</p>\n<h2 id=\"【第一部分】安装-Hexo-服务-各类依赖\"><a href=\"#【第一部分】安装-Hexo-服务-各类依赖\" class=\"headerlink\" title=\"【第一部分】安装 Hexo + 服务 + 各类依赖\"></a>【第一部分】安装 Hexo + 服务 + 各类依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli <span class=\"comment\">#全局安装cli</span></div></pre></td></tr></table></figure>\n<h3 id=\"初始化-Hexo\"><a href=\"#初始化-Hexo\" class=\"headerlink\" title=\"初始化 Hexo\"></a>初始化 Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init +文件夹名</div></pre></td></tr></table></figure>\n<p>init过程可能遇到NPM warning 级别错误，提示deprecated swig的错误：<br>    <img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/node-swig-error.png\" alt=\"img\"></p>\n<p>解决方案：<br><code>npm install swig@latest</code></p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo --save    <span class=\"comment\">#非全局(-g)</span></div></pre></td></tr></table></figure>\n<h3 id=\"生成静态资源文件\"><a href=\"#生成静态资源文件\" class=\"headerlink\" title=\"生成静态资源文件\"></a>生成静态资源文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g || hexo generate <span class=\"comment\">#生成静态可访问资源(html+css+js)，附带一个web示例</span></div></pre></td></tr></table></figure>\n<p>生成的示例可通过URL：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>  进行访问。</p>\n<h3 id=\"尝试启动服务\"><a href=\"#尝试启动服务\" class=\"headerlink\" title=\"尝试启动服务\"></a>尝试启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s || hexo serve  <span class=\"comment\">#启动本地服务器</span></div></pre></td></tr></table></figure>\n<p>由于是首次本地安装Hexo，故尝试起服务前，必须安装一个server依赖包，否则会报错！<br>使用NPM安装serve依赖包：<br>    <code>npm install hexo-server --save</code><br>再次重启服务：hexo g, hexo s -o, 自动打开浏览器，发现空白，只有一行提示：<code>Cannot get /</code> 这样的错误提示！</p>\n<h4 id=\"针对以上错误-解决方案\"><a href=\"#针对以上错误-解决方案\" class=\"headerlink\" title=\"针对以上错误 解决方案:\"></a>针对以上错误 解决方案:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  npm install hexo-renderer-ejs --save  <span class=\"comment\">#hexo依赖</span></div><div class=\"line\">$  npm install hexo-renderer-stylus --save  <span class=\"comment\">#hexo依赖</span></div><div class=\"line\">$  npm install hexo-renderer-marked --save  <span class=\"comment\">#hexo依赖</span></div></pre></td></tr></table></figure>\n<p>重新生成、部署本地服务，hexo g, hexo s。<br>浏览器重新打开URL：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> 访问OK，出现了基本页面。</p>\n<p>至此，Hexo-cli、hexo 安装及基本依赖安装完毕。</p>\n<h2 id=\"【第二部分】主题-及theme配置、二次开发\"><a href=\"#【第二部分】主题-及theme配置、二次开发\" class=\"headerlink\" title=\"【第二部分】主题 及theme配置、二次开发\"></a>【第二部分】主题 及theme配置、二次开发</h2><p>选取自己喜欢的主题即可，可参考知乎或GitHub上自行索取。</p>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> themes</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/wuchong/jacman.git  <span class=\"comment\"># 选用的主题</span></div></pre></td></tr></table></figure>\n</code></pre><p>安装完主题后，在对应主题根目录下有一个和该Blog根目录下同名的 <code>_config.yml</code> 配置文件,注意区别！</p>\n<p>二次开发部分此处省略，直接参考整个Blog代码。</p>\n<h2 id=\"【第三部分】常用功能模块配置\"><a href=\"#【第三部分】常用功能模块配置\" class=\"headerlink\" title=\"【第三部分】常用功能模块配置\"></a>【第三部分】常用功能模块配置</h2><h3 id=\"博客基本配置\"><a href=\"#博客基本配置\" class=\"headerlink\" title=\"博客基本配置\"></a>博客基本配置</h3><p>首页默认展示文章形式(缩略：只显示部分)，可修改，在主题配置文件 <code>_config.yml</code>中：<br><code>index:\n  expand: false   #缩略显示\n  excerpt_link: Read More</code></p>\n<h4 id=\"根目录-config-yml配置\"><a href=\"#根目录-config-yml配置\" class=\"headerlink\" title=\"根目录_config.yml配置\"></a>根目录_config.yml配置</h4><p>为了便于deploy本地文件到GitHub上，在博客根目录的 <code>_config.yml</code> 文件中，找到deploy关键字，如果没有，则在文件最后加上如下：<br>    `    deploy:<br>            type: git<br>            repo: <a href=\"https://github.com/lomo1/lomo1.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/lomo1/lomo1.github.io.git</a>  </p>\n<pre><code>        #自己的github page地址\n    branch: master  #分支\n`\n</code></pre><h4 id=\"快捷部署至GitHub\"><a href=\"#快捷部署至GitHub\" class=\"headerlink\" title=\"快捷部署至GitHub\"></a>快捷部署至GitHub</h4><p>为了使用快捷部署功能：hexo d 或hexo deploy (hexo g本地生成最新public文件夹之后)，必须要先安装一个hexo依赖包：<br><code>npm install hexo-deployer-git --save</code><br>最后hexo d 即可将最新博客相关数据文件更新至GitHub Pages上。</p>\n<h3 id=\"主题基本配置\"><a href=\"#主题基本配置\" class=\"headerlink\" title=\"主题基本配置\"></a>主题基本配置</h3><p>安装完主题后，博客根目录 <code>_config.yml</code> 启动新的主题：<br><code>theme: jacman\nstylus:\n    compress: true</code></p>\n<p>菜单部分配置对应主题文件夹下的_config.yml文件，可参考如下:<br>    <code>menu:</code><br>      <code>Home: /</code><br>      <code>Essay: /categories/essay</code><br>      <code>Write: /categories/write</code><br>      <code>Read:    /categories/read</code><br>      <code>Study: /categories/study</code><br>      <code>Code: /categories/program</code><br>      <code>About: /about</code></p>\n<p>菜单按照如上配置后，在博客根目录下的 <code>source</code>目录下创建(若无)对应的目录，并在每一个folder下创建index.md 填充内容，否则在浏览器点击导航栏的Link后，跳转的页面是空白页。</p>\n<h3 id=\"Widget配置\"><a href=\"#Widget配置\" class=\"headerlink\" title=\"Widget配置\"></a>Widget配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">author:</div><div class=\"line\">  intro_line1:  <span class=\"string\">\"Lomo's Introduce One...\"</span>    <span class=\"comment\">## your introduction on the bottom of the page</span></div><div class=\"line\">  intro_line2:  <span class=\"string\">\"Lomo's Introduce Two ....\"</span>  <span class=\"comment\">## the 2nd line</span></div><div class=\"line\">  weibo:    <span class=\"comment\">## 微博ID, http://weibo.com/527123733/home?wvr=5</span></div><div class=\"line\">  weibo_verifier:    </div><div class=\"line\">  tsina:    </div><div class=\"line\">  douban: chnhawk    </div><div class=\"line\">  zhihu: chan-donald     </div><div class=\"line\">  email: lomo@lomo.space     </div><div class=\"line\">  twitter: chnhawk   </div><div class=\"line\">  github:    <span class=\"comment\">## e.g. for https://github.com/lomo1</span></div><div class=\"line\">  facebook:  </div><div class=\"line\">  linkedin:   </div><div class=\"line\">  google_plus:    <span class=\"comment\">## e.g. \"1111908813418008123\", the \"\" is needed!</span></div><div class=\"line\">  stackoverflow:  <span class=\"comment\">## e.g. 123221 </span></div><div class=\"line\">  <span class=\"comment\">## 填写对应的社交账户的ID后，网站底部就会显示个人的社交主页链接，访客可直接点击访问个人对应社交主页.</span></div></pre></td></tr></table></figure>\n<h4 id=\"友情链接-配置\"><a href=\"#友情链接-配置\" class=\"headerlink\" title=\"友情链接 配置\"></a>友情链接 配置</h4><p>主题目录下的 <code>_config.yml</code> 文件：<br>    <code>#### Links</code><br><code>links:</code><br>  <code>看雪: http://www.kanxue.com/</code><br>  <code>GoogleCodeStyle: https://google.github.io/styleguide/</code></p>\n<h4 id=\"Sina-WeiBo-配置\"><a href=\"#Sina-WeiBo-配置\" class=\"headerlink\" title=\"Sina WeiBo 配置\"></a>Sina WeiBo 配置</h4><ol>\n<li>获取嵌入代码: <a href=\"http://app.weibo.com/tool/weiboshow\" target=\"_blank\" rel=\"external\">http://app.weibo.com/tool/weiboshow</a>, 选取样式，并copy iframe代码</li>\n<li><code>cd /Users/lomo/Documents/Blog/themes/jacman/layout/_widget</code></li>\n<li>编辑weibo.ejs（/theme/layout/widget/weibo.ejs）,paste刚才copy的 iframe代码</li>\n<li>hexo g, hexo s 查看效果。</li>\n</ol>\n<h4 id=\"RSS配置\"><a href=\"#RSS配置\" class=\"headerlink\" title=\"RSS配置\"></a>RSS配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  npm install hexo-generator-feed --save  <span class=\"comment\">#插件 install</span></div></pre></td></tr></table></figure>\n<ol>\n<li>博客根目录下的<code>_config.yml</code> 文件做如下配置：<br>`            feed:<pre><code>type: atom\npath: atom.xml\nlimit: 20\n</code></pre>hub:<br>`</li>\n<li><p>主题根目录下配置文件做如下修改：<br> <code>rss: /atom.xml</code></p>\n</li>\n<li><p>重新生成、部署。</p>\n</li>\n</ol>\n<h3 id=\"文章评论功能-设置\"><a href=\"#文章评论功能-设置\" class=\"headerlink\" title=\"文章评论功能 设置\"></a>文章评论功能 设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname: lomo1   </div><div class=\"line\"><span class=\"comment\">## 多说注册时，要求填写的三级域名里的那个name</span></div><div class=\"line\"><span class=\"comment\">##如果名称和域名里的那个name不一致，则用域名里的那个name，否则评论数据会消失.</span></div><div class=\"line\"></div><div class=\"line\">disqus_shortname:     </div><div class=\"line\"><span class=\"comment\">## 国外的dispus评论功能插件.</span></div></pre></td></tr></table></figure>\n<p>使用多说 -&gt; <a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">http://duoshuo.com/</a></p>\n<p>目前主要就这么多总结，给自己做笔记，留个备份，方便后用。后续问题再补充进来。<br>对了随时插入图片的问题，还没解决好，后续跟进…</p>\n","excerpt":"","more":"<p>基于GitHub Pages 加上自己的域名lomo.space创建个人博客，并将博客相关数据、文件免费托管于Github. 2013年左右时，个人博客是基于WordPress二次开发并自己购买空间、域名进行第三方付费托管于维护。</p>\n<h2 id=\"【第一部分】安装-Hexo-服务-各类依赖\"><a href=\"#【第一部分】安装-Hexo-服务-各类依赖\" class=\"headerlink\" title=\"【第一部分】安装 Hexo + 服务 + 各类依赖\"></a>【第一部分】安装 Hexo + 服务 + 各类依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli <span class=\"comment\">#全局安装cli</span></div></pre></td></tr></table></figure>\n<h3 id=\"初始化-Hexo\"><a href=\"#初始化-Hexo\" class=\"headerlink\" title=\"初始化 Hexo\"></a>初始化 Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init +文件夹名</div></pre></td></tr></table></figure>\n<p>init过程可能遇到NPM warning 级别错误，提示deprecated swig的错误：<br>    <img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/node-swig-error.png\" alt=\"img\"></p>\n<p>解决方案：<br><code>npm install swig@latest</code></p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo --save    <span class=\"comment\">#非全局(-g)</span></div></pre></td></tr></table></figure>\n<h3 id=\"生成静态资源文件\"><a href=\"#生成静态资源文件\" class=\"headerlink\" title=\"生成静态资源文件\"></a>生成静态资源文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g || hexo generate <span class=\"comment\">#生成静态可访问资源(html+css+js)，附带一个web示例</span></div></pre></td></tr></table></figure>\n<p>生成的示例可通过URL：<a href=\"http://localhost:4000/\">http://localhost:4000/</a>  进行访问。</p>\n<h3 id=\"尝试启动服务\"><a href=\"#尝试启动服务\" class=\"headerlink\" title=\"尝试启动服务\"></a>尝试启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s || hexo serve  <span class=\"comment\">#启动本地服务器</span></div></pre></td></tr></table></figure>\n<p>由于是首次本地安装Hexo，故尝试起服务前，必须安装一个server依赖包，否则会报错！<br>使用NPM安装serve依赖包：<br>    <code>npm install hexo-server --save</code><br>再次重启服务：hexo g, hexo s -o, 自动打开浏览器，发现空白，只有一行提示：<code>Cannot get /</code> 这样的错误提示！</p>\n<h4 id=\"针对以上错误-解决方案\"><a href=\"#针对以上错误-解决方案\" class=\"headerlink\" title=\"针对以上错误 解决方案:\"></a>针对以上错误 解决方案:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  npm install hexo-renderer-ejs --save  <span class=\"comment\">#hexo依赖</span></div><div class=\"line\">$  npm install hexo-renderer-stylus --save  <span class=\"comment\">#hexo依赖</span></div><div class=\"line\">$  npm install hexo-renderer-marked --save  <span class=\"comment\">#hexo依赖</span></div></pre></td></tr></table></figure>\n<p>重新生成、部署本地服务，hexo g, hexo s。<br>浏览器重新打开URL：<a href=\"http://localhost:4000/\">http://localhost:4000/</a> 访问OK，出现了基本页面。</p>\n<p>至此，Hexo-cli、hexo 安装及基本依赖安装完毕。</p>\n<h2 id=\"【第二部分】主题-及theme配置、二次开发\"><a href=\"#【第二部分】主题-及theme配置、二次开发\" class=\"headerlink\" title=\"【第二部分】主题 及theme配置、二次开发\"></a>【第二部分】主题 及theme配置、二次开发</h2><p>选取自己喜欢的主题即可，可参考知乎或GitHub上自行索取。</p>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> themes</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/wuchong/jacman.git  <span class=\"comment\"># 选用的主题</span></div></pre></td></tr></table></figure>\n</code></pre><p>安装完主题后，在对应主题根目录下有一个和该Blog根目录下同名的 <code>_config.yml</code> 配置文件,注意区别！</p>\n<p>二次开发部分此处省略，直接参考整个Blog代码。</p>\n<h2 id=\"【第三部分】常用功能模块配置\"><a href=\"#【第三部分】常用功能模块配置\" class=\"headerlink\" title=\"【第三部分】常用功能模块配置\"></a>【第三部分】常用功能模块配置</h2><h3 id=\"博客基本配置\"><a href=\"#博客基本配置\" class=\"headerlink\" title=\"博客基本配置\"></a>博客基本配置</h3><p>首页默认展示文章形式(缩略：只显示部分)，可修改，在主题配置文件 <code>_config.yml</code>中：<br><code>index:\n  expand: false   #缩略显示\n  excerpt_link: Read More</code></p>\n<h4 id=\"根目录-config-yml配置\"><a href=\"#根目录-config-yml配置\" class=\"headerlink\" title=\"根目录_config.yml配置\"></a>根目录_config.yml配置</h4><p>为了便于deploy本地文件到GitHub上，在博客根目录的 <code>_config.yml</code> 文件中，找到deploy关键字，如果没有，则在文件最后加上如下：<br>    `    deploy:<br>            type: git<br>            repo: <a href=\"https://github.com/lomo1/lomo1.github.io.git\">https://github.com/lomo1/lomo1.github.io.git</a>  </p>\n<pre><code>        #自己的github page地址\n    branch: master  #分支\n`\n</code></pre><h4 id=\"快捷部署至GitHub\"><a href=\"#快捷部署至GitHub\" class=\"headerlink\" title=\"快捷部署至GitHub\"></a>快捷部署至GitHub</h4><p>为了使用快捷部署功能：hexo d 或hexo deploy (hexo g本地生成最新public文件夹之后)，必须要先安装一个hexo依赖包：<br><code>npm install hexo-deployer-git --save</code><br>最后hexo d 即可将最新博客相关数据文件更新至GitHub Pages上。</p>\n<h3 id=\"主题基本配置\"><a href=\"#主题基本配置\" class=\"headerlink\" title=\"主题基本配置\"></a>主题基本配置</h3><p>安装完主题后，博客根目录 <code>_config.yml</code> 启动新的主题：<br><code>theme: jacman\nstylus:\n    compress: true</code></p>\n<p>菜单部分配置对应主题文件夹下的_config.yml文件，可参考如下:<br>    <code>menu:</code><br>      <code>Home: /</code><br>      <code>Essay: /categories/essay</code><br>      <code>Write: /categories/write</code><br>      <code>Read:    /categories/read</code><br>      <code>Study: /categories/study</code><br>      <code>Code: /categories/program</code><br>      <code>About: /about</code></p>\n<p>菜单按照如上配置后，在博客根目录下的 <code>source</code>目录下创建(若无)对应的目录，并在每一个folder下创建index.md 填充内容，否则在浏览器点击导航栏的Link后，跳转的页面是空白页。</p>\n<h3 id=\"Widget配置\"><a href=\"#Widget配置\" class=\"headerlink\" title=\"Widget配置\"></a>Widget配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">author:</div><div class=\"line\">  intro_line1:  <span class=\"string\">\"Lomo's Introduce One...\"</span>    <span class=\"comment\">## your introduction on the bottom of the page</span></div><div class=\"line\">  intro_line2:  <span class=\"string\">\"Lomo's Introduce Two ....\"</span>  <span class=\"comment\">## the 2nd line</span></div><div class=\"line\">  weibo:    <span class=\"comment\">## 微博ID, http://weibo.com/527123733/home?wvr=5</span></div><div class=\"line\">  weibo_verifier:    </div><div class=\"line\">  tsina:    </div><div class=\"line\">  douban: chnhawk    </div><div class=\"line\">  zhihu: chan-donald     </div><div class=\"line\">  email: lomo@lomo.space     </div><div class=\"line\">  twitter: chnhawk   </div><div class=\"line\">  github:    <span class=\"comment\">## e.g. for https://github.com/lomo1</span></div><div class=\"line\">  facebook:  </div><div class=\"line\">  linkedin:   </div><div class=\"line\">  google_plus:    <span class=\"comment\">## e.g. \"1111908813418008123\", the \"\" is needed!</span></div><div class=\"line\">  stackoverflow:  <span class=\"comment\">## e.g. 123221 </span></div><div class=\"line\">  <span class=\"comment\">## 填写对应的社交账户的ID后，网站底部就会显示个人的社交主页链接，访客可直接点击访问个人对应社交主页.</span></div></pre></td></tr></table></figure>\n<h4 id=\"友情链接-配置\"><a href=\"#友情链接-配置\" class=\"headerlink\" title=\"友情链接 配置\"></a>友情链接 配置</h4><p>主题目录下的 <code>_config.yml</code> 文件：<br>    <code>#### Links</code><br><code>links:</code><br>  <code>看雪: http://www.kanxue.com/</code><br>  <code>GoogleCodeStyle: https://google.github.io/styleguide/</code></p>\n<h4 id=\"Sina-WeiBo-配置\"><a href=\"#Sina-WeiBo-配置\" class=\"headerlink\" title=\"Sina WeiBo 配置\"></a>Sina WeiBo 配置</h4><ol>\n<li>获取嵌入代码: <a href=\"http://app.weibo.com/tool/weiboshow\">http://app.weibo.com/tool/weiboshow</a>, 选取样式，并copy iframe代码</li>\n<li><code>cd /Users/lomo/Documents/Blog/themes/jacman/layout/_widget</code></li>\n<li>编辑weibo.ejs（/theme/layout/widget/weibo.ejs）,paste刚才copy的 iframe代码</li>\n<li>hexo g, hexo s 查看效果。</li>\n</ol>\n<h4 id=\"RSS配置\"><a href=\"#RSS配置\" class=\"headerlink\" title=\"RSS配置\"></a>RSS配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  npm install hexo-generator-feed --save  <span class=\"comment\">#插件 install</span></div></pre></td></tr></table></figure>\n<ol>\n<li>博客根目录下的<code>_config.yml</code> 文件做如下配置：<br>`            feed:<pre><code>type: atom\npath: atom.xml\nlimit: 20\n</code></pre>hub:<br>`</li>\n<li><p>主题根目录下配置文件做如下修改：<br> <code>rss: /atom.xml</code></p>\n</li>\n<li><p>重新生成、部署。</p>\n</li>\n</ol>\n<h3 id=\"文章评论功能-设置\"><a href=\"#文章评论功能-设置\" class=\"headerlink\" title=\"文章评论功能 设置\"></a>文章评论功能 设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname: lomo1   </div><div class=\"line\"><span class=\"comment\">## 多说注册时，要求填写的三级域名里的那个name</span></div><div class=\"line\"><span class=\"comment\">##如果名称和域名里的那个name不一致，则用域名里的那个name，否则评论数据会消失.</span></div><div class=\"line\"></div><div class=\"line\">disqus_shortname:     </div><div class=\"line\"><span class=\"comment\">## 国外的dispus评论功能插件.</span></div></pre></td></tr></table></figure>\n<p>使用多说 -&gt; <a href=\"http://duoshuo.com/\">http://duoshuo.com/</a></p>\n<p>目前主要就这么多总结，给自己做笔记，留个备份，方便后用。后续问题再补充进来。<br>对了随时插入图片的问题，还没解决好，后续跟进…</p>\n"},{"title":"install Brew tools on Mac","date":"2016-05-23T11:09:24.000Z","_content":"\n## Mac安装Brew\n```bash\n$ ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"\n```\n\n安装 cask — 基于homebrew的一个增强工具\n\n`brew tap phinze/cask`\n\n`brew install brew-cask`\n\n\n\n\n\nhomebrew-cask是一套建立在homebrew基础上的Mac软件安装命令行工具.\n\n同时安装4个软件sublime-text  skitch dropbox  google-chorme\n\n`brew cask install sublime-text skitch dropbox  google-chrome`\n\n### brew常用命令\n\n```bash\nbrew cask search    #列出所有可以被安装的软件\nbrew cask search drop  #查找所有和 *drop* 相关的应用\nbrew cask info xxx  #查看 xx 如：*迅雷* 应用的信息，这货安装的可是最新版本的迅雷哦！\nbrew cask uninstall qq  #卸载 *QQ*\nbrew update && brew upgrade  #更新所有应用程序\nbrew cask ls   #列出通过brew cask 安装的软件\nbrew cask cleanup    #清除下载缓存及链接信息\n\n```\n\n\nhomebrew-cask是将应用程序放置在 \n`/opt/homebrew-cask/Caskroom/` \n\n\n### Mac命令行增强工具\n\n安装oh-my-zsh\n\n```bash\n$ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n`cat /etc/shells`\n\n即可看到刚才安装的zsh;\n\n切换到最新安装的bash:\n\n`chsh -s /bin/zsh`\n\n### zsh问题：\n\n切换shell 从bash切换至zsh后， `~/.bash_profile`里的环境变量失效解决：\n\n在~/.zshrc添加 `source ~/.bash_profile`\n\n### zsh主题\n\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/themes\n\n在此选择好主题后，\n\n`vim ~/.zshrc`\n\n找到`ZSH_THEME=` 修改其为需要的主题名即可.\n\n","source":"_posts/install-Brew-tools-on-Mac.md","raw":"---\ntitle: install Brew tools on Mac\ndate: 2016-05-23 19:09:24\ntags: [Mac, Brew, zsh]\ncategories: read\n---\n\n## Mac安装Brew\n```bash\n$ ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"\n```\n\n安装 cask — 基于homebrew的一个增强工具\n\n`brew tap phinze/cask`\n\n`brew install brew-cask`\n\n\n\n\n\nhomebrew-cask是一套建立在homebrew基础上的Mac软件安装命令行工具.\n\n同时安装4个软件sublime-text  skitch dropbox  google-chorme\n\n`brew cask install sublime-text skitch dropbox  google-chrome`\n\n### brew常用命令\n\n```bash\nbrew cask search    #列出所有可以被安装的软件\nbrew cask search drop  #查找所有和 *drop* 相关的应用\nbrew cask info xxx  #查看 xx 如：*迅雷* 应用的信息，这货安装的可是最新版本的迅雷哦！\nbrew cask uninstall qq  #卸载 *QQ*\nbrew update && brew upgrade  #更新所有应用程序\nbrew cask ls   #列出通过brew cask 安装的软件\nbrew cask cleanup    #清除下载缓存及链接信息\n\n```\n\n\nhomebrew-cask是将应用程序放置在 \n`/opt/homebrew-cask/Caskroom/` \n\n\n### Mac命令行增强工具\n\n安装oh-my-zsh\n\n```bash\n$ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n`cat /etc/shells`\n\n即可看到刚才安装的zsh;\n\n切换到最新安装的bash:\n\n`chsh -s /bin/zsh`\n\n### zsh问题：\n\n切换shell 从bash切换至zsh后， `~/.bash_profile`里的环境变量失效解决：\n\n在~/.zshrc添加 `source ~/.bash_profile`\n\n### zsh主题\n\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/themes\n\n在此选择好主题后，\n\n`vim ~/.zshrc`\n\n找到`ZSH_THEME=` 修改其为需要的主题名即可.\n\n","slug":"install-Brew-tools-on-Mac","published":1,"updated":"2017-02-25T16:03:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fo6000weyqmmwzfmrqg","content":"<h2 id=\"Mac安装Brew\"><a href=\"#Mac安装Brew\" class=\"headerlink\" title=\"Mac安装Brew\"></a>Mac安装Brew</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)</span>\"</span></div></pre></td></tr></table></figure>\n<p>安装 cask — 基于homebrew的一个增强工具</p>\n<p><code>brew tap phinze/cask</code></p>\n<p><code>brew install brew-cask</code></p>\n<p>homebrew-cask是一套建立在homebrew基础上的Mac软件安装命令行工具.</p>\n<p>同时安装4个软件sublime-text  skitch dropbox  google-chorme</p>\n<p><code>brew cask install sublime-text skitch dropbox  google-chrome</code></p>\n<h3 id=\"brew常用命令\"><a href=\"#brew常用命令\" class=\"headerlink\" title=\"brew常用命令\"></a>brew常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask search    <span class=\"comment\">#列出所有可以被安装的软件</span></div><div class=\"line\">brew cask search drop  <span class=\"comment\">#查找所有和 *drop* 相关的应用</span></div><div class=\"line\">brew cask info xxx  <span class=\"comment\">#查看 xx 如：*迅雷* 应用的信息，这货安装的可是最新版本的迅雷哦！</span></div><div class=\"line\">brew cask uninstall qq  <span class=\"comment\">#卸载 *QQ*</span></div><div class=\"line\">brew update &amp;&amp; brew upgrade  <span class=\"comment\">#更新所有应用程序</span></div><div class=\"line\">brew cask ls   <span class=\"comment\">#列出通过brew cask 安装的软件</span></div><div class=\"line\">brew cask cleanup    <span class=\"comment\">#清除下载缓存及链接信息</span></div></pre></td></tr></table></figure>\n<p>homebrew-cask是将应用程序放置在<br><code>/opt/homebrew-cask/Caskroom/</code> </p>\n<h3 id=\"Mac命令行增强工具\"><a href=\"#Mac命令行增强工具\" class=\"headerlink\" title=\"Mac命令行增强工具\"></a>Mac命令行增强工具</h3><p>安装oh-my-zsh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></div></pre></td></tr></table></figure>\n<p><code>cat /etc/shells</code></p>\n<p>即可看到刚才安装的zsh;</p>\n<p>切换到最新安装的bash:</p>\n<p><code>chsh -s /bin/zsh</code></p>\n<h3 id=\"zsh问题：\"><a href=\"#zsh问题：\" class=\"headerlink\" title=\"zsh问题：\"></a>zsh问题：</h3><p>切换shell 从bash切换至zsh后， <code>~/.bash_profile</code>里的环境变量失效解决：</p>\n<p>在~/.zshrc添加 <code>source ~/.bash_profile</code></p>\n<h3 id=\"zsh主题\"><a href=\"#zsh主题\" class=\"headerlink\" title=\"zsh主题\"></a>zsh主题</h3><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>\n<p>在此选择好主题后，</p>\n<p><code>vim ~/.zshrc</code></p>\n<p>找到<code>ZSH_THEME=</code> 修改其为需要的主题名即可.</p>\n","excerpt":"","more":"<h2 id=\"Mac安装Brew\"><a href=\"#Mac安装Brew\" class=\"headerlink\" title=\"Mac安装Brew\"></a>Mac安装Brew</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)</span>\"</span></div></pre></td></tr></table></figure>\n<p>安装 cask — 基于homebrew的一个增强工具</p>\n<p><code>brew tap phinze/cask</code></p>\n<p><code>brew install brew-cask</code></p>\n<p>homebrew-cask是一套建立在homebrew基础上的Mac软件安装命令行工具.</p>\n<p>同时安装4个软件sublime-text  skitch dropbox  google-chorme</p>\n<p><code>brew cask install sublime-text skitch dropbox  google-chrome</code></p>\n<h3 id=\"brew常用命令\"><a href=\"#brew常用命令\" class=\"headerlink\" title=\"brew常用命令\"></a>brew常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask search    <span class=\"comment\">#列出所有可以被安装的软件</span></div><div class=\"line\">brew cask search drop  <span class=\"comment\">#查找所有和 *drop* 相关的应用</span></div><div class=\"line\">brew cask info xxx  <span class=\"comment\">#查看 xx 如：*迅雷* 应用的信息，这货安装的可是最新版本的迅雷哦！</span></div><div class=\"line\">brew cask uninstall qq  <span class=\"comment\">#卸载 *QQ*</span></div><div class=\"line\">brew update &amp;&amp; brew upgrade  <span class=\"comment\">#更新所有应用程序</span></div><div class=\"line\">brew cask ls   <span class=\"comment\">#列出通过brew cask 安装的软件</span></div><div class=\"line\">brew cask cleanup    <span class=\"comment\">#清除下载缓存及链接信息</span></div></pre></td></tr></table></figure>\n<p>homebrew-cask是将应用程序放置在<br><code>/opt/homebrew-cask/Caskroom/</code> </p>\n<h3 id=\"Mac命令行增强工具\"><a href=\"#Mac命令行增强工具\" class=\"headerlink\" title=\"Mac命令行增强工具\"></a>Mac命令行增强工具</h3><p>安装oh-my-zsh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></div></pre></td></tr></table></figure>\n<p><code>cat /etc/shells</code></p>\n<p>即可看到刚才安装的zsh;</p>\n<p>切换到最新安装的bash:</p>\n<p><code>chsh -s /bin/zsh</code></p>\n<h3 id=\"zsh问题：\"><a href=\"#zsh问题：\" class=\"headerlink\" title=\"zsh问题：\"></a>zsh问题：</h3><p>切换shell 从bash切换至zsh后， <code>~/.bash_profile</code>里的环境变量失效解决：</p>\n<p>在~/.zshrc添加 <code>source ~/.bash_profile</code></p>\n<h3 id=\"zsh主题\"><a href=\"#zsh主题\" class=\"headerlink\" title=\"zsh主题\"></a>zsh主题</h3><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>\n<p>在此选择好主题后，</p>\n<p><code>vim ~/.zshrc</code></p>\n<p>找到<code>ZSH_THEME=</code> 修改其为需要的主题名即可.</p>\n"},{"title":"Java String/StringBuffer/StringBuilder","date":"2016-03-13T06:42:35.000Z","description":"Java数据类型, String类, ==与equals区别","_content":"\n## Java 数据类型[学习笔记]\n\n### Java数据类型\n\n#### 基本数据类型\n\n> int 、short、float、double、long、byte、boolean、char\n\n> 其中char类型变量，声明初始化时用单引号` '' `\n\n#### 包装类\n\n> Integer、Short、Float、Double、Long、Byte、Boolean、Character\n\n#### String类型\n\n>String类型数据 声明初始化时 使用双引号 ` \"\" `\n\n> String不是基本数据类型；它是由final修饰的，所以也不可以继承；\n\n> String类型变量的2种赋值方式:\n```java\n\t\t//一种直接赋值，例如\n        String a = \"hello world\"；\n\t\t//另一种是用构造方法，例如 \n        String b = new String (\"hello world\");\n\n```\n\nString 类型的可以认为有三种：String、StringBuffer、StringBuilder\n\n##### String类\n\n###### 定义\n\n如：\n\n```java\n    String s = \"chen\";\n```\n\nJVM的栈内存中保存变量s ,  堆内存中保存字符串\"chen\"对象，s 指向字符串chen的地址.\n\nJVM在处理该类字符串时，会进行缓存，比如，如果再声明一个\n```java\n     String t = \"chen\";\n```\n\n则t和s指向的是同一个对象的地址，故：s == t // 输出true；\n\n###### 特征\n> String声明的字符串长度是不可变的，当一个String对象完成创建后，该对象的内容就固定；\n\n###### String类常用方法\n\n使用`.length` 获取字符串长度\n\n\n##### StringBuffer\n\n> 可变字符串类，长度不固定；\n> 使用StringBuffer()时，默认开辟16个字符的长度的空间；\n\n> StringBuffer和StringBuilder都一样，且都继承了AbstractStringBuilder类\n\n```java\n\tStringBuffer sb = new StringBuffer(\"hello\");  \n\tStringBuffer sb2 = new StringBuffer(\"hello\");  \n\tSystem.out.println(sb.equals(sb2));  \n\t//输出: false\n\n```\n\n> ***分析***：\n> String类重写了Object类的equals方法，所以只需要看内容是否相等；但是StringBuffer类没有重写Object类的equals方法，此处的equals()仍然是调用Object类的，所以，调用StringBuffer类的equals()，只有地址和内容都相等的字符串，结果才会返回true.\n\n> Java中字符串拼接最安全的方式是使用StringBuffer的apped方法.\n> String类在追加的时候，源字符串不变（这就是为什么说String是不可变的字符串类型），和新串连接后，重新开辟 一个内存。这样就会造成每次连接一个新串后，都会让之前的串报废，因此也造成了不可避免的内存泄露.\n\n\n##### StringBuilder\n\n>可变字符串类，长度不固定；\n\nStringBuilder类的初始化和主要常用方法和上述的StringBuffer相同.\n\n\n\n##### 三者之间的区别\n\n1. StringBuffer是线程安全，大多数方法前面都有关键字synchronized，这样就会有一定的性能消耗。\n\n2. StringBuilder是非线程安全的，所以效率是三个中最高的。String是效率最低的\n\n\n### ==和equals区别\n\n#### String类的==和equals\n\ne.g.1 \n\n```Java\n\tpublic class StringInit {  \n\t  \n\t    public static void main(String[] args) {  \n\t          \n\t        String s = \"hello world\";  \n\t        String s1 = new String(\"hello world\");  \n\t        String s2 = new String(\"hello world\");  \n\t        String s3 = new String(\"hello\");  \n\t        String s4 = \"hello world\";  \n\t          \n\t        System.out.println(s.equals(s1));;  \n\t        System.out.println(s1.equals(s2));  \n\t        System.out.println(s1.equals(s3));  \n\t        System.out.println(\"------------------\");  \n\t        System.out.println(s == s1);  \n\t        System.out.println(s == s3);  \n\t        System.out.println(s == s4);  \n\t    }  \n}  \n```\n输出：\n\n```bash\n\ttrue\n\ttrue\n\tfalse\n ------------------\n\tfalse\n\tfalse\n    true\n```\n查看源码发现，String类重写了Object类的equals方法：\n```java\n\t\t\tpublic boolean equals(Object anObject) {\n\t\t\t\t    if (this == anObject) {\n\t\t\t            return true;\n\t\t\t        }\n\t\t\t        if (anObject instanceof String) {\n\t\t\t            String anotherString = (String) anObject;\n\t\t\t            int n = value.length;\n\t\t\t            if (n == anotherString.value.length) {\n\t\t\t                char v1[] = value;\n\t\t\t                char v2[] = anotherString.value;\n\t\t\t                int i = 0;\n\t\t\t\t                while (n-- != 0) {\n\t\t\t\t                    if (v1[i] != v2[i])\n\t\t\t\t                            return false;\n\t\t\t\t                    i++;\n\t\t\t\t                }\n\t\t\t                return true;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        return false;\n\t\t\t}\n```\n所以：\n\n>equals比较的是对象的内容，即JVM堆内存中的内容, == 比较的是地址，即栈内存中的内容. 使用构造方法new 创建字符串时，和直接赋值是不一样的!\n\n#### StringBuffer与StringBuilder类的==和equals\n\ne.g.2\n\n```java\npublic class equalsCompare {\n\n    public static void main(String[] args) {\n        String a = new String(\"cd\");\n        String b = new String(\"cd\");\n\n        System.out.println(\"String使用==比较的结果：\" + (a == b) );  // false\n        System.out.println(\"String使用equals比较的结果：\" + a.equals(b)); //true\n\n        StringBuffer sb = new StringBuffer(\"chen\");\n        StringBuffer sb2 = new StringBuffer(\"chen\");\n        System.out.println(\"StringBuffer使用==比较的结果：\" + (sb == sb2) );  // false\n        System.out.println(\"StringBuffer使用equals比较的结果：\" + sb.equals(sb2) ); //false\n\n        StringBuilder sbu = new StringBuilder(\"lomo\");\n        StringBuilder sbu2 = new StringBuilder(\"lomo\");\n        System.out.println(\"StringBuilder==的比较：\" + (sbu == sbu2));  //false\n//        try {\n//            System.out.println(\"StringBuilder==的比较：\" + (sbu == sbu2));  //false\n//        }catch (Exception err){\n//            System.out.println(err);\n//        }\n        System.out.println(\"StringBuilder使用equals比较：\" + sbu.equals(sbu2)); // false\n    }\n}\n```\n\n> 可以看到，StringBuffer和StringBuilder的== 和 equals 比较使用的都是继承自Object类的equals方法，即：比较类型+值内容。\n\nObject类的equals源码：\n```java\n\tpublic boolean equals(Object obj) {\n\t        return (this == obj);\n\t }\n\n```\n\n#### ==和equals区别总结：\n\n> StringBuffer、StringBuilder，使用`equal`或 `==` 比较时，使用的Object的equals方法，比较是否为同一个对象，即 类型+值的比较；\n\n> String类重写了Object类的equals方法，使用equals比较时，只比较值是否相等；==比较是否为同一个对象，比较类型+值。\n\n#### 自定义类型\n\n> 自造数据类型\n\n```java\npublic class CustomDefineClaz{\n\tpublic void method() {\n        //Todo \n    }\n}\n\n//使用：\nCustomDefineClaz t = new CustomDefineClaz();\n\n//调用其方法\nt.method();\n//或 直接：\nnew CustomDefineClaz().method();\n```\n\n==>>\n\n变量定义：\n```bash\n类名 对象名 = new 类名();\n```\n\n方法定义：\n```bash\n修饰符 类名 方法名(参数xxx) {\n    //\n    // 返回类型，无则将方法声明为void\n}\n```\n\n如：\n```java\nclass Person {\n\n}\nclass newObj {\n    Person p1 = new Person();\n\n    public void method() {\n        //do sth..\n        //no return data <- void\n    }\n\n    public static Person methods() {\n        //do sth ...\n        return new Person(); // return data 必须是Person类类型的对象，或者说返回类型必须是Person类对象/实例\n    }\n}\n```\n\n>思想：\njava中一切都是class(类)，定义一个class，按需求填充所需属性、方法即可。\n","source":"_posts/java-String-StringBuffer-StringBuilder.md","raw":"---\ntitle: Java String/StringBuffer/StringBuilder\ndate: 2016-03-13 14:42:35\ntags: [java, String]\ncategories: study\ndescription: Java数据类型, String类, ==与equals区别\n---\n\n## Java 数据类型[学习笔记]\n\n### Java数据类型\n\n#### 基本数据类型\n\n> int 、short、float、double、long、byte、boolean、char\n\n> 其中char类型变量，声明初始化时用单引号` '' `\n\n#### 包装类\n\n> Integer、Short、Float、Double、Long、Byte、Boolean、Character\n\n#### String类型\n\n>String类型数据 声明初始化时 使用双引号 ` \"\" `\n\n> String不是基本数据类型；它是由final修饰的，所以也不可以继承；\n\n> String类型变量的2种赋值方式:\n```java\n\t\t//一种直接赋值，例如\n        String a = \"hello world\"；\n\t\t//另一种是用构造方法，例如 \n        String b = new String (\"hello world\");\n\n```\n\nString 类型的可以认为有三种：String、StringBuffer、StringBuilder\n\n##### String类\n\n###### 定义\n\n如：\n\n```java\n    String s = \"chen\";\n```\n\nJVM的栈内存中保存变量s ,  堆内存中保存字符串\"chen\"对象，s 指向字符串chen的地址.\n\nJVM在处理该类字符串时，会进行缓存，比如，如果再声明一个\n```java\n     String t = \"chen\";\n```\n\n则t和s指向的是同一个对象的地址，故：s == t // 输出true；\n\n###### 特征\n> String声明的字符串长度是不可变的，当一个String对象完成创建后，该对象的内容就固定；\n\n###### String类常用方法\n\n使用`.length` 获取字符串长度\n\n\n##### StringBuffer\n\n> 可变字符串类，长度不固定；\n> 使用StringBuffer()时，默认开辟16个字符的长度的空间；\n\n> StringBuffer和StringBuilder都一样，且都继承了AbstractStringBuilder类\n\n```java\n\tStringBuffer sb = new StringBuffer(\"hello\");  \n\tStringBuffer sb2 = new StringBuffer(\"hello\");  \n\tSystem.out.println(sb.equals(sb2));  \n\t//输出: false\n\n```\n\n> ***分析***：\n> String类重写了Object类的equals方法，所以只需要看内容是否相等；但是StringBuffer类没有重写Object类的equals方法，此处的equals()仍然是调用Object类的，所以，调用StringBuffer类的equals()，只有地址和内容都相等的字符串，结果才会返回true.\n\n> Java中字符串拼接最安全的方式是使用StringBuffer的apped方法.\n> String类在追加的时候，源字符串不变（这就是为什么说String是不可变的字符串类型），和新串连接后，重新开辟 一个内存。这样就会造成每次连接一个新串后，都会让之前的串报废，因此也造成了不可避免的内存泄露.\n\n\n##### StringBuilder\n\n>可变字符串类，长度不固定；\n\nStringBuilder类的初始化和主要常用方法和上述的StringBuffer相同.\n\n\n\n##### 三者之间的区别\n\n1. StringBuffer是线程安全，大多数方法前面都有关键字synchronized，这样就会有一定的性能消耗。\n\n2. StringBuilder是非线程安全的，所以效率是三个中最高的。String是效率最低的\n\n\n### ==和equals区别\n\n#### String类的==和equals\n\ne.g.1 \n\n```Java\n\tpublic class StringInit {  \n\t  \n\t    public static void main(String[] args) {  \n\t          \n\t        String s = \"hello world\";  \n\t        String s1 = new String(\"hello world\");  \n\t        String s2 = new String(\"hello world\");  \n\t        String s3 = new String(\"hello\");  \n\t        String s4 = \"hello world\";  \n\t          \n\t        System.out.println(s.equals(s1));;  \n\t        System.out.println(s1.equals(s2));  \n\t        System.out.println(s1.equals(s3));  \n\t        System.out.println(\"------------------\");  \n\t        System.out.println(s == s1);  \n\t        System.out.println(s == s3);  \n\t        System.out.println(s == s4);  \n\t    }  \n}  \n```\n输出：\n\n```bash\n\ttrue\n\ttrue\n\tfalse\n ------------------\n\tfalse\n\tfalse\n    true\n```\n查看源码发现，String类重写了Object类的equals方法：\n```java\n\t\t\tpublic boolean equals(Object anObject) {\n\t\t\t\t    if (this == anObject) {\n\t\t\t            return true;\n\t\t\t        }\n\t\t\t        if (anObject instanceof String) {\n\t\t\t            String anotherString = (String) anObject;\n\t\t\t            int n = value.length;\n\t\t\t            if (n == anotherString.value.length) {\n\t\t\t                char v1[] = value;\n\t\t\t                char v2[] = anotherString.value;\n\t\t\t                int i = 0;\n\t\t\t\t                while (n-- != 0) {\n\t\t\t\t                    if (v1[i] != v2[i])\n\t\t\t\t                            return false;\n\t\t\t\t                    i++;\n\t\t\t\t                }\n\t\t\t                return true;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        return false;\n\t\t\t}\n```\n所以：\n\n>equals比较的是对象的内容，即JVM堆内存中的内容, == 比较的是地址，即栈内存中的内容. 使用构造方法new 创建字符串时，和直接赋值是不一样的!\n\n#### StringBuffer与StringBuilder类的==和equals\n\ne.g.2\n\n```java\npublic class equalsCompare {\n\n    public static void main(String[] args) {\n        String a = new String(\"cd\");\n        String b = new String(\"cd\");\n\n        System.out.println(\"String使用==比较的结果：\" + (a == b) );  // false\n        System.out.println(\"String使用equals比较的结果：\" + a.equals(b)); //true\n\n        StringBuffer sb = new StringBuffer(\"chen\");\n        StringBuffer sb2 = new StringBuffer(\"chen\");\n        System.out.println(\"StringBuffer使用==比较的结果：\" + (sb == sb2) );  // false\n        System.out.println(\"StringBuffer使用equals比较的结果：\" + sb.equals(sb2) ); //false\n\n        StringBuilder sbu = new StringBuilder(\"lomo\");\n        StringBuilder sbu2 = new StringBuilder(\"lomo\");\n        System.out.println(\"StringBuilder==的比较：\" + (sbu == sbu2));  //false\n//        try {\n//            System.out.println(\"StringBuilder==的比较：\" + (sbu == sbu2));  //false\n//        }catch (Exception err){\n//            System.out.println(err);\n//        }\n        System.out.println(\"StringBuilder使用equals比较：\" + sbu.equals(sbu2)); // false\n    }\n}\n```\n\n> 可以看到，StringBuffer和StringBuilder的== 和 equals 比较使用的都是继承自Object类的equals方法，即：比较类型+值内容。\n\nObject类的equals源码：\n```java\n\tpublic boolean equals(Object obj) {\n\t        return (this == obj);\n\t }\n\n```\n\n#### ==和equals区别总结：\n\n> StringBuffer、StringBuilder，使用`equal`或 `==` 比较时，使用的Object的equals方法，比较是否为同一个对象，即 类型+值的比较；\n\n> String类重写了Object类的equals方法，使用equals比较时，只比较值是否相等；==比较是否为同一个对象，比较类型+值。\n\n#### 自定义类型\n\n> 自造数据类型\n\n```java\npublic class CustomDefineClaz{\n\tpublic void method() {\n        //Todo \n    }\n}\n\n//使用：\nCustomDefineClaz t = new CustomDefineClaz();\n\n//调用其方法\nt.method();\n//或 直接：\nnew CustomDefineClaz().method();\n```\n\n==>>\n\n变量定义：\n```bash\n类名 对象名 = new 类名();\n```\n\n方法定义：\n```bash\n修饰符 类名 方法名(参数xxx) {\n    //\n    // 返回类型，无则将方法声明为void\n}\n```\n\n如：\n```java\nclass Person {\n\n}\nclass newObj {\n    Person p1 = new Person();\n\n    public void method() {\n        //do sth..\n        //no return data <- void\n    }\n\n    public static Person methods() {\n        //do sth ...\n        return new Person(); // return data 必须是Person类类型的对象，或者说返回类型必须是Person类对象/实例\n    }\n}\n```\n\n>思想：\njava中一切都是class(类)，定义一个class，按需求填充所需属性、方法即可。\n","slug":"java-String-StringBuffer-StringBuilder","published":1,"updated":"2017-03-14T02:00:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fo8000yeyqmrcgm0pl4","content":"<h2 id=\"Java-数据类型-学习笔记\"><a href=\"#Java-数据类型-学习笔记\" class=\"headerlink\" title=\"Java 数据类型[学习笔记]\"></a>Java 数据类型[学习笔记]</h2><h3 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h3><h4 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h4><blockquote>\n<p>int 、short、float、double、long、byte、boolean、char</p>\n<p>其中char类型变量，声明初始化时用单引号<code>&#39;&#39;</code></p>\n</blockquote>\n<h4 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h4><blockquote>\n<p>Integer、Short、Float、Double、Long、Byte、Boolean、Character</p>\n</blockquote>\n<h4 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h4><blockquote>\n<p>String类型数据 声明初始化时 使用双引号 <code>&quot;&quot;</code></p>\n<p>String不是基本数据类型；它是由final修饰的，所以也不可以继承；</p>\n<p>String类型变量的2种赋值方式:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一种直接赋值，例如</span></div><div class=\"line\">      String a = <span class=\"string\">\"hello world\"</span>；</div><div class=\"line\"><span class=\"comment\">//另一种是用构造方法，例如 </span></div><div class=\"line\">      String b = <span class=\"keyword\">new</span> String (<span class=\"string\">\"hello world\"</span>);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>String 类型的可以认为有三种：String、StringBuffer、StringBuilder</p>\n<h5 id=\"String类\"><a href=\"#String类\" class=\"headerlink\" title=\"String类\"></a>String类</h5><h6 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h6><p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"string\">\"chen\"</span>;</div></pre></td></tr></table></figure>\n<p>JVM的栈内存中保存变量s ,  堆内存中保存字符串”chen”对象，s 指向字符串chen的地址.</p>\n<p>JVM在处理该类字符串时，会进行缓存，比如，如果再声明一个<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">String t = <span class=\"string\">\"chen\"</span>;</div></pre></td></tr></table></figure></p>\n<p>则t和s指向的是同一个对象的地址，故：s == t // 输出true；</p>\n<h6 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h6><blockquote>\n<p>String声明的字符串长度是不可变的，当一个String对象完成创建后，该对象的内容就固定；</p>\n</blockquote>\n<h6 id=\"String类常用方法\"><a href=\"#String类常用方法\" class=\"headerlink\" title=\"String类常用方法\"></a>String类常用方法</h6><p>使用<code>.length</code> 获取字符串长度</p>\n<h5 id=\"StringBuffer\"><a href=\"#StringBuffer\" class=\"headerlink\" title=\"StringBuffer\"></a>StringBuffer</h5><blockquote>\n<p>可变字符串类，长度不固定；<br>使用StringBuffer()时，默认开辟16个字符的长度的空间；</p>\n<p>StringBuffer和StringBuilder都一样，且都继承了AbstractStringBuilder类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">StringBuffer sb2 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">System.out.println(sb.equals(sb2));  </div><div class=\"line\"><span class=\"comment\">//输出: false</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><em>分析</em></strong>：<br>String类重写了Object类的equals方法，所以只需要看内容是否相等；但是StringBuffer类没有重写Object类的equals方法，此处的equals()仍然是调用Object类的，所以，调用StringBuffer类的equals()，只有地址和内容都相等的字符串，结果才会返回true.</p>\n<p>Java中字符串拼接最安全的方式是使用StringBuffer的apped方法.<br>String类在追加的时候，源字符串不变（这就是为什么说String是不可变的字符串类型），和新串连接后，重新开辟 一个内存。这样就会造成每次连接一个新串后，都会让之前的串报废，因此也造成了不可避免的内存泄露.</p>\n</blockquote>\n<h5 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h5><blockquote>\n<p>可变字符串类，长度不固定；</p>\n</blockquote>\n<p>StringBuilder类的初始化和主要常用方法和上述的StringBuffer相同.</p>\n<h5 id=\"三者之间的区别\"><a href=\"#三者之间的区别\" class=\"headerlink\" title=\"三者之间的区别\"></a>三者之间的区别</h5><ol>\n<li><p>StringBuffer是线程安全，大多数方法前面都有关键字synchronized，这样就会有一定的性能消耗。</p>\n</li>\n<li><p>StringBuilder是非线程安全的，所以效率是三个中最高的。String是效率最低的</p>\n</li>\n</ol>\n<h3 id=\"和equals区别\"><a href=\"#和equals区别\" class=\"headerlink\" title=\"==和equals区别\"></a>==和equals区别</h3><h4 id=\"String类的-和equals\"><a href=\"#String类的-和equals\" class=\"headerlink\" title=\"String类的==和equals\"></a>String类的==和equals</h4><p>e.g.1 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringInit</span> </span>&#123;  </div><div class=\"line\">\t  </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">\t          </div><div class=\"line\">\t        String s = <span class=\"string\">\"hello world\"</span>;  </div><div class=\"line\">\t        String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello world\"</span>);  </div><div class=\"line\">\t        String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello world\"</span>);  </div><div class=\"line\">\t        String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">\t        String s4 = <span class=\"string\">\"hello world\"</span>;  </div><div class=\"line\">\t          </div><div class=\"line\">\t        System.out.println(s.equals(s1));;  </div><div class=\"line\">\t        System.out.println(s1.equals(s2));  </div><div class=\"line\">\t        System.out.println(s1.equals(s3));  </div><div class=\"line\">\t        System.out.println(<span class=\"string\">\"------------------\"</span>);  </div><div class=\"line\">\t        System.out.println(s == s1);  </div><div class=\"line\">\t        System.out.println(s == s3);  </div><div class=\"line\">\t        System.out.println(s == s4);  </div><div class=\"line\">\t    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">------------------</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">   <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>查看源码发现，String类重写了Object类的equals方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</div><div class=\"line\">            String anotherString = (String) anObject;</div><div class=\"line\">            <span class=\"keyword\">int</span> n = value.length;</div><div class=\"line\">            <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</div><div class=\"line\">                <span class=\"keyword\">char</span> v1[] = value;</div><div class=\"line\">                <span class=\"keyword\">char</span> v2[] = anotherString.value;</div><div class=\"line\">                <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t                <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t                    <span class=\"keyword\">if</span> (v1[i] != v2[i])</div><div class=\"line\">\t                            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t                    i++;</div><div class=\"line\">\t                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>所以：</p>\n<blockquote>\n<p>equals比较的是对象的内容，即JVM堆内存中的内容, == 比较的是地址，即栈内存中的内容. 使用构造方法new 创建字符串时，和直接赋值是不一样的!</p>\n</blockquote>\n<h4 id=\"StringBuffer与StringBuilder类的-和equals\"><a href=\"#StringBuffer与StringBuilder类的-和equals\" class=\"headerlink\" title=\"StringBuffer与StringBuilder类的==和equals\"></a>StringBuffer与StringBuilder类的==和equals</h4><p>e.g.2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">equalsCompare</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        String a = <span class=\"keyword\">new</span> String(<span class=\"string\">\"cd\"</span>);</div><div class=\"line\">        String b = <span class=\"keyword\">new</span> String(<span class=\"string\">\"cd\"</span>);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"String使用==比较的结果：\"</span> + (a == b) );  <span class=\"comment\">// false</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"String使用equals比较的结果：\"</span> + a.equals(b)); <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"chen\"</span>);</div><div class=\"line\">        StringBuffer sb2 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"chen\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"StringBuffer使用==比较的结果：\"</span> + (sb == sb2) );  <span class=\"comment\">// false</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"StringBuffer使用equals比较的结果：\"</span> + sb.equals(sb2) ); <span class=\"comment\">//false</span></div><div class=\"line\"></div><div class=\"line\">        StringBuilder sbu = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"lomo\"</span>);</div><div class=\"line\">        StringBuilder sbu2 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"lomo\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"StringBuilder==的比较：\"</span> + (sbu == sbu2));  <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"comment\">//        try &#123;</span></div><div class=\"line\"><span class=\"comment\">//            System.out.println(\"StringBuilder==的比较：\" + (sbu == sbu2));  //false</span></div><div class=\"line\"><span class=\"comment\">//        &#125;catch (Exception err)&#123;</span></div><div class=\"line\"><span class=\"comment\">//            System.out.println(err);</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"StringBuilder使用equals比较：\"</span> + sbu.equals(sbu2)); <span class=\"comment\">// false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>可以看到，StringBuffer和StringBuilder的== 和 equals 比较使用的都是继承自Object类的equals方法，即：比较类型+值内容。</p>\n</blockquote>\n<p>Object类的equals源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"和equals区别总结：\"><a href=\"#和equals区别总结：\" class=\"headerlink\" title=\"==和equals区别总结：\"></a>==和equals区别总结：</h4><blockquote>\n<p>StringBuffer、StringBuilder，使用<code>equal</code>或 <code>==</code> 比较时，使用的Object的equals方法，比较是否为同一个对象，即 类型+值的比较；</p>\n<p>String类重写了Object类的equals方法，使用equals比较时，只比较值是否相等；==比较是否为同一个对象，比较类型+值。</p>\n</blockquote>\n<h4 id=\"自定义类型\"><a href=\"#自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a>自定义类型</h4><blockquote>\n<p>自造数据类型</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomDefineClaz</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Todo </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用：</span></div><div class=\"line\">CustomDefineClaz t = <span class=\"keyword\">new</span> CustomDefineClaz();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用其方法</span></div><div class=\"line\">t.method();</div><div class=\"line\"><span class=\"comment\">//或 直接：</span></div><div class=\"line\"><span class=\"keyword\">new</span> CustomDefineClaz().method();</div></pre></td></tr></table></figure>\n<p>==&gt;&gt;</p>\n<p>变量定义：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类名 对象名 = new 类名();</div></pre></td></tr></table></figure></p>\n<p>方法定义：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">修饰符 类名 方法名(参数xxx) &#123;</div><div class=\"line\">    //</div><div class=\"line\">    // 返回类型，无则将方法声明为void</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newObj</span> </span>&#123;</div><div class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//do sth..</span></div><div class=\"line\">        <span class=\"comment\">//no return data &lt;- void</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title\">methods</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//do sth ...</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(); <span class=\"comment\">// return data 必须是Person类类型的对象，或者说返回类型必须是Person类对象/实例</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>思想：<br>java中一切都是class(类)，定义一个class，按需求填充所需属性、方法即可。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Java-数据类型-学习笔记\"><a href=\"#Java-数据类型-学习笔记\" class=\"headerlink\" title=\"Java 数据类型[学习笔记]\"></a>Java 数据类型[学习笔记]</h2><h3 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h3><h4 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h4><blockquote>\n<p>int 、short、float、double、long、byte、boolean、char</p>\n<p>其中char类型变量，声明初始化时用单引号<code>&#39;&#39;</code></p>\n</blockquote>\n<h4 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h4><blockquote>\n<p>Integer、Short、Float、Double、Long、Byte、Boolean、Character</p>\n</blockquote>\n<h4 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h4><blockquote>\n<p>String类型数据 声明初始化时 使用双引号 <code>&quot;&quot;</code></p>\n<p>String不是基本数据类型；它是由final修饰的，所以也不可以继承；</p>\n<p>String类型变量的2种赋值方式:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一种直接赋值，例如</span></div><div class=\"line\">      String a = <span class=\"string\">\"hello world\"</span>；</div><div class=\"line\"><span class=\"comment\">//另一种是用构造方法，例如 </span></div><div class=\"line\">      String b = <span class=\"keyword\">new</span> String (<span class=\"string\">\"hello world\"</span>);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>String 类型的可以认为有三种：String、StringBuffer、StringBuilder</p>\n<h5 id=\"String类\"><a href=\"#String类\" class=\"headerlink\" title=\"String类\"></a>String类</h5><h6 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h6><p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"string\">\"chen\"</span>;</div></pre></td></tr></table></figure>\n<p>JVM的栈内存中保存变量s ,  堆内存中保存字符串”chen”对象，s 指向字符串chen的地址.</p>\n<p>JVM在处理该类字符串时，会进行缓存，比如，如果再声明一个<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">String t = <span class=\"string\">\"chen\"</span>;</div></pre></td></tr></table></figure></p>\n<p>则t和s指向的是同一个对象的地址，故：s == t // 输出true；</p>\n<h6 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h6><blockquote>\n<p>String声明的字符串长度是不可变的，当一个String对象完成创建后，该对象的内容就固定；</p>\n</blockquote>\n<h6 id=\"String类常用方法\"><a href=\"#String类常用方法\" class=\"headerlink\" title=\"String类常用方法\"></a>String类常用方法</h6><p>使用<code>.length</code> 获取字符串长度</p>\n<h5 id=\"StringBuffer\"><a href=\"#StringBuffer\" class=\"headerlink\" title=\"StringBuffer\"></a>StringBuffer</h5><blockquote>\n<p>可变字符串类，长度不固定；<br>使用StringBuffer()时，默认开辟16个字符的长度的空间；</p>\n<p>StringBuffer和StringBuilder都一样，且都继承了AbstractStringBuilder类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">StringBuffer sb2 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">System.out.println(sb.equals(sb2));  </div><div class=\"line\"><span class=\"comment\">//输出: false</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><em>分析</em></strong>：<br>String类重写了Object类的equals方法，所以只需要看内容是否相等；但是StringBuffer类没有重写Object类的equals方法，此处的equals()仍然是调用Object类的，所以，调用StringBuffer类的equals()，只有地址和内容都相等的字符串，结果才会返回true.</p>\n<p>Java中字符串拼接最安全的方式是使用StringBuffer的apped方法.<br>String类在追加的时候，源字符串不变（这就是为什么说String是不可变的字符串类型），和新串连接后，重新开辟 一个内存。这样就会造成每次连接一个新串后，都会让之前的串报废，因此也造成了不可避免的内存泄露.</p>\n</blockquote>\n<h5 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h5><blockquote>\n<p>可变字符串类，长度不固定；</p>\n</blockquote>\n<p>StringBuilder类的初始化和主要常用方法和上述的StringBuffer相同.</p>\n<h5 id=\"三者之间的区别\"><a href=\"#三者之间的区别\" class=\"headerlink\" title=\"三者之间的区别\"></a>三者之间的区别</h5><ol>\n<li><p>StringBuffer是线程安全，大多数方法前面都有关键字synchronized，这样就会有一定的性能消耗。</p>\n</li>\n<li><p>StringBuilder是非线程安全的，所以效率是三个中最高的。String是效率最低的</p>\n</li>\n</ol>\n<h3 id=\"和equals区别\"><a href=\"#和equals区别\" class=\"headerlink\" title=\"==和equals区别\"></a>==和equals区别</h3><h4 id=\"String类的-和equals\"><a href=\"#String类的-和equals\" class=\"headerlink\" title=\"String类的==和equals\"></a>String类的==和equals</h4><p>e.g.1 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringInit</span> </span>&#123;  </div><div class=\"line\">\t  </div><div class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">\t          </div><div class=\"line\">\t        String s = <span class=\"string\">\"hello world\"</span>;  </div><div class=\"line\">\t        String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello world\"</span>);  </div><div class=\"line\">\t        String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello world\"</span>);  </div><div class=\"line\">\t        String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello\"</span>);  </div><div class=\"line\">\t        String s4 = <span class=\"string\">\"hello world\"</span>;  </div><div class=\"line\">\t          </div><div class=\"line\">\t        System.out.println(s.equals(s1));;  </div><div class=\"line\">\t        System.out.println(s1.equals(s2));  </div><div class=\"line\">\t        System.out.println(s1.equals(s3));  </div><div class=\"line\">\t        System.out.println(<span class=\"string\">\"------------------\"</span>);  </div><div class=\"line\">\t        System.out.println(s == s1);  </div><div class=\"line\">\t        System.out.println(s == s3);  </div><div class=\"line\">\t        System.out.println(s == s4);  </div><div class=\"line\">\t    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">------------------</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">   <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>查看源码发现，String类重写了Object类的equals方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</div><div class=\"line\">            String anotherString = (String) anObject;</div><div class=\"line\">            <span class=\"keyword\">int</span> n = value.length;</div><div class=\"line\">            <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</div><div class=\"line\">                <span class=\"keyword\">char</span> v1[] = value;</div><div class=\"line\">                <span class=\"keyword\">char</span> v2[] = anotherString.value;</div><div class=\"line\">                <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t                <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t                    <span class=\"keyword\">if</span> (v1[i] != v2[i])</div><div class=\"line\">\t                            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t                    i++;</div><div class=\"line\">\t                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>所以：</p>\n<blockquote>\n<p>equals比较的是对象的内容，即JVM堆内存中的内容, == 比较的是地址，即栈内存中的内容. 使用构造方法new 创建字符串时，和直接赋值是不一样的!</p>\n</blockquote>\n<h4 id=\"StringBuffer与StringBuilder类的-和equals\"><a href=\"#StringBuffer与StringBuilder类的-和equals\" class=\"headerlink\" title=\"StringBuffer与StringBuilder类的==和equals\"></a>StringBuffer与StringBuilder类的==和equals</h4><p>e.g.2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">equalsCompare</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        String a = <span class=\"keyword\">new</span> String(<span class=\"string\">\"cd\"</span>);</div><div class=\"line\">        String b = <span class=\"keyword\">new</span> String(<span class=\"string\">\"cd\"</span>);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"String使用==比较的结果：\"</span> + (a == b) );  <span class=\"comment\">// false</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"String使用equals比较的结果：\"</span> + a.equals(b)); <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"chen\"</span>);</div><div class=\"line\">        StringBuffer sb2 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"chen\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"StringBuffer使用==比较的结果：\"</span> + (sb == sb2) );  <span class=\"comment\">// false</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"StringBuffer使用equals比较的结果：\"</span> + sb.equals(sb2) ); <span class=\"comment\">//false</span></div><div class=\"line\"></div><div class=\"line\">        StringBuilder sbu = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"lomo\"</span>);</div><div class=\"line\">        StringBuilder sbu2 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"lomo\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"StringBuilder==的比较：\"</span> + (sbu == sbu2));  <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"comment\">//        try &#123;</span></div><div class=\"line\"><span class=\"comment\">//            System.out.println(\"StringBuilder==的比较：\" + (sbu == sbu2));  //false</span></div><div class=\"line\"><span class=\"comment\">//        &#125;catch (Exception err)&#123;</span></div><div class=\"line\"><span class=\"comment\">//            System.out.println(err);</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"StringBuilder使用equals比较：\"</span> + sbu.equals(sbu2)); <span class=\"comment\">// false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>可以看到，StringBuffer和StringBuilder的== 和 equals 比较使用的都是继承自Object类的equals方法，即：比较类型+值内容。</p>\n</blockquote>\n<p>Object类的equals源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"和equals区别总结：\"><a href=\"#和equals区别总结：\" class=\"headerlink\" title=\"==和equals区别总结：\"></a>==和equals区别总结：</h4><blockquote>\n<p>StringBuffer、StringBuilder，使用<code>equal</code>或 <code>==</code> 比较时，使用的Object的equals方法，比较是否为同一个对象，即 类型+值的比较；</p>\n<p>String类重写了Object类的equals方法，使用equals比较时，只比较值是否相等；==比较是否为同一个对象，比较类型+值。</p>\n</blockquote>\n<h4 id=\"自定义类型\"><a href=\"#自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a>自定义类型</h4><blockquote>\n<p>自造数据类型</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomDefineClaz</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Todo </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用：</span></div><div class=\"line\">CustomDefineClaz t = <span class=\"keyword\">new</span> CustomDefineClaz();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用其方法</span></div><div class=\"line\">t.method();</div><div class=\"line\"><span class=\"comment\">//或 直接：</span></div><div class=\"line\"><span class=\"keyword\">new</span> CustomDefineClaz().method();</div></pre></td></tr></table></figure>\n<p>==&gt;&gt;</p>\n<p>变量定义：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">类名 对象名 = new 类名();</div></pre></td></tr></table></figure></p>\n<p>方法定义：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">修饰符 类名 方法名(参数xxx) &#123;</div><div class=\"line\">    //</div><div class=\"line\">    // 返回类型，无则将方法声明为void</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newObj</span> </span>&#123;</div><div class=\"line\">    Person p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//do sth..</span></div><div class=\"line\">        <span class=\"comment\">//no return data &lt;- void</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Person <span class=\"title\">methods</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//do sth ...</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person(); <span class=\"comment\">// return data 必须是Person类类型的对象，或者说返回类型必须是Person类对象/实例</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>思想：<br>java中一切都是class(类)，定义一个class，按需求填充所需属性、方法即可。</p>\n</blockquote>\n"},{"title":"linux/centos 常用系统命令","date":"2014-05-06T03:13:09.000Z","_content":"\n## 系统\n```bash\n# uname -a               # 查看内核/操作系统/CPU信息\n# head -n 1 /etc/issue   # 查看操作系统版本\n# cat /proc/cpuinfo      # 查看CPU信息\n# hostname               # 查看计算机名\n# lspci -tv              # 列出所有PCI设备\n# lsusb -tv              # 列出所有USB设备\n# lsmod                  # 列出加载的内核模块\n# env                    # 查看环境变量\n#dmidecode | grep \"Product Nmae\"   #查看服务器型号\n\n# date '+%Y-%m-%d %H:%M:%S' #查看系统时间\n# ps -ef #查看运行进程\n# uptime #查看服务器开机时长，用户数，平均负载\n# lsmod #查看所有加载的模块\n# crontab -l #查看计划任务\n\n#who -b 查看最后一次系统启动的时间\n#who -r 查看当前系统运行时间\n#last reboot可以看到Linux系统历史启动的时间\n#last reboot | head -1 #查看最后一次Linux系统启动的时间\n```\n\n## 资源\n```bash\n# free -m                # 查看内存使用量和交换区使用量\n# df -h                  # 查看各分区使用情况\n# du -sh <目录名>        # 查看指定目录的大小\n# grep MemTotal /proc/meminfo   # 查看内存总量\n# grep MemFree /proc/meminfo    # 查看空闲内存量\n# uptime                 # 查看系统运行时间、用户数、负载\n# cat /proc/loadavg      # 查看系统负载\n```\n## 磁盘和分区\n```bash\n# mount | column -t      # 查看挂接的分区状态\n# fdisk -l               # 查看所有分区\n# swapon -s              # 查看所有交换分区\n# hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)\n# dmesg | grep IDE       # 查看启动时IDE设备检测状况\n```\n\n## 网络\n```bash\n# ifconfig               # 查看所有网络接口的属性\n# iptables -L            # 查看防火墙设置\n# route -n               # 查看路由表\n# netstat -lntp          # 查看所有监听端口\n# netstat -antp          # 查看所有已经建立的连接\n# netstat -s             # 查看网络统计信息\n\n#查看网卡型号\n# lspci |grep Ethernet\n\n#DNS配置\n# cat /etc/resolv.conf\n\n# iptables -L #查看防火墙规则\n# route -n #查看路由表\n# netstat -s #查看网络统计信息\n```\n\n## 进程\n```bash\n# ps -ef                 # 查看所有进程\n# top                    # 实时显示进程状态\n```\n\n## 用户\n```bash\n# w                      # 查看活动用户\n# id <用户名>            # 查看指定用户信息\n# last                   # 查看用户登录日志\n# cut -d: -f1 /etc/passwd   # 查看系统所有用户\n# cut -d: -f1 /etc/group    # 查看系统所有组\n# crontab -l             # 查看当前用户的计划任务\n\n# whoami #查看当前登录用户名\n# id #查看当前用户及其属组\n# w #查看当前登录的用户及运行的命令\n# last #查看最近登录用户\n# cat /etc/passwd|awk -F: '{print $1}' #查看服务器上面所有用户\n```\n\n## 服务\n```bash\n# chkconfig --list       # 列出所有系统服务\n# chkconfig --list | grep on    # 列出所有启动的系统服务\n#sshd 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭\n#httpd 0:关闭 1:关闭 2:关闭 3:启用 4:关闭 5:关闭 6:关闭\n\n#chkconfig xxx on #设置某个服务开启启动\n```\n\n## 程序\n```bash\n# rpm -qa                # 查看所有安装的软件包\n```","source":"_posts/linux-general-command.md","raw":"---\ntitle: linux/centos 常用系统命令\ndate: 2014-05-06 11:13:09\ntags: [Linux, CentOS, 命令行]\ncategories: program\n---\n\n## 系统\n```bash\n# uname -a               # 查看内核/操作系统/CPU信息\n# head -n 1 /etc/issue   # 查看操作系统版本\n# cat /proc/cpuinfo      # 查看CPU信息\n# hostname               # 查看计算机名\n# lspci -tv              # 列出所有PCI设备\n# lsusb -tv              # 列出所有USB设备\n# lsmod                  # 列出加载的内核模块\n# env                    # 查看环境变量\n#dmidecode | grep \"Product Nmae\"   #查看服务器型号\n\n# date '+%Y-%m-%d %H:%M:%S' #查看系统时间\n# ps -ef #查看运行进程\n# uptime #查看服务器开机时长，用户数，平均负载\n# lsmod #查看所有加载的模块\n# crontab -l #查看计划任务\n\n#who -b 查看最后一次系统启动的时间\n#who -r 查看当前系统运行时间\n#last reboot可以看到Linux系统历史启动的时间\n#last reboot | head -1 #查看最后一次Linux系统启动的时间\n```\n\n## 资源\n```bash\n# free -m                # 查看内存使用量和交换区使用量\n# df -h                  # 查看各分区使用情况\n# du -sh <目录名>        # 查看指定目录的大小\n# grep MemTotal /proc/meminfo   # 查看内存总量\n# grep MemFree /proc/meminfo    # 查看空闲内存量\n# uptime                 # 查看系统运行时间、用户数、负载\n# cat /proc/loadavg      # 查看系统负载\n```\n## 磁盘和分区\n```bash\n# mount | column -t      # 查看挂接的分区状态\n# fdisk -l               # 查看所有分区\n# swapon -s              # 查看所有交换分区\n# hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)\n# dmesg | grep IDE       # 查看启动时IDE设备检测状况\n```\n\n## 网络\n```bash\n# ifconfig               # 查看所有网络接口的属性\n# iptables -L            # 查看防火墙设置\n# route -n               # 查看路由表\n# netstat -lntp          # 查看所有监听端口\n# netstat -antp          # 查看所有已经建立的连接\n# netstat -s             # 查看网络统计信息\n\n#查看网卡型号\n# lspci |grep Ethernet\n\n#DNS配置\n# cat /etc/resolv.conf\n\n# iptables -L #查看防火墙规则\n# route -n #查看路由表\n# netstat -s #查看网络统计信息\n```\n\n## 进程\n```bash\n# ps -ef                 # 查看所有进程\n# top                    # 实时显示进程状态\n```\n\n## 用户\n```bash\n# w                      # 查看活动用户\n# id <用户名>            # 查看指定用户信息\n# last                   # 查看用户登录日志\n# cut -d: -f1 /etc/passwd   # 查看系统所有用户\n# cut -d: -f1 /etc/group    # 查看系统所有组\n# crontab -l             # 查看当前用户的计划任务\n\n# whoami #查看当前登录用户名\n# id #查看当前用户及其属组\n# w #查看当前登录的用户及运行的命令\n# last #查看最近登录用户\n# cat /etc/passwd|awk -F: '{print $1}' #查看服务器上面所有用户\n```\n\n## 服务\n```bash\n# chkconfig --list       # 列出所有系统服务\n# chkconfig --list | grep on    # 列出所有启动的系统服务\n#sshd 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭\n#httpd 0:关闭 1:关闭 2:关闭 3:启用 4:关闭 5:关闭 6:关闭\n\n#chkconfig xxx on #设置某个服务开启启动\n```\n\n## 程序\n```bash\n# rpm -qa                # 查看所有安装的软件包\n```","slug":"linux-general-command","published":1,"updated":"2017-02-25T14:54:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9foe0012eyqmk4hw4i1e","content":"<h2 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># uname -a               # 查看内核/操作系统/CPU信息</span></div><div class=\"line\"><span class=\"comment\"># head -n 1 /etc/issue   # 查看操作系统版本</span></div><div class=\"line\"><span class=\"comment\"># cat /proc/cpuinfo      # 查看CPU信息</span></div><div class=\"line\"><span class=\"comment\"># hostname               # 查看计算机名</span></div><div class=\"line\"><span class=\"comment\"># lspci -tv              # 列出所有PCI设备</span></div><div class=\"line\"><span class=\"comment\"># lsusb -tv              # 列出所有USB设备</span></div><div class=\"line\"><span class=\"comment\"># lsmod                  # 列出加载的内核模块</span></div><div class=\"line\"><span class=\"comment\"># env                    # 查看环境变量</span></div><div class=\"line\"><span class=\"comment\">#dmidecode | grep \"Product Nmae\"   #查看服务器型号</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># date '+%Y-%m-%d %H:%M:%S' #查看系统时间</span></div><div class=\"line\"><span class=\"comment\"># ps -ef #查看运行进程</span></div><div class=\"line\"><span class=\"comment\"># uptime #查看服务器开机时长，用户数，平均负载</span></div><div class=\"line\"><span class=\"comment\"># lsmod #查看所有加载的模块</span></div><div class=\"line\"><span class=\"comment\"># crontab -l #查看计划任务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#who -b 查看最后一次系统启动的时间</span></div><div class=\"line\"><span class=\"comment\">#who -r 查看当前系统运行时间</span></div><div class=\"line\"><span class=\"comment\">#last reboot可以看到Linux系统历史启动的时间</span></div><div class=\"line\"><span class=\"comment\">#last reboot | head -1 #查看最后一次Linux系统启动的时间</span></div></pre></td></tr></table></figure>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># free -m                # 查看内存使用量和交换区使用量</span></div><div class=\"line\"><span class=\"comment\"># df -h                  # 查看各分区使用情况</span></div><div class=\"line\"><span class=\"comment\"># du -sh &lt;目录名&gt;        # 查看指定目录的大小</span></div><div class=\"line\"><span class=\"comment\"># grep MemTotal /proc/meminfo   # 查看内存总量</span></div><div class=\"line\"><span class=\"comment\"># grep MemFree /proc/meminfo    # 查看空闲内存量</span></div><div class=\"line\"><span class=\"comment\"># uptime                 # 查看系统运行时间、用户数、负载</span></div><div class=\"line\"><span class=\"comment\"># cat /proc/loadavg      # 查看系统负载</span></div></pre></td></tr></table></figure>\n<h2 id=\"磁盘和分区\"><a href=\"#磁盘和分区\" class=\"headerlink\" title=\"磁盘和分区\"></a>磁盘和分区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># mount | column -t      # 查看挂接的分区状态</span></div><div class=\"line\"><span class=\"comment\"># fdisk -l               # 查看所有分区</span></div><div class=\"line\"><span class=\"comment\"># swapon -s              # 查看所有交换分区</span></div><div class=\"line\"><span class=\"comment\"># hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)</span></div><div class=\"line\"><span class=\"comment\"># dmesg | grep IDE       # 查看启动时IDE设备检测状况</span></div></pre></td></tr></table></figure>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># ifconfig               # 查看所有网络接口的属性</span></div><div class=\"line\"><span class=\"comment\"># iptables -L            # 查看防火墙设置</span></div><div class=\"line\"><span class=\"comment\"># route -n               # 查看路由表</span></div><div class=\"line\"><span class=\"comment\"># netstat -lntp          # 查看所有监听端口</span></div><div class=\"line\"><span class=\"comment\"># netstat -antp          # 查看所有已经建立的连接</span></div><div class=\"line\"><span class=\"comment\"># netstat -s             # 查看网络统计信息</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#查看网卡型号</span></div><div class=\"line\"><span class=\"comment\"># lspci |grep Ethernet</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#DNS配置</span></div><div class=\"line\"><span class=\"comment\"># cat /etc/resolv.conf</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># iptables -L #查看防火墙规则</span></div><div class=\"line\"><span class=\"comment\"># route -n #查看路由表</span></div><div class=\"line\"><span class=\"comment\"># netstat -s #查看网络统计信息</span></div></pre></td></tr></table></figure>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># ps -ef                 # 查看所有进程</span></div><div class=\"line\"><span class=\"comment\"># top                    # 实时显示进程状态</span></div></pre></td></tr></table></figure>\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># w                      # 查看活动用户</span></div><div class=\"line\"><span class=\"comment\"># id &lt;用户名&gt;            # 查看指定用户信息</span></div><div class=\"line\"><span class=\"comment\"># last                   # 查看用户登录日志</span></div><div class=\"line\"><span class=\"comment\"># cut -d: -f1 /etc/passwd   # 查看系统所有用户</span></div><div class=\"line\"><span class=\"comment\"># cut -d: -f1 /etc/group    # 查看系统所有组</span></div><div class=\"line\"><span class=\"comment\"># crontab -l             # 查看当前用户的计划任务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># whoami #查看当前登录用户名</span></div><div class=\"line\"><span class=\"comment\"># id #查看当前用户及其属组</span></div><div class=\"line\"><span class=\"comment\"># w #查看当前登录的用户及运行的命令</span></div><div class=\"line\"><span class=\"comment\"># last #查看最近登录用户</span></div><div class=\"line\"><span class=\"comment\"># cat /etc/passwd|awk -F: '&#123;print $1&#125;' #查看服务器上面所有用户</span></div></pre></td></tr></table></figure>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># chkconfig --list       # 列出所有系统服务</span></div><div class=\"line\"><span class=\"comment\"># chkconfig --list | grep on    # 列出所有启动的系统服务</span></div><div class=\"line\"><span class=\"comment\">#sshd 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭</span></div><div class=\"line\"><span class=\"comment\">#httpd 0:关闭 1:关闭 2:关闭 3:启用 4:关闭 5:关闭 6:关闭</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#chkconfig xxx on #设置某个服务开启启动</span></div></pre></td></tr></table></figure>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># rpm -qa                # 查看所有安装的软件包</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># uname -a               # 查看内核/操作系统/CPU信息</span></div><div class=\"line\"><span class=\"comment\"># head -n 1 /etc/issue   # 查看操作系统版本</span></div><div class=\"line\"><span class=\"comment\"># cat /proc/cpuinfo      # 查看CPU信息</span></div><div class=\"line\"><span class=\"comment\"># hostname               # 查看计算机名</span></div><div class=\"line\"><span class=\"comment\"># lspci -tv              # 列出所有PCI设备</span></div><div class=\"line\"><span class=\"comment\"># lsusb -tv              # 列出所有USB设备</span></div><div class=\"line\"><span class=\"comment\"># lsmod                  # 列出加载的内核模块</span></div><div class=\"line\"><span class=\"comment\"># env                    # 查看环境变量</span></div><div class=\"line\"><span class=\"comment\">#dmidecode | grep \"Product Nmae\"   #查看服务器型号</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># date '+%Y-%m-%d %H:%M:%S' #查看系统时间</span></div><div class=\"line\"><span class=\"comment\"># ps -ef #查看运行进程</span></div><div class=\"line\"><span class=\"comment\"># uptime #查看服务器开机时长，用户数，平均负载</span></div><div class=\"line\"><span class=\"comment\"># lsmod #查看所有加载的模块</span></div><div class=\"line\"><span class=\"comment\"># crontab -l #查看计划任务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#who -b 查看最后一次系统启动的时间</span></div><div class=\"line\"><span class=\"comment\">#who -r 查看当前系统运行时间</span></div><div class=\"line\"><span class=\"comment\">#last reboot可以看到Linux系统历史启动的时间</span></div><div class=\"line\"><span class=\"comment\">#last reboot | head -1 #查看最后一次Linux系统启动的时间</span></div></pre></td></tr></table></figure>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># free -m                # 查看内存使用量和交换区使用量</span></div><div class=\"line\"><span class=\"comment\"># df -h                  # 查看各分区使用情况</span></div><div class=\"line\"><span class=\"comment\"># du -sh &lt;目录名&gt;        # 查看指定目录的大小</span></div><div class=\"line\"><span class=\"comment\"># grep MemTotal /proc/meminfo   # 查看内存总量</span></div><div class=\"line\"><span class=\"comment\"># grep MemFree /proc/meminfo    # 查看空闲内存量</span></div><div class=\"line\"><span class=\"comment\"># uptime                 # 查看系统运行时间、用户数、负载</span></div><div class=\"line\"><span class=\"comment\"># cat /proc/loadavg      # 查看系统负载</span></div></pre></td></tr></table></figure>\n<h2 id=\"磁盘和分区\"><a href=\"#磁盘和分区\" class=\"headerlink\" title=\"磁盘和分区\"></a>磁盘和分区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># mount | column -t      # 查看挂接的分区状态</span></div><div class=\"line\"><span class=\"comment\"># fdisk -l               # 查看所有分区</span></div><div class=\"line\"><span class=\"comment\"># swapon -s              # 查看所有交换分区</span></div><div class=\"line\"><span class=\"comment\"># hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)</span></div><div class=\"line\"><span class=\"comment\"># dmesg | grep IDE       # 查看启动时IDE设备检测状况</span></div></pre></td></tr></table></figure>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># ifconfig               # 查看所有网络接口的属性</span></div><div class=\"line\"><span class=\"comment\"># iptables -L            # 查看防火墙设置</span></div><div class=\"line\"><span class=\"comment\"># route -n               # 查看路由表</span></div><div class=\"line\"><span class=\"comment\"># netstat -lntp          # 查看所有监听端口</span></div><div class=\"line\"><span class=\"comment\"># netstat -antp          # 查看所有已经建立的连接</span></div><div class=\"line\"><span class=\"comment\"># netstat -s             # 查看网络统计信息</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#查看网卡型号</span></div><div class=\"line\"><span class=\"comment\"># lspci |grep Ethernet</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#DNS配置</span></div><div class=\"line\"><span class=\"comment\"># cat /etc/resolv.conf</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># iptables -L #查看防火墙规则</span></div><div class=\"line\"><span class=\"comment\"># route -n #查看路由表</span></div><div class=\"line\"><span class=\"comment\"># netstat -s #查看网络统计信息</span></div></pre></td></tr></table></figure>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># ps -ef                 # 查看所有进程</span></div><div class=\"line\"><span class=\"comment\"># top                    # 实时显示进程状态</span></div></pre></td></tr></table></figure>\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># w                      # 查看活动用户</span></div><div class=\"line\"><span class=\"comment\"># id &lt;用户名&gt;            # 查看指定用户信息</span></div><div class=\"line\"><span class=\"comment\"># last                   # 查看用户登录日志</span></div><div class=\"line\"><span class=\"comment\"># cut -d: -f1 /etc/passwd   # 查看系统所有用户</span></div><div class=\"line\"><span class=\"comment\"># cut -d: -f1 /etc/group    # 查看系统所有组</span></div><div class=\"line\"><span class=\"comment\"># crontab -l             # 查看当前用户的计划任务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># whoami #查看当前登录用户名</span></div><div class=\"line\"><span class=\"comment\"># id #查看当前用户及其属组</span></div><div class=\"line\"><span class=\"comment\"># w #查看当前登录的用户及运行的命令</span></div><div class=\"line\"><span class=\"comment\"># last #查看最近登录用户</span></div><div class=\"line\"><span class=\"comment\"># cat /etc/passwd|awk -F: '&#123;print $1&#125;' #查看服务器上面所有用户</span></div></pre></td></tr></table></figure>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># chkconfig --list       # 列出所有系统服务</span></div><div class=\"line\"><span class=\"comment\"># chkconfig --list | grep on    # 列出所有启动的系统服务</span></div><div class=\"line\"><span class=\"comment\">#sshd 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭</span></div><div class=\"line\"><span class=\"comment\">#httpd 0:关闭 1:关闭 2:关闭 3:启用 4:关闭 5:关闭 6:关闭</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#chkconfig xxx on #设置某个服务开启启动</span></div></pre></td></tr></table></figure>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># rpm -qa                # 查看所有安装的软件包</span></div></pre></td></tr></table></figure>"},{"title":"Linux安装PHP扩展小记","date":"2016-11-09T05:07:38.000Z","_content":"\n## Linux 安装PHP扩展 手记\n\n### 检查mysql拓展是否安装成功\n```bash\n$  php -i | grep mysql\n```\n### 自动安装.so库并配置php.ini\n```bash\n# 如安装mysql拓展 \n  yum search mysql|grep php     \n  #我们搜索到拓展名为 php-mysql.x86_64 \n  sudo yum install php-mysql \n  #这样php-mysql拓展便安装好了\n\t\n# 如果出现拓展版本和php版本冲突问题， 可安装如下任意yum源： \n  sudo yum install atomic-release.noarch \n  sudo yum install webtatic-release.noarch \n```\n\n\t这些源提供了其他版本的php拓展，同时每个源针对特定拓展都会提供多个版本，你只需安装一个源即可\n\n### install\n\n`php -v`\n\n`yum search mysql|grep php`\n\n如下：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-install.png)\n\n```bash\n$  yum install php55w-mysqlnd.x86_64\n```\n\nDone.\n\n\n","source":"_posts/linux-install-php-extend.md","raw":"---\ntitle: Linux安装PHP扩展小记\ndate: 2016-11-09 13:07:38\ntags: [Linu, PHP, 扩展]\ncategories: study\n---\n\n## Linux 安装PHP扩展 手记\n\n### 检查mysql拓展是否安装成功\n```bash\n$  php -i | grep mysql\n```\n### 自动安装.so库并配置php.ini\n```bash\n# 如安装mysql拓展 \n  yum search mysql|grep php     \n  #我们搜索到拓展名为 php-mysql.x86_64 \n  sudo yum install php-mysql \n  #这样php-mysql拓展便安装好了\n\t\n# 如果出现拓展版本和php版本冲突问题， 可安装如下任意yum源： \n  sudo yum install atomic-release.noarch \n  sudo yum install webtatic-release.noarch \n```\n\n\t这些源提供了其他版本的php拓展，同时每个源针对特定拓展都会提供多个版本，你只需安装一个源即可\n\n### install\n\n`php -v`\n\n`yum search mysql|grep php`\n\n如下：\n\n![img](http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-install.png)\n\n```bash\n$  yum install php55w-mysqlnd.x86_64\n```\n\nDone.\n\n\n","slug":"linux-install-php-extend","published":1,"updated":"2017-02-25T15:37:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9foi0016eyqmez3jm6h3","content":"<h2 id=\"Linux-安装PHP扩展-手记\"><a href=\"#Linux-安装PHP扩展-手记\" class=\"headerlink\" title=\"Linux 安装PHP扩展 手记\"></a>Linux 安装PHP扩展 手记</h2><h3 id=\"检查mysql拓展是否安装成功\"><a href=\"#检查mysql拓展是否安装成功\" class=\"headerlink\" title=\"检查mysql拓展是否安装成功\"></a>检查mysql拓展是否安装成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  php -i | grep mysql</div></pre></td></tr></table></figure>\n<h3 id=\"自动安装-so库并配置php-ini\"><a href=\"#自动安装-so库并配置php-ini\" class=\"headerlink\" title=\"自动安装.so库并配置php.ini\"></a>自动安装.so库并配置php.ini</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 如安装mysql拓展 </span></div><div class=\"line\">  yum search mysql|grep php     </div><div class=\"line\">  <span class=\"comment\">#我们搜索到拓展名为 php-mysql.x86_64 </span></div><div class=\"line\">  sudo yum install php-mysql </div><div class=\"line\">  <span class=\"comment\">#这样php-mysql拓展便安装好了</span></div><div class=\"line\">\t</div><div class=\"line\"><span class=\"comment\"># 如果出现拓展版本和php版本冲突问题， 可安装如下任意yum源： </span></div><div class=\"line\">  sudo yum install atomic-release.noarch </div><div class=\"line\">  sudo yum install webtatic-release.noarch</div></pre></td></tr></table></figure>\n<pre><code>这些源提供了其他版本的php拓展，同时每个源针对特定拓展都会提供多个版本，你只需安装一个源即可\n</code></pre><h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p><code>php -v</code></p>\n<p><code>yum search mysql|grep php</code></p>\n<p>如下：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-install.png\" alt=\"img\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum install php55w-mysqlnd.x86_64</div></pre></td></tr></table></figure>\n<p>Done.</p>\n","excerpt":"","more":"<h2 id=\"Linux-安装PHP扩展-手记\"><a href=\"#Linux-安装PHP扩展-手记\" class=\"headerlink\" title=\"Linux 安装PHP扩展 手记\"></a>Linux 安装PHP扩展 手记</h2><h3 id=\"检查mysql拓展是否安装成功\"><a href=\"#检查mysql拓展是否安装成功\" class=\"headerlink\" title=\"检查mysql拓展是否安装成功\"></a>检查mysql拓展是否安装成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  php -i | grep mysql</div></pre></td></tr></table></figure>\n<h3 id=\"自动安装-so库并配置php-ini\"><a href=\"#自动安装-so库并配置php-ini\" class=\"headerlink\" title=\"自动安装.so库并配置php.ini\"></a>自动安装.so库并配置php.ini</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 如安装mysql拓展 </span></div><div class=\"line\">  yum search mysql|grep php     </div><div class=\"line\">  <span class=\"comment\">#我们搜索到拓展名为 php-mysql.x86_64 </span></div><div class=\"line\">  sudo yum install php-mysql </div><div class=\"line\">  <span class=\"comment\">#这样php-mysql拓展便安装好了</span></div><div class=\"line\">\t</div><div class=\"line\"><span class=\"comment\"># 如果出现拓展版本和php版本冲突问题， 可安装如下任意yum源： </span></div><div class=\"line\">  sudo yum install atomic-release.noarch </div><div class=\"line\">  sudo yum install webtatic-release.noarch</div></pre></td></tr></table></figure>\n<pre><code>这些源提供了其他版本的php拓展，同时每个源针对特定拓展都会提供多个版本，你只需安装一个源即可\n</code></pre><h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p><code>php -v</code></p>\n<p><code>yum search mysql|grep php</code></p>\n<p>如下：</p>\n<p><img src=\"http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/mysql-install.png\" alt=\"img\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  yum install php55w-mysqlnd.x86_64</div></pre></td></tr></table></figure>\n<p>Done.</p>\n"},{"title":"about love","date":"2016-03-05T02:17:59.000Z","_content":"\n## Love\n\n> If i know what love is, it is because of you\n\n### 一\n努力走过那么多条街，才遇到你。\n\n\n### 二\n而你现在的气质里，藏着你走过的路，读过的书和爱过的人。\n\n\n### 三\n那个让你流泪的，是你最爱的人；\n\n那个懂你眼泪的，是最爱你的人。\n\n那个为你擦干眼泪的，才是最后和你相守的人。\n\n### 四\n那个没能陪你到最后的人，却教会你怎样去爱一个人。\n\n那个没能陪你爱到最后的，却因为你而成为更好的人。\n\n### 五\n每个人都会犯错，你若深爱一个人，无论ta如何对你，无论犯什么错，或是一转身，或者一夜，或是在ta哄你喂你吃一颗葡萄🍇的那一刻，或是吵完架后ta还死皮赖脸地冲你傻笑，你都会原谅，甚至为ta找理由。\n\n你若不爱一个人，可能对方只说错一句话，或做错了一件小事，就会遭到你反感，就会立刻翻脸闹分手。\n\n当一个人抓住你的小错或是过往依依不挠，不是因为你的错或过往多么不堪，而是以因为不爱你。\n\n原谅这种小事，只和爱的深浅有关，有多少爱，就有多少原谅","source":"_posts/love.md","raw":"---\ntitle: about love\ndate: 2016-03-05 10:17:59\ntags: [love,lomo]\ncategories: write\n---\n\n## Love\n\n> If i know what love is, it is because of you\n\n### 一\n努力走过那么多条街，才遇到你。\n\n\n### 二\n而你现在的气质里，藏着你走过的路，读过的书和爱过的人。\n\n\n### 三\n那个让你流泪的，是你最爱的人；\n\n那个懂你眼泪的，是最爱你的人。\n\n那个为你擦干眼泪的，才是最后和你相守的人。\n\n### 四\n那个没能陪你到最后的人，却教会你怎样去爱一个人。\n\n那个没能陪你爱到最后的，却因为你而成为更好的人。\n\n### 五\n每个人都会犯错，你若深爱一个人，无论ta如何对你，无论犯什么错，或是一转身，或者一夜，或是在ta哄你喂你吃一颗葡萄🍇的那一刻，或是吵完架后ta还死皮赖脸地冲你傻笑，你都会原谅，甚至为ta找理由。\n\n你若不爱一个人，可能对方只说错一句话，或做错了一件小事，就会遭到你反感，就会立刻翻脸闹分手。\n\n当一个人抓住你的小错或是过往依依不挠，不是因为你的错或过往多么不堪，而是以因为不爱你。\n\n原谅这种小事，只和爱的深浅有关，有多少爱，就有多少原谅","slug":"love","published":1,"updated":"2017-03-12T09:42:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9foo0019eyqmsc2ocqyl","content":"<h2 id=\"Love\"><a href=\"#Love\" class=\"headerlink\" title=\"Love\"></a>Love</h2><blockquote>\n<p>If i know what love is, it is because of you</p>\n</blockquote>\n<h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><p>努力走过那么多条街，才遇到你。</p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>而你现在的气质里，藏着你走过的路，读过的书和爱过的人。</p>\n<h3 id=\"三\"><a href=\"#三\" class=\"headerlink\" title=\"三\"></a>三</h3><p>那个让你流泪的，是你最爱的人；</p>\n<p>那个懂你眼泪的，是最爱你的人。</p>\n<p>那个为你擦干眼泪的，才是最后和你相守的人。</p>\n<h3 id=\"四\"><a href=\"#四\" class=\"headerlink\" title=\"四\"></a>四</h3><p>那个没能陪你到最后的人，却教会你怎样去爱一个人。</p>\n<p>那个没能陪你爱到最后的，却因为你而成为更好的人。</p>\n<h3 id=\"五\"><a href=\"#五\" class=\"headerlink\" title=\"五\"></a>五</h3><p>每个人都会犯错，你若深爱一个人，无论ta如何对你，无论犯什么错，或是一转身，或者一夜，或是在ta哄你喂你吃一颗葡萄🍇的那一刻，或是吵完架后ta还死皮赖脸地冲你傻笑，你都会原谅，甚至为ta找理由。</p>\n<p>你若不爱一个人，可能对方只说错一句话，或做错了一件小事，就会遭到你反感，就会立刻翻脸闹分手。</p>\n<p>当一个人抓住你的小错或是过往依依不挠，不是因为你的错或过往多么不堪，而是以因为不爱你。</p>\n<p>原谅这种小事，只和爱的深浅有关，有多少爱，就有多少原谅</p>\n","excerpt":"","more":"<h2 id=\"Love\"><a href=\"#Love\" class=\"headerlink\" title=\"Love\"></a>Love</h2><blockquote>\n<p>If i know what love is, it is because of you</p>\n</blockquote>\n<h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><p>努力走过那么多条街，才遇到你。</p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>而你现在的气质里，藏着你走过的路，读过的书和爱过的人。</p>\n<h3 id=\"三\"><a href=\"#三\" class=\"headerlink\" title=\"三\"></a>三</h3><p>那个让你流泪的，是你最爱的人；</p>\n<p>那个懂你眼泪的，是最爱你的人。</p>\n<p>那个为你擦干眼泪的，才是最后和你相守的人。</p>\n<h3 id=\"四\"><a href=\"#四\" class=\"headerlink\" title=\"四\"></a>四</h3><p>那个没能陪你到最后的人，却教会你怎样去爱一个人。</p>\n<p>那个没能陪你爱到最后的，却因为你而成为更好的人。</p>\n<h3 id=\"五\"><a href=\"#五\" class=\"headerlink\" title=\"五\"></a>五</h3><p>每个人都会犯错，你若深爱一个人，无论ta如何对你，无论犯什么错，或是一转身，或者一夜，或是在ta哄你喂你吃一颗葡萄🍇的那一刻，或是吵完架后ta还死皮赖脸地冲你傻笑，你都会原谅，甚至为ta找理由。</p>\n<p>你若不爱一个人，可能对方只说错一句话，或做错了一件小事，就会遭到你反感，就会立刻翻脸闹分手。</p>\n<p>当一个人抓住你的小错或是过往依依不挠，不是因为你的错或过往多么不堪，而是以因为不爱你。</p>\n<p>原谅这种小事，只和爱的深浅有关，有多少爱，就有多少原谅</p>\n"},{"title":"ssh login without password","date":"2016-10-18T09:13:51.000Z","_content":"\n## SSH远程免密码登录Linux主机\n\nA为本地主机(即用于控制其他主机的机器) ;\n\nB为远程主机(即被控制的机器Server), 假如ip为100.73.21.32 ;\n\nA和B的系统都是Linux。\n\n### A机器\n\n在A机器(本地机器)上：\n\n  First,\n\n`$ ssh-keygen -t rsa`\n\n连续三次回车,即在本地生成了公钥和私钥,不设置密码;\n\n    Second,\n\n`$ ssh root@你的Linux主机IP地址 \"mkdir .ssh\"  ##输入密码`\n\n    Third,\n\n`scp ~/.ssh/id_rsa.pub root@你的Linux主机IP地址:.ssh/id_rsa.pub ##输入密码`\n\n在B机器(远端Linux)上:\n\n### 在B机器\n\n`touch /root/.ssh/authorized_keys`\n\n`cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys`\n    \n将id_rsa.pub的内容追加到authorized_keys 中;\n\n\n### A机器\n\n返回A机器终端：\n\n`ssh root@远端机器IP` \n\n成功登陆！\n\n也可以在本地机器加入alias，如：\n\n`alias clientTools=\"ssh root@IP地址`\n\n\n\n\n\n\n\n","source":"_posts/ssh-login-without-password.md","raw":"---\ntitle: ssh login without password\ndate: 2016-10-18 17:13:51\ntags: [SSH, Login]\ncategories: program\n---\n\n## SSH远程免密码登录Linux主机\n\nA为本地主机(即用于控制其他主机的机器) ;\n\nB为远程主机(即被控制的机器Server), 假如ip为100.73.21.32 ;\n\nA和B的系统都是Linux。\n\n### A机器\n\n在A机器(本地机器)上：\n\n  First,\n\n`$ ssh-keygen -t rsa`\n\n连续三次回车,即在本地生成了公钥和私钥,不设置密码;\n\n    Second,\n\n`$ ssh root@你的Linux主机IP地址 \"mkdir .ssh\"  ##输入密码`\n\n    Third,\n\n`scp ~/.ssh/id_rsa.pub root@你的Linux主机IP地址:.ssh/id_rsa.pub ##输入密码`\n\n在B机器(远端Linux)上:\n\n### 在B机器\n\n`touch /root/.ssh/authorized_keys`\n\n`cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys`\n    \n将id_rsa.pub的内容追加到authorized_keys 中;\n\n\n### A机器\n\n返回A机器终端：\n\n`ssh root@远端机器IP` \n\n成功登陆！\n\n也可以在本地机器加入alias，如：\n\n`alias clientTools=\"ssh root@IP地址`\n\n\n\n\n\n\n\n","slug":"ssh-login-without-password","published":1,"updated":"2017-02-25T15:07:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0ax9fot001ceyqm5uk1vfq4","content":"<h2 id=\"SSH远程免密码登录Linux主机\"><a href=\"#SSH远程免密码登录Linux主机\" class=\"headerlink\" title=\"SSH远程免密码登录Linux主机\"></a>SSH远程免密码登录Linux主机</h2><p>A为本地主机(即用于控制其他主机的机器) ;</p>\n<p>B为远程主机(即被控制的机器Server), 假如ip为100.73.21.32 ;</p>\n<p>A和B的系统都是Linux。</p>\n<h3 id=\"A机器\"><a href=\"#A机器\" class=\"headerlink\" title=\"A机器\"></a>A机器</h3><p>在A机器(本地机器)上：</p>\n<p>  First,</p>\n<p><code>$ ssh-keygen -t rsa</code></p>\n<p>连续三次回车,即在本地生成了公钥和私钥,不设置密码;</p>\n<pre><code>Second,\n</code></pre><p><code>$ ssh root@你的Linux主机IP地址 &quot;mkdir .ssh&quot;  ##输入密码</code></p>\n<pre><code>Third,\n</code></pre><p><code>scp ~/.ssh/id_rsa.pub root@你的Linux主机IP地址:.ssh/id_rsa.pub ##输入密码</code></p>\n<p>在B机器(远端Linux)上:</p>\n<h3 id=\"在B机器\"><a href=\"#在B机器\" class=\"headerlink\" title=\"在B机器\"></a>在B机器</h3><p><code>touch /root/.ssh/authorized_keys</code></p>\n<p><code>cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</code></p>\n<p>将id_rsa.pub的内容追加到authorized_keys 中;</p>\n<h3 id=\"A机器-1\"><a href=\"#A机器-1\" class=\"headerlink\" title=\"A机器\"></a>A机器</h3><p>返回A机器终端：</p>\n<p><code>ssh root@远端机器IP</code> </p>\n<p>成功登陆！</p>\n<p>也可以在本地机器加入alias，如：</p>\n<p><code>alias clientTools=&quot;ssh root@IP地址</code></p>\n","excerpt":"","more":"<h2 id=\"SSH远程免密码登录Linux主机\"><a href=\"#SSH远程免密码登录Linux主机\" class=\"headerlink\" title=\"SSH远程免密码登录Linux主机\"></a>SSH远程免密码登录Linux主机</h2><p>A为本地主机(即用于控制其他主机的机器) ;</p>\n<p>B为远程主机(即被控制的机器Server), 假如ip为100.73.21.32 ;</p>\n<p>A和B的系统都是Linux。</p>\n<h3 id=\"A机器\"><a href=\"#A机器\" class=\"headerlink\" title=\"A机器\"></a>A机器</h3><p>在A机器(本地机器)上：</p>\n<p>  First,</p>\n<p><code>$ ssh-keygen -t rsa</code></p>\n<p>连续三次回车,即在本地生成了公钥和私钥,不设置密码;</p>\n<pre><code>Second,\n</code></pre><p><code>$ ssh root@你的Linux主机IP地址 &quot;mkdir .ssh&quot;  ##输入密码</code></p>\n<pre><code>Third,\n</code></pre><p><code>scp ~/.ssh/id_rsa.pub root@你的Linux主机IP地址:.ssh/id_rsa.pub ##输入密码</code></p>\n<p>在B机器(远端Linux)上:</p>\n<h3 id=\"在B机器\"><a href=\"#在B机器\" class=\"headerlink\" title=\"在B机器\"></a>在B机器</h3><p><code>touch /root/.ssh/authorized_keys</code></p>\n<p><code>cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</code></p>\n<p>将id_rsa.pub的内容追加到authorized_keys 中;</p>\n<h3 id=\"A机器-1\"><a href=\"#A机器-1\" class=\"headerlink\" title=\"A机器\"></a>A机器</h3><p>返回A机器终端：</p>\n<p><code>ssh root@远端机器IP</code> </p>\n<p>成功登陆！</p>\n<p>也可以在本地机器加入alias，如：</p>\n<p><code>alias clientTools=&quot;ssh root@IP地址</code></p>\n"}],"PostAsset":[{"_id":"source/_posts/how-to-write-a-new-article/how-to-write-article.png","slug":"how-to-write-article.png","post":"cj0ax9fnz000qeyqmonsy1nxa","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cj0ax9flw0002eyqmhjtw54g8","category_id":"cj0ax9fmm0006eyqmrcw6tp5l","_id":"cj0ax9fnf000geyqme6k88ogn"},{"post_id":"cj0ax9fna000feyqmjwze82l7","category_id":"cj0ax9fmm0006eyqmrcw6tp5l","_id":"cj0ax9fnt000leyqm2icuvthb"},{"post_id":"cj0ax9fm70004eyqmt4ypyrts","category_id":"cj0ax9fn8000ceyqm8ausim0n","_id":"cj0ax9fny000peyqmaa06jq9z"},{"post_id":"cj0ax9fnr000keyqmdr7jqi0h","category_id":"cj0ax9fn8000ceyqm8ausim0n","_id":"cj0ax9fo2000reyqmyi3zz7xg"},{"post_id":"cj0ax9fms0008eyqmxprpfsfx","category_id":"cj0ax9fmm0006eyqmrcw6tp5l","_id":"cj0ax9fo5000ueyqmx97pbwk3"},{"post_id":"cj0ax9fn3000aeyqmeuxwwfii","category_id":"cj0ax9fnw000neyqmweecv9mn","_id":"cj0ax9fob000zeyqm6o9qu8hw"},{"post_id":"cj0ax9fo6000weyqmmwzfmrqg","category_id":"cj0ax9fn8000ceyqm8ausim0n","_id":"cj0ax9foi0015eyqmcowwhxyn"},{"post_id":"cj0ax9fn6000beyqm2ftuhl2a","category_id":"cj0ax9fnw000neyqmweecv9mn","_id":"cj0ax9foo0017eyqm94vvc3mk"},{"post_id":"cj0ax9fo8000yeyqmrcgm0pl4","category_id":"cj0ax9fmm0006eyqmrcw6tp5l","_id":"cj0ax9fos001beyqm8k20fs1d"},{"post_id":"cj0ax9fni000heyqmqjkthh69","category_id":"cj0ax9foc0010eyqme4x5qx3i","_id":"cj0ax9fp1001deyqm17ukcii7"},{"post_id":"cj0ax9foi0016eyqmez3jm6h3","category_id":"cj0ax9fmm0006eyqmrcw6tp5l","_id":"cj0ax9fp4001geyqmd7emqjc5"},{"post_id":"cj0ax9foo0019eyqmsc2ocqyl","category_id":"cj0ax9fnw000neyqmweecv9mn","_id":"cj0ax9fp5001ieyqmrzn4tsch"},{"post_id":"cj0ax9fnu000meyqmfzrlek04","category_id":"cj0ax9foc0010eyqme4x5qx3i","_id":"cj0ax9fp8001leyqm20ydo52q"},{"post_id":"cj0ax9fnz000qeyqmonsy1nxa","category_id":"cj0ax9foc0010eyqme4x5qx3i","_id":"cj0ax9fp9001oeyqm9qnlvop0"},{"post_id":"cj0ax9fo3000seyqm6uc3jgyb","category_id":"cj0ax9foc0010eyqme4x5qx3i","_id":"cj0ax9fpf001reyqmnxhe3k4l"},{"post_id":"cj0ax9foe0012eyqmk4hw4i1e","category_id":"cj0ax9fpb001peyqm069xs05e","_id":"cj0ax9fpj001weyqmbp72tktv"},{"post_id":"cj0ax9fot001ceyqm5uk1vfq4","category_id":"cj0ax9fpb001peyqm069xs05e","_id":"cj0ax9fpl001yeyqm4mmyl62q"}],"PostTag":[{"post_id":"cj0ax9flw0002eyqmhjtw54g8","tag_id":"cj0ax9fmr0007eyqmd7yekmkw","_id":"cj0ax9fna000eeyqm3hso9az6"},{"post_id":"cj0ax9fm70004eyqmt4ypyrts","tag_id":"cj0ax9fn8000deyqmlvup6un2","_id":"cj0ax9fo8000xeyqmgjysjfgt"},{"post_id":"cj0ax9fm70004eyqmt4ypyrts","tag_id":"cj0ax9fnn000jeyqm1dlvfhqd","_id":"cj0ax9foe0011eyqmvbstp1rh"},{"post_id":"cj0ax9fm70004eyqmt4ypyrts","tag_id":"cj0ax9fnx000oeyqmgbrz7xup","_id":"cj0ax9foi0014eyqm13y5tecm"},{"post_id":"cj0ax9fms0008eyqmxprpfsfx","tag_id":"cj0ax9fo5000veyqmzcjhfazc","_id":"cj0ax9fp5001heyqmv1dm7bbw"},{"post_id":"cj0ax9fms0008eyqmxprpfsfx","tag_id":"cj0ax9foh0013eyqmeeizaccr","_id":"cj0ax9fp7001keyqmgoqx0z6g"},{"post_id":"cj0ax9fms0008eyqmxprpfsfx","tag_id":"cj0ax9fos001aeyqm90b237g7","_id":"cj0ax9fp9001neyqmo865vo4h"},{"post_id":"cj0ax9fn3000aeyqmeuxwwfii","tag_id":"cj0ax9fp4001feyqm67ulo4r8","_id":"cj0ax9fpf001seyqmgcan86v1"},{"post_id":"cj0ax9fn3000aeyqmeuxwwfii","tag_id":"cj0ax9fp8001meyqmj6t2w0pj","_id":"cj0ax9fpi001ueyqmv9x6d8d8"},{"post_id":"cj0ax9fn6000beyqm2ftuhl2a","tag_id":"cj0ax9fpe001qeyqmu3u14td7","_id":"cj0ax9fps0023eyqm7sba229q"},{"post_id":"cj0ax9fn6000beyqm2ftuhl2a","tag_id":"cj0ax9fn8000deyqmlvup6un2","_id":"cj0ax9fpt0024eyqm8v00b5tl"},{"post_id":"cj0ax9fn6000beyqm2ftuhl2a","tag_id":"cj0ax9fpl001xeyqmwnevgpkn","_id":"cj0ax9fpu0026eyqmjfv447wb"},{"post_id":"cj0ax9fn6000beyqm2ftuhl2a","tag_id":"cj0ax9fpn001zeyqmmuutrwbn","_id":"cj0ax9fpu0027eyqme4ykbwfu"},{"post_id":"cj0ax9fn6000beyqm2ftuhl2a","tag_id":"cj0ax9fpo0020eyqmp2tsionf","_id":"cj0ax9fpv0029eyqmcmpgpoj8"},{"post_id":"cj0ax9fn6000beyqm2ftuhl2a","tag_id":"cj0ax9fpp0021eyqm9efhx05i","_id":"cj0ax9fpv002aeyqmpkvlpnbk"},{"post_id":"cj0ax9fna000feyqmjwze82l7","tag_id":"cj0ax9fpp0022eyqm299jxv6l","_id":"cj0ax9fpw002ceyqmb6hsgxaa"},{"post_id":"cj0ax9fna000feyqmjwze82l7","tag_id":"cj0ax9fpt0025eyqmw8dlnc9f","_id":"cj0ax9fpx002deyqmzn72vw1u"},{"post_id":"cj0ax9fni000heyqmqjkthh69","tag_id":"cj0ax9fpo0020eyqmp2tsionf","_id":"cj0ax9fpz002geyqmxzpdhzxf"},{"post_id":"cj0ax9fni000heyqmqjkthh69","tag_id":"cj0ax9fpv002beyqmo1ucdtyu","_id":"cj0ax9fq0002heyqmvns8grrl"},{"post_id":"cj0ax9fni000heyqmqjkthh69","tag_id":"cj0ax9fpp0022eyqm299jxv6l","_id":"cj0ax9fq1002jeyqmy2xp1qqm"},{"post_id":"cj0ax9fnr000keyqmdr7jqi0h","tag_id":"cj0ax9fpp0022eyqm299jxv6l","_id":"cj0ax9fq4002leyqmseqvk6uv"},{"post_id":"cj0ax9fnr000keyqmdr7jqi0h","tag_id":"cj0ax9fpn001zeyqmmuutrwbn","_id":"cj0ax9fq5002meyqmbcaq856z"},{"post_id":"cj0ax9fnu000meyqmfzrlek04","tag_id":"cj0ax9fq2002keyqmwafc92hb","_id":"cj0ax9fq6002peyqmkgreck4q"},{"post_id":"cj0ax9fnu000meyqmfzrlek04","tag_id":"cj0ax9fq5002neyqmqkjdac68","_id":"cj0ax9fq6002qeyqmyj4m3acy"},{"post_id":"cj0ax9fnz000qeyqmonsy1nxa","tag_id":"cj0ax9fq5002oeyqmouk8q7wx","_id":"cj0ax9fq7002seyqmsryudlco"},{"post_id":"cj0ax9fo3000seyqm6uc3jgyb","tag_id":"cj0ax9fq6002reyqmrh3eck66","_id":"cj0ax9fq9002weyqmj5b3wezh"},{"post_id":"cj0ax9fo3000seyqm6uc3jgyb","tag_id":"cj0ax9fq7002teyqmobf1de71","_id":"cj0ax9fq9002xeyqm43yyon94"},{"post_id":"cj0ax9fo3000seyqm6uc3jgyb","tag_id":"cj0ax9fq8002ueyqmjg950whz","_id":"cj0ax9fqa002zeyqms6c40wp5"},{"post_id":"cj0ax9fo6000weyqmmwzfmrqg","tag_id":"cj0ax9fp4001feyqm67ulo4r8","_id":"cj0ax9fqb0032eyqmlydkcp7x"},{"post_id":"cj0ax9fo6000weyqmmwzfmrqg","tag_id":"cj0ax9fq9002yeyqmspzezu1z","_id":"cj0ax9fqc0033eyqm6s30bcga"},{"post_id":"cj0ax9fo6000weyqmmwzfmrqg","tag_id":"cj0ax9fqa0030eyqmnl7wwybk","_id":"cj0ax9fqd0035eyqm56i7q4sp"},{"post_id":"cj0ax9fo8000yeyqmrcgm0pl4","tag_id":"cj0ax9fmr0007eyqmd7yekmkw","_id":"cj0ax9fqd0036eyqm3182hm7g"},{"post_id":"cj0ax9fo8000yeyqmrcgm0pl4","tag_id":"cj0ax9fqa0031eyqmnm77ezrr","_id":"cj0ax9fqe0038eyqmn6n3c3nh"},{"post_id":"cj0ax9foe0012eyqmk4hw4i1e","tag_id":"cj0ax9fn8000deyqmlvup6un2","_id":"cj0ax9fqf003aeyqmesubu9b2"},{"post_id":"cj0ax9foe0012eyqmk4hw4i1e","tag_id":"cj0ax9fpp0022eyqm299jxv6l","_id":"cj0ax9fqf003beyqmokq9et3o"},{"post_id":"cj0ax9foe0012eyqmk4hw4i1e","tag_id":"cj0ax9fqd0037eyqme63eem4m","_id":"cj0ax9fqg003deyqm54jq56if"},{"post_id":"cj0ax9foi0016eyqmez3jm6h3","tag_id":"cj0ax9fqe0039eyqmo8qby11w","_id":"cj0ax9fqi003geyqm8krw6inq"},{"post_id":"cj0ax9foi0016eyqmez3jm6h3","tag_id":"cj0ax9fpn001zeyqmmuutrwbn","_id":"cj0ax9fqi003heyqm4srrz52i"},{"post_id":"cj0ax9foi0016eyqmez3jm6h3","tag_id":"cj0ax9fqg003eeyqmi1akvmcf","_id":"cj0ax9fqi003jeyqmcn2o4u3i"},{"post_id":"cj0ax9foo0019eyqmsc2ocqyl","tag_id":"cj0ax9fqh003feyqmyhko2svx","_id":"cj0ax9fqk003leyqmjekrtwgv"},{"post_id":"cj0ax9foo0019eyqmsc2ocqyl","tag_id":"cj0ax9fqi003ieyqmvxgom4ok","_id":"cj0ax9fqk003meyqm52bpxbsj"},{"post_id":"cj0ax9fot001ceyqm5uk1vfq4","tag_id":"cj0ax9fqj003keyqm0mbn5vfa","_id":"cj0ax9fqn003oeyqmmvvi31p5"},{"post_id":"cj0ax9fot001ceyqm5uk1vfq4","tag_id":"cj0ax9fql003neyqml6jhew0l","_id":"cj0ax9fqn003peyqmanv8let0"}],"Tag":[{"name":"java","_id":"cj0ax9fmr0007eyqmd7yekmkw"},{"name":"Linux","_id":"cj0ax9fn8000deyqmlvup6un2"},{"name":"BSD","_id":"cj0ax9fnn000jeyqm1dlvfhqd"},{"name":"Darwin","_id":"cj0ax9fnx000oeyqmgbrz7xup"},{"name":"MS","_id":"cj0ax9fo5000veyqmzcjhfazc"},{"name":"Bing","_id":"cj0ax9foh0013eyqmeeizaccr"},{"name":"CodeFlow","_id":"cj0ax9fos001aeyqm90b237g7"},{"name":"Mac","_id":"cj0ax9fp4001feyqm67ulo4r8"},{"name":"JDK","_id":"cj0ax9fp8001meyqmj6t2w0pj"},{"name":"centOS","_id":"cj0ax9fpe001qeyqmu3u14td7"},{"name":"LAMP","_id":"cj0ax9fpl001xeyqmwnevgpkn"},{"name":"PHP","_id":"cj0ax9fpn001zeyqmmuutrwbn"},{"name":"MySQL","_id":"cj0ax9fpo0020eyqmp2tsionf"},{"name":"Apache","_id":"cj0ax9fpp0021eyqm9efhx05i"},{"name":"CentOS","_id":"cj0ax9fpp0022eyqm299jxv6l"},{"name":"FTP","_id":"cj0ax9fpt0025eyqmw8dlnc9f"},{"name":"upgrade","_id":"cj0ax9fpv002beyqmo1ucdtyu"},{"name":"gogs","_id":"cj0ax9fq2002keyqmwafc92hb"},{"name":"git","_id":"cj0ax9fq5002neyqmqkjdac68"},{"name":"write","_id":"cj0ax9fq5002oeyqmouk8q7wx"},{"name":"blog","_id":"cj0ax9fq6002reyqmrh3eck66"},{"name":"GitHub","_id":"cj0ax9fq7002teyqmobf1de71"},{"name":"Hexo","_id":"cj0ax9fq8002ueyqmjg950whz"},{"name":"Brew","_id":"cj0ax9fq9002yeyqmspzezu1z"},{"name":"zsh","_id":"cj0ax9fqa0030eyqmnl7wwybk"},{"name":"String","_id":"cj0ax9fqa0031eyqmnm77ezrr"},{"name":"命令行","_id":"cj0ax9fqd0037eyqme63eem4m"},{"name":"Linu","_id":"cj0ax9fqe0039eyqmo8qby11w"},{"name":"扩展","_id":"cj0ax9fqg003eeyqmi1akvmcf"},{"name":"love","_id":"cj0ax9fqh003feyqmyhko2svx"},{"name":"lomo","_id":"cj0ax9fqi003ieyqmvxgom4ok"},{"name":"SSH","_id":"cj0ax9fqj003keyqm0mbn5vfa"},{"name":"Login","_id":"cj0ax9fql003neyqml6jhew0l"}]}}